// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxrichtext_richtext.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif

#include <wxlua/wxlstate.h>
#include "../../../include/wxbind/wxrichtext_bind.h"
#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
  static wxRichTextRange wxRICHTEXT_ALL_S = wxRICHTEXT_ALL;
  static wxRichTextRange wxRICHTEXT_NONE_S = wxRICHTEXT_NONE;
  static wxRichTextRange wxRICHTEXT_NO_SELECTION_S = wxRICHTEXT_NO_SELECTION;
#undef wxRICHTEXT_ALL
#undef wxRICHTEXT_NONE
#undef wxRICHTEXT_NO_SELECTION
#define wxRICHTEXT_ALL wxRICHTEXT_ALL_S
#define wxRICHTEXT_NONE wxRICHTEXT_NONE_S
#define wxRICHTEXT_NO_SELECTION wxRICHTEXT_NO_SELECTION_S
  static wxRect wxNULLRECT = wxRect();
  static wxPoint wxNULLPOINT = wxPoint(0, 0);
  static wxRichTextAttr wxDEFAULT_RICHTEXTATTR = wxRichTextAttr();
#endif

#ifdef __GNUC__
    #pragma GCC diagnostic ignored "-Wunused-variable"
#endif // __GNUC__

#if LUA_VERSION_NUM < 503
#define lua_pushinteger lua_pushnumber
#endif


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxTextAttrDimension
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttrDimension'
int wxluatype_wxTextAttrDimension = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_Apply[] = { &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_Apply[1] = {{ wxLua_wxTextAttrDimension_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrDimension_Apply }};
//     bool Apply(const wxTextAttrDimension& dim, const wxTextAttrDimension* compareWith = NULL);
static int LUACALL wxLua_wxTextAttrDimension_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxTextAttrDimension compareWith = NULL
    const wxTextAttrDimension * compareWith = (argCount >= 3 ? (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimension) : NULL);
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call Apply
    bool returns = (self->Apply(*dim, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_CollectCommonAttributes[] = { &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_CollectCommonAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_CollectCommonAttributes[1] = {{ wxLua_wxTextAttrDimension_CollectCommonAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextAttrDimension_CollectCommonAttributes }};
//     void CollectCommonAttributes(const wxTextAttrDimension& attr, wxTextAttrDimension& clashingAttr, wxTextAttrDimension& absentAttr);
static int LUACALL wxLua_wxTextAttrDimension_CollectCommonAttributes(lua_State *L)
{
    // wxTextAttrDimension absentAttr
    wxTextAttrDimension * absentAttr = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttrDimension);
    // wxTextAttrDimension clashingAttr
    wxTextAttrDimension * clashingAttr = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimension);
    // const wxTextAttrDimension attr
    const wxTextAttrDimension * attr = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call CollectCommonAttributes
    self->CollectCommonAttributes(*attr, *clashingAttr, *absentAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_EqPartial[] = { &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttrDimension_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_EqPartial[1] = {{ wxLua_wxTextAttrDimension_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrDimension_EqPartial }};
//     bool EqPartial(const wxTextAttrDimension& dim, bool weakTest = true) const;
static int LUACALL wxLua_wxTextAttrDimension_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call EqPartial
    bool returns = (self->EqPartial(*dim, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_GetFlags[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_GetFlags[1] = {{ wxLua_wxTextAttrDimension_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_GetFlags }};
//     wxTextAttrDimensionFlags GetFlags() const;
static int LUACALL wxLua_wxTextAttrDimension_GetFlags(lua_State *L)
{
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call GetFlags
    wxTextAttrDimensionFlags returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_GetPosition[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_GetPosition[1] = {{ wxLua_wxTextAttrDimension_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_GetPosition }};
//     wxTextBoxAttrPosition GetPosition() const;
static int LUACALL wxLua_wxTextAttrDimension_GetPosition(lua_State *L)
{
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call GetPosition
    wxTextBoxAttrPosition returns = (self->GetPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_GetUnits[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_GetUnits(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_GetUnits[1] = {{ wxLua_wxTextAttrDimension_GetUnits, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_GetUnits }};
//     wxTextAttrUnits GetUnits() const;
static int LUACALL wxLua_wxTextAttrDimension_GetUnits(lua_State *L)
{
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call GetUnits
    wxTextAttrUnits returns = (self->GetUnits());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_GetValue[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_GetValue[1] = {{ wxLua_wxTextAttrDimension_GetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_GetValue }};
//     int GetValue() const;
static int LUACALL wxLua_wxTextAttrDimension_GetValue(lua_State *L)
{
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call GetValue
    int returns = (self->GetValue());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_GetValueMM[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_GetValueMM(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_GetValueMM[1] = {{ wxLua_wxTextAttrDimension_GetValueMM, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_GetValueMM }};
//     float GetValueMM() const;
static int LUACALL wxLua_wxTextAttrDimension_GetValueMM(lua_State *L)
{
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call GetValueMM
    float returns = (self->GetValueMM());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_Get_m_flags[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_Get_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_Get_m_flags[1] = {{ wxLua_wxTextAttrDimension_Get_m_flags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_Get_m_flags }};
//     wxTextAttrDimensionFlags    m_flags;
static int LUACALL wxLua_wxTextAttrDimension_Get_m_flags(lua_State *L)
{
    // get this
    wxTextAttrDimension *self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_flags) == (double)(self->m_flags)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_flags);
} else
#endif
{
    lua_pushnumber(L, self->m_flags);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_Get_m_value[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_Get_m_value(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_Get_m_value[1] = {{ wxLua_wxTextAttrDimension_Get_m_value, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_Get_m_value }};
//     int                         m_value;
static int LUACALL wxLua_wxTextAttrDimension_Get_m_value(lua_State *L)
{
    // get this
    wxTextAttrDimension *self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_value) == (double)(self->m_value)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_value);
} else
#endif
{
    lua_pushnumber(L, self->m_value);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_IsValid[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_IsValid[1] = {{ wxLua_wxTextAttrDimension_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_IsValid }};
//     bool IsValid() const;
static int LUACALL wxLua_wxTextAttrDimension_IsValid(lua_State *L)
{
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_Reset[] = { &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_Reset[1] = {{ wxLua_wxTextAttrDimension_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_Reset }};
//     void Reset();
static int LUACALL wxLua_wxTextAttrDimension_Reset(lua_State *L)
{
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetFlags[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetFlags[1] = {{ wxLua_wxTextAttrDimension_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetFlags }};
//     void SetFlags(wxTextAttrDimensionFlags flags);
static int LUACALL wxLua_wxTextAttrDimension_SetFlags(lua_State *L)
{
    // wxTextAttrDimensionFlags flags
    wxTextAttrDimensionFlags flags = (wxTextAttrDimensionFlags)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetPosition[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetPosition[1] = {{ wxLua_wxTextAttrDimension_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetPosition }};
//     void SetPosition(wxTextBoxAttrPosition pos);
static int LUACALL wxLua_wxTextAttrDimension_SetPosition(lua_State *L)
{
    // wxTextBoxAttrPosition pos
    wxTextBoxAttrPosition pos = (wxTextBoxAttrPosition)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetPosition
    self->SetPosition(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetUnits[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetUnits(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetUnits[1] = {{ wxLua_wxTextAttrDimension_SetUnits, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetUnits }};
//     void SetUnits(wxTextAttrUnits units);
static int LUACALL wxLua_wxTextAttrDimension_SetUnits(lua_State *L)
{
    // wxTextAttrUnits units
    wxTextAttrUnits units = (wxTextAttrUnits)wxlua_getenumtype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetUnits
    self->SetUnits(units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValid[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetValid[1] = {{ wxLua_wxTextAttrDimension_SetValid, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValid }};
//     void SetValid(bool b);
static int LUACALL wxLua_wxTextAttrDimension_SetValid(lua_State *L)
{
    // bool b
    bool b = wxlua_getbooleantype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetValid
    self->SetValid(b);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue3[] = { &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetValue3(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetValue3[1] = {{ wxLua_wxTextAttrDimension_SetValue3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue3 }};
//     void SetValue(const wxTextAttrDimension& dim);
static int LUACALL wxLua_wxTextAttrDimension_SetValue3(lua_State *L)
{
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetValue
    self->SetValue(*dim);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue2[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetValue2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetValue2[1] = {{ wxLua_wxTextAttrDimension_SetValue2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue2 }};
//     void SetValue(int value, wxTextAttrUnits units);
static int LUACALL wxLua_wxTextAttrDimension_SetValue2(lua_State *L)
{
    // wxTextAttrUnits units
    wxTextAttrUnits units = (wxTextAttrUnits)wxlua_getenumtype(L, 3);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetValue
    self->SetValue(value, units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue1[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetValue1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetValue1[1] = {{ wxLua_wxTextAttrDimension_SetValue1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue1 }};
//     void SetValue(int value, wxTextAttrDimensionFlags flags);
static int LUACALL wxLua_wxTextAttrDimension_SetValue1(lua_State *L)
{
    // wxTextAttrDimensionFlags flags
    wxTextAttrDimensionFlags flags = (wxTextAttrDimensionFlags)wxlua_getnumbertype(L, 3);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetValue
    self->SetValue(value, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetValue(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetValue[1] = {{ wxLua_wxTextAttrDimension_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue }};
//     void SetValue(int value);
static int LUACALL wxLua_wxTextAttrDimension_SetValue(lua_State *L)
{
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetValue
    self->SetValue(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValueMM[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_SetValueMM(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetValueMM[1] = {{ wxLua_wxTextAttrDimension_SetValueMM, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValueMM }};
//     void SetValueMM(float value);
static int LUACALL wxLua_wxTextAttrDimension_SetValueMM(lua_State *L)
{
    // float value
    float value = (float)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetValueMM
    self->SetValueMM(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_Set_m_flags[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_Set_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_Set_m_flags[1] = {{ wxLua_wxTextAttrDimension_Set_m_flags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_Set_m_flags }};
//     wxTextAttrDimensionFlags    m_flags;
static int LUACALL wxLua_wxTextAttrDimension_Set_m_flags(lua_State *L)
{
    // get the number value
    wxTextAttrDimensionFlags val = (wxTextAttrDimensionFlags)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimension *self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    self->m_flags = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_Set_m_value[] = { &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_Set_m_value(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_Set_m_value[1] = {{ wxLua_wxTextAttrDimension_Set_m_value, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_Set_m_value }};
//     int                         m_value;
static int LUACALL wxLua_wxTextAttrDimension_Set_m_value(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimension *self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    self->m_value = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_delete[] = { &wxluatype_wxTextAttrDimension, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimension_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_op_eq[] = { &wxluatype_wxTextAttrDimension, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimension_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_op_eq[1] = {{ wxLua_wxTextAttrDimension_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_op_eq }};
//     bool operator==(const wxTextAttrDimension& dim) const;
static int LUACALL wxLua_wxTextAttrDimension_op_eq(lua_State *L)
{
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimension * self = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call op_eq
    bool returns = ((*self)==(*dim));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimension_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrDimension_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_constructor1[1] = {{ wxLua_wxTextAttrDimension_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_constructor1 }};
//     wxTextAttrDimension(int value, wxTextAttrUnits units = wxTEXT_ATTR_UNITS_TENTHS_MM);
static int LUACALL wxLua_wxTextAttrDimension_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTextAttrUnits units = wxTEXT_ATTR_UNITS_TENTHS_MM
    wxTextAttrUnits units = (argCount >= 2 ? (wxTextAttrUnits)wxlua_getenumtype(L, 2) : wxTEXT_ATTR_UNITS_TENTHS_MM);
    // int value
    int value = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxTextAttrDimension* returns = new wxTextAttrDimension(value, units);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrDimension);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static int LUACALL wxLua_wxTextAttrDimension_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_constructor[1] = {{ wxLua_wxTextAttrDimension_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextAttrDimension();
static int LUACALL wxLua_wxTextAttrDimension_constructor(lua_State *L)
{
    // call constructor
    wxTextAttrDimension* returns = new wxTextAttrDimension();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrDimension);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_SetValue_overload[] =
{
    { wxLua_wxTextAttrDimension_SetValue3, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue3 },
    { wxLua_wxTextAttrDimension_SetValue2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue2 },
    { wxLua_wxTextAttrDimension_SetValue1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue1 },
    { wxLua_wxTextAttrDimension_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_SetValue },
};
static int s_wxluafunc_wxLua_wxTextAttrDimension_SetValue_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrDimension_SetValue_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimension_constructor_overload[] =
{
    { wxLua_wxTextAttrDimension_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxTextAttrDimension_constructor1 },
    { wxLua_wxTextAttrDimension_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTextAttrDimension_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrDimension_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxTextAttrDimension_delete_function(void** p)
{
    wxTextAttrDimension* o = (wxTextAttrDimension*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttrDimension_methods[] = {
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_Apply, 1, NULL },
    { "CollectCommonAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_CollectCommonAttributes, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_EqPartial, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_GetFlags, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_GetPosition, 1, NULL },
    { "GetUnits", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_GetUnits, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_GetValue, 1, NULL },
    { "GetValueMM", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_GetValueMM, 1, NULL },
    // %member    { "Get_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_Get_m_flags, 1, NULL },
    // %member    { "Get_m_value", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_Get_m_value, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_IsValid, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_Reset, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_SetFlags, 1, NULL },
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_SetPosition, 1, NULL },
    { "SetUnits", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_SetUnits, 1, NULL },
    { "SetValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_SetValid, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_SetValue_overload, s_wxluafunc_wxLua_wxTextAttrDimension_SetValue_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetValueMM", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_SetValueMM, 1, NULL },
    // %member    { "Set_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_Set_m_flags, 1, NULL },
    // %member    { "Set_m_value", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_Set_m_value, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttrDimension_delete, 1, NULL },
    { "m_flags", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimension_Set_m_flags, 1, NULL },
    { "m_flags", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimension_Get_m_flags, 1, NULL },
    { "m_value", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimension_Set_m_value, 1, NULL },
    { "m_value", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimension_Get_m_value, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimension_op_eq, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxTextAttrDimension", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttrDimension_constructor_overload, s_wxluafunc_wxLua_wxTextAttrDimension_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxTextAttrDimension_methodCount = sizeof(wxTextAttrDimension_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxTextAttrDimensions
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttrDimensions'
int wxluatype_wxTextAttrDimensions = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Apply[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Apply[1] = {{ wxLua_wxTextAttrDimensions_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Apply }};
//     bool Apply(const wxTextAttrDimensions& dims, const wxTextAttrDimensions* compareWith = NULL);
static int LUACALL wxLua_wxTextAttrDimensions_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxTextAttrDimensions compareWith = NULL
    const wxTextAttrDimensions * compareWith = (argCount >= 3 ? (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimensions) : NULL);
    // const wxTextAttrDimensions dims
    const wxTextAttrDimensions * dims = (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call Apply
    bool returns = (self->Apply(*dims, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_CollectCommonAttributes[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_CollectCommonAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_CollectCommonAttributes[1] = {{ wxLua_wxTextAttrDimensions_CollectCommonAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextAttrDimensions_CollectCommonAttributes }};
//     void CollectCommonAttributes(const wxTextAttrDimensions& attr, wxTextAttrDimensions& clashingAttr, wxTextAttrDimensions& absentAttr);
static int LUACALL wxLua_wxTextAttrDimensions_CollectCommonAttributes(lua_State *L)
{
    // wxTextAttrDimensions absentAttr
    wxTextAttrDimensions * absentAttr = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttrDimensions);
    // wxTextAttrDimensions clashingAttr
    wxTextAttrDimensions * clashingAttr = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimensions);
    // const wxTextAttrDimensions attr
    const wxTextAttrDimensions * attr = (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call CollectCommonAttributes
    self->CollectCommonAttributes(*attr, *clashingAttr, *absentAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_EqPartial[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_EqPartial[1] = {{ wxLua_wxTextAttrDimensions_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrDimensions_EqPartial }};
//     bool EqPartial(const wxTextAttrDimensions& dims, bool weakTest = true) const;
static int LUACALL wxLua_wxTextAttrDimensions_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTextAttrDimensions dims
    const wxTextAttrDimensions * dims = (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call EqPartial
    bool returns = (self->EqPartial(*dims, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetBottom1[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetBottom1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetBottom1[1] = {{ wxLua_wxTextAttrDimensions_GetBottom1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetBottom1 }};
//     wxTextAttrDimension& GetBottom();
static int LUACALL wxLua_wxTextAttrDimensions_GetBottom1(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetBottom
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetBottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetBottom[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetBottom(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetBottom[1] = {{ wxLua_wxTextAttrDimensions_GetBottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetBottom }};
//     const wxTextAttrDimension& GetBottom() const;
static int LUACALL wxLua_wxTextAttrDimensions_GetBottom(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetBottom
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetBottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetLeft1[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetLeft1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetLeft1[1] = {{ wxLua_wxTextAttrDimensions_GetLeft1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetLeft1 }};
//     wxTextAttrDimension& GetLeft();
static int LUACALL wxLua_wxTextAttrDimensions_GetLeft1(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetLeft
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetLeft();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetLeft[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetLeft(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetLeft[1] = {{ wxLua_wxTextAttrDimensions_GetLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetLeft }};
//     const wxTextAttrDimension& GetLeft() const;
static int LUACALL wxLua_wxTextAttrDimensions_GetLeft(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetLeft
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetLeft();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetRight1[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetRight1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetRight1[1] = {{ wxLua_wxTextAttrDimensions_GetRight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetRight1 }};
//     wxTextAttrDimension& GetRight();
static int LUACALL wxLua_wxTextAttrDimensions_GetRight1(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetRight
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetRight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetRight[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetRight(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetRight[1] = {{ wxLua_wxTextAttrDimensions_GetRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetRight }};
//     const wxTextAttrDimension& GetRight() const;
static int LUACALL wxLua_wxTextAttrDimensions_GetRight(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetRight
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetRight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetTop1[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetTop1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetTop1[1] = {{ wxLua_wxTextAttrDimensions_GetTop1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetTop1 }};
//     wxTextAttrDimension& GetTop();
static int LUACALL wxLua_wxTextAttrDimensions_GetTop1(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetTop
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetTop();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetTop[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_GetTop(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetTop[1] = {{ wxLua_wxTextAttrDimensions_GetTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetTop }};
//     const wxTextAttrDimension& GetTop() const;
static int LUACALL wxLua_wxTextAttrDimensions_GetTop(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call GetTop
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetTop();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_bottom[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_bottom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_bottom[1] = {{ wxLua_wxTextAttrDimensions_Get_m_bottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_bottom }};
//     wxTextAttrDimension         m_bottom;
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_bottom(lua_State *L)
{
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_bottom, wxluatype_wxTextAttrDimension);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_left[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_left(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_left[1] = {{ wxLua_wxTextAttrDimensions_Get_m_left, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_left }};
//     wxTextAttrDimension         m_left;
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_left(lua_State *L)
{
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_left, wxluatype_wxTextAttrDimension);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_right[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_right(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_right[1] = {{ wxLua_wxTextAttrDimensions_Get_m_right, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_right }};
//     wxTextAttrDimension         m_right;
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_right(lua_State *L)
{
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_right, wxluatype_wxTextAttrDimension);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_top[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_top(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_top[1] = {{ wxLua_wxTextAttrDimensions_Get_m_top, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Get_m_top }};
//     wxTextAttrDimension         m_top;
static int LUACALL wxLua_wxTextAttrDimensions_Get_m_top(lua_State *L)
{
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_top, wxluatype_wxTextAttrDimension);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_IsValid[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_IsValid[1] = {{ wxLua_wxTextAttrDimensions_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_IsValid }};
//     bool IsValid() const;
static int LUACALL wxLua_wxTextAttrDimensions_IsValid(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_RemoveStyle[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_RemoveStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_RemoveStyle[1] = {{ wxLua_wxTextAttrDimensions_RemoveStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensions_RemoveStyle }};
//     bool RemoveStyle(const wxTextAttrDimensions& attr);
static int LUACALL wxLua_wxTextAttrDimensions_RemoveStyle(lua_State *L)
{
    // const wxTextAttrDimensions attr
    const wxTextAttrDimensions * attr = (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Reset[] = { &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Reset[1] = {{ wxLua_wxTextAttrDimensions_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Reset }};
//     void Reset();
static int LUACALL wxLua_wxTextAttrDimensions_Reset(lua_State *L)
{
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_bottom[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_bottom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_bottom[1] = {{ wxLua_wxTextAttrDimensions_Set_m_bottom, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_bottom }};
//     wxTextAttrDimension         m_bottom;
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_bottom(lua_State *L)
{
    // get the data type value
    wxTextAttrDimension* val = (wxTextAttrDimension*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    self->m_bottom = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_left[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_left(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_left[1] = {{ wxLua_wxTextAttrDimensions_Set_m_left, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_left }};
//     wxTextAttrDimension         m_left;
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_left(lua_State *L)
{
    // get the data type value
    wxTextAttrDimension* val = (wxTextAttrDimension*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    self->m_left = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_right[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_right(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_right[1] = {{ wxLua_wxTextAttrDimensions_Set_m_right, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_right }};
//     wxTextAttrDimension         m_right;
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_right(lua_State *L)
{
    // get the data type value
    wxTextAttrDimension* val = (wxTextAttrDimension*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    self->m_right = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_top[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_top(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_top[1] = {{ wxLua_wxTextAttrDimensions_Set_m_top, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensions_Set_m_top }};
//     wxTextAttrDimension         m_top;
static int LUACALL wxLua_wxTextAttrDimensions_Set_m_top(lua_State *L)
{
    // get the data type value
    wxTextAttrDimension* val = (wxTextAttrDimension*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimensions *self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    self->m_top = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_delete[] = { &wxluatype_wxTextAttrDimensions, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensions_op_eq[] = { &wxluatype_wxTextAttrDimensions, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextAttrDimensions_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_op_eq[1] = {{ wxLua_wxTextAttrDimensions_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensions_op_eq }};
//     bool operator==(const wxTextAttrDimensions& dims) const;
static int LUACALL wxLua_wxTextAttrDimensions_op_eq(lua_State *L)
{
    // const wxTextAttrDimensions dims
    const wxTextAttrDimensions * dims = (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextAttrDimensions * self = (wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensions);
    // call op_eq
    bool returns = ((*self)==(*dims));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxTextAttrDimensions_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_constructor[1] = {{ wxLua_wxTextAttrDimensions_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextAttrDimensions();
static int LUACALL wxLua_wxTextAttrDimensions_constructor(lua_State *L)
{
    // call constructor
    wxTextAttrDimensions* returns = new wxTextAttrDimensions();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrDimensions);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensions);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetBottom_overload[] =
{
    { wxLua_wxTextAttrDimensions_GetBottom1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetBottom1 },
    { wxLua_wxTextAttrDimensions_GetBottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetBottom },
};
static int s_wxluafunc_wxLua_wxTextAttrDimensions_GetBottom_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrDimensions_GetBottom_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetLeft_overload[] =
{
    { wxLua_wxTextAttrDimensions_GetLeft1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetLeft1 },
    { wxLua_wxTextAttrDimensions_GetLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetLeft },
};
static int s_wxluafunc_wxLua_wxTextAttrDimensions_GetLeft_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrDimensions_GetLeft_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetRight_overload[] =
{
    { wxLua_wxTextAttrDimensions_GetRight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetRight1 },
    { wxLua_wxTextAttrDimensions_GetRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetRight },
};
static int s_wxluafunc_wxLua_wxTextAttrDimensions_GetRight_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrDimensions_GetRight_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensions_GetTop_overload[] =
{
    { wxLua_wxTextAttrDimensions_GetTop1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetTop1 },
    { wxLua_wxTextAttrDimensions_GetTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensions_GetTop },
};
static int s_wxluafunc_wxLua_wxTextAttrDimensions_GetTop_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrDimensions_GetTop_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxTextAttrDimensions_delete_function(void** p)
{
    wxTextAttrDimensions* o = (wxTextAttrDimensions*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttrDimensions_methods[] = {
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Apply, 1, NULL },
    { "CollectCommonAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_CollectCommonAttributes, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_EqPartial, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_GetBottom_overload, s_wxluafunc_wxLua_wxTextAttrDimensions_GetBottom_overload_count, 0 },
    { "GetLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_GetLeft_overload, s_wxluafunc_wxLua_wxTextAttrDimensions_GetLeft_overload_count, 0 },
    { "GetRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_GetRight_overload, s_wxluafunc_wxLua_wxTextAttrDimensions_GetRight_overload_count, 0 },
    { "GetTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_GetTop_overload, s_wxluafunc_wxLua_wxTextAttrDimensions_GetTop_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_bottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_bottom, 1, NULL },
    // %member    { "Get_m_left", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_left, 1, NULL },
    // %member    { "Get_m_right", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_right, 1, NULL },
    // %member    { "Get_m_top", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_top, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_IsValid, 1, NULL },
    { "RemoveStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_RemoveStyle, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Reset, 1, NULL },
    // %member    { "Set_m_bottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_bottom, 1, NULL },
    // %member    { "Set_m_left", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_left, 1, NULL },
    // %member    { "Set_m_right", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_right, 1, NULL },
    // %member    { "Set_m_top", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_top, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttrDimensions_delete, 1, NULL },
    { "m_bottom", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_bottom, 1, NULL },
    { "m_bottom", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_bottom, 1, NULL },
    { "m_left", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_left, 1, NULL },
    { "m_left", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_left, 1, NULL },
    { "m_right", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_right, 1, NULL },
    { "m_right", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_right, 1, NULL },
    { "m_top", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Set_m_top, 1, NULL },
    { "m_top", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimensions_Get_m_top, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensions_op_eq, 1, NULL },
    { "wxTextAttrDimensions", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttrDimensions_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextAttrDimensions_methodCount = sizeof(wxTextAttrDimensions_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxTextAttrSize
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttrSize'
int wxluatype_wxTextAttrSize = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_Apply[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_Apply[1] = {{ wxLua_wxTextAttrSize_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_Apply }};
//     bool Apply(const wxTextAttrSize& dims, const wxTextAttrSize* compareWith = NULL);
static int LUACALL wxLua_wxTextAttrSize_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxTextAttrSize compareWith = NULL
    const wxTextAttrSize * compareWith = (argCount >= 3 ? (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrSize) : NULL);
    // const wxTextAttrSize dims
    const wxTextAttrSize * dims = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call Apply
    bool returns = (self->Apply(*dims, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_CollectCommonAttributes[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_CollectCommonAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_CollectCommonAttributes[1] = {{ wxLua_wxTextAttrSize_CollectCommonAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextAttrSize_CollectCommonAttributes }};
//     void CollectCommonAttributes(const wxTextAttrSize& attr, wxTextAttrSize& clashingAttr, wxTextAttrSize& absentAttr);
static int LUACALL wxLua_wxTextAttrSize_CollectCommonAttributes(lua_State *L)
{
    // wxTextAttrSize absentAttr
    wxTextAttrSize * absentAttr = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttrSize);
    // wxTextAttrSize clashingAttr
    wxTextAttrSize * clashingAttr = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrSize);
    // const wxTextAttrSize attr
    const wxTextAttrSize * attr = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call CollectCommonAttributes
    self->CollectCommonAttributes(*attr, *clashingAttr, *absentAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_EqPartial[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttrSize_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_EqPartial[1] = {{ wxLua_wxTextAttrSize_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_EqPartial }};
//     bool EqPartial(const wxTextAttrSize& size, bool weakTest = true) const;
static int LUACALL wxLua_wxTextAttrSize_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTextAttrSize size
    const wxTextAttrSize * size = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call EqPartial
    bool returns = (self->EqPartial(*size, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_GetHeight1[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_GetHeight1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_GetHeight1[1] = {{ wxLua_wxTextAttrSize_GetHeight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetHeight1 }};
//     const wxTextAttrDimension& GetHeight() const;
static int LUACALL wxLua_wxTextAttrSize_GetHeight1(lua_State *L)
{
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call GetHeight
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetHeight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_GetHeight[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_GetHeight(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_GetHeight[1] = {{ wxLua_wxTextAttrSize_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetHeight }};
//     wxTextAttrDimension& GetHeight();
static int LUACALL wxLua_wxTextAttrSize_GetHeight(lua_State *L)
{
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call GetHeight
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetHeight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_GetWidth1[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_GetWidth1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_GetWidth1[1] = {{ wxLua_wxTextAttrSize_GetWidth1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetWidth1 }};
//     const wxTextAttrDimension& GetWidth() const;
static int LUACALL wxLua_wxTextAttrSize_GetWidth1(lua_State *L)
{
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call GetWidth
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetWidth();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_GetWidth[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_GetWidth(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_GetWidth[1] = {{ wxLua_wxTextAttrSize_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetWidth }};
//     wxTextAttrDimension& GetWidth();
static int LUACALL wxLua_wxTextAttrSize_GetWidth(lua_State *L)
{
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call GetWidth
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetWidth();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_Get_m_height[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_Get_m_height(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_Get_m_height[1] = {{ wxLua_wxTextAttrSize_Get_m_height, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_Get_m_height }};
//     wxTextAttrDimension         m_height;
static int LUACALL wxLua_wxTextAttrSize_Get_m_height(lua_State *L)
{
    // get this
    wxTextAttrSize *self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_height, wxluatype_wxTextAttrDimension);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_Get_m_width[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_Get_m_width(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_Get_m_width[1] = {{ wxLua_wxTextAttrSize_Get_m_width, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_Get_m_width }};
//     wxTextAttrDimension         m_width;
static int LUACALL wxLua_wxTextAttrSize_Get_m_width(lua_State *L)
{
    // get this
    wxTextAttrSize *self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_width, wxluatype_wxTextAttrDimension);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_IsValid[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_IsValid[1] = {{ wxLua_wxTextAttrSize_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_IsValid }};
//     bool IsValid() const;
static int LUACALL wxLua_wxTextAttrSize_IsValid(lua_State *L)
{
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_RemoveStyle[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_RemoveStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_RemoveStyle[1] = {{ wxLua_wxTextAttrSize_RemoveStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_RemoveStyle }};
//     bool RemoveStyle(const wxTextAttrSize& attr);
static int LUACALL wxLua_wxTextAttrSize_RemoveStyle(lua_State *L)
{
    // const wxTextAttrSize attr
    const wxTextAttrSize * attr = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_Reset[] = { &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_Reset[1] = {{ wxLua_wxTextAttrSize_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_Reset }};
//     void Reset();
static int LUACALL wxLua_wxTextAttrSize_Reset(lua_State *L)
{
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight2[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrSize_SetHeight2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetHeight2[1] = {{ wxLua_wxTextAttrSize_SetHeight2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight2 }};
//     void SetHeight(const wxTextAttrDimension& dim);
static int LUACALL wxLua_wxTextAttrSize_SetHeight2(lua_State *L)
{
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call SetHeight
    self->SetHeight(*dim);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight1[] = { &wxluatype_wxTextAttrSize, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrSize_SetHeight1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetHeight1[1] = {{ wxLua_wxTextAttrSize_SetHeight1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight1 }};
//     void SetHeight(int value, wxTextAttrUnits units);
static int LUACALL wxLua_wxTextAttrSize_SetHeight1(lua_State *L)
{
    // wxTextAttrUnits units
    wxTextAttrUnits units = (wxTextAttrUnits)wxlua_getenumtype(L, 3);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call SetHeight
    self->SetHeight(value, units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight[] = { &wxluatype_wxTextAttrSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrSize_SetHeight(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetHeight[1] = {{ wxLua_wxTextAttrSize_SetHeight, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight }};
//     void SetHeight(int value, wxTextAttrDimensionFlags flags);
static int LUACALL wxLua_wxTextAttrSize_SetHeight(lua_State *L)
{
    // wxTextAttrDimensionFlags flags
    wxTextAttrDimensionFlags flags = (wxTextAttrDimensionFlags)wxlua_getnumbertype(L, 3);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call SetHeight
    self->SetHeight(value, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth2[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrSize_SetWidth2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetWidth2[1] = {{ wxLua_wxTextAttrSize_SetWidth2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth2 }};
//     void SetWidth(const wxTextAttrDimension& dim);
static int LUACALL wxLua_wxTextAttrSize_SetWidth2(lua_State *L)
{
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call SetWidth
    self->SetWidth(*dim);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth1[] = { &wxluatype_wxTextAttrSize, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrSize_SetWidth1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetWidth1[1] = {{ wxLua_wxTextAttrSize_SetWidth1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth1 }};
//     void SetWidth(int value, wxTextAttrUnits units);
static int LUACALL wxLua_wxTextAttrSize_SetWidth1(lua_State *L)
{
    // wxTextAttrUnits units
    wxTextAttrUnits units = (wxTextAttrUnits)wxlua_getenumtype(L, 3);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call SetWidth
    self->SetWidth(value, units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth[] = { &wxluatype_wxTextAttrSize, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrSize_SetWidth(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetWidth[1] = {{ wxLua_wxTextAttrSize_SetWidth, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth }};
//     void SetWidth(int value, wxTextAttrDimensionFlags flags);
static int LUACALL wxLua_wxTextAttrSize_SetWidth(lua_State *L)
{
    // wxTextAttrDimensionFlags flags
    wxTextAttrDimensionFlags flags = (wxTextAttrDimensionFlags)wxlua_getnumbertype(L, 3);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call SetWidth
    self->SetWidth(value, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_Set_m_height[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrSize_Set_m_height(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_Set_m_height[1] = {{ wxLua_wxTextAttrSize_Set_m_height, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_Set_m_height }};
//     wxTextAttrDimension         m_height;
static int LUACALL wxLua_wxTextAttrSize_Set_m_height(lua_State *L)
{
    // get the data type value
    wxTextAttrDimension* val = (wxTextAttrDimension*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrSize *self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    self->m_height = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_Set_m_width[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrSize_Set_m_width(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_Set_m_width[1] = {{ wxLua_wxTextAttrSize_Set_m_width, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_Set_m_width }};
//     wxTextAttrDimension         m_width;
static int LUACALL wxLua_wxTextAttrSize_Set_m_width(lua_State *L)
{
    // get the data type value
    wxTextAttrDimension* val = (wxTextAttrDimension*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrSize *self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    self->m_width = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_delete[] = { &wxluatype_wxTextAttrSize, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrSize_op_eq[] = { &wxluatype_wxTextAttrSize, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextAttrSize_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_op_eq[1] = {{ wxLua_wxTextAttrSize_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_op_eq }};
//     bool operator==(const wxTextAttrSize& size) const;
static int LUACALL wxLua_wxTextAttrSize_op_eq(lua_State *L)
{
    // const wxTextAttrSize size
    const wxTextAttrSize * size = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextAttrSize * self = (wxTextAttrSize *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrSize);
    // call op_eq
    bool returns = ((*self)==(*size));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxTextAttrSize_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_constructor[1] = {{ wxLua_wxTextAttrSize_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextAttrSize();
static int LUACALL wxLua_wxTextAttrSize_constructor(lua_State *L)
{
    // call constructor
    wxTextAttrSize* returns = new wxTextAttrSize();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrSize);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_GetHeight_overload[] =
{
    { wxLua_wxTextAttrSize_GetHeight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetHeight1 },
    { wxLua_wxTextAttrSize_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetHeight },
};
static int s_wxluafunc_wxLua_wxTextAttrSize_GetHeight_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrSize_GetHeight_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_GetWidth_overload[] =
{
    { wxLua_wxTextAttrSize_GetWidth1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetWidth1 },
    { wxLua_wxTextAttrSize_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrSize_GetWidth },
};
static int s_wxluafunc_wxLua_wxTextAttrSize_GetWidth_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrSize_GetWidth_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetHeight_overload[] =
{
    { wxLua_wxTextAttrSize_SetHeight2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight2 },
    { wxLua_wxTextAttrSize_SetHeight1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight1 },
    { wxLua_wxTextAttrSize_SetHeight, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetHeight },
};
static int s_wxluafunc_wxLua_wxTextAttrSize_SetHeight_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrSize_SetHeight_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrSize_SetWidth_overload[] =
{
    { wxLua_wxTextAttrSize_SetWidth2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth2 },
    { wxLua_wxTextAttrSize_SetWidth1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth1 },
    { wxLua_wxTextAttrSize_SetWidth, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTextAttrSize_SetWidth },
};
static int s_wxluafunc_wxLua_wxTextAttrSize_SetWidth_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrSize_SetWidth_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxTextAttrSize_delete_function(void** p)
{
    wxTextAttrSize* o = (wxTextAttrSize*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttrSize_methods[] = {
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_Apply, 1, NULL },
    { "CollectCommonAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_CollectCommonAttributes, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_EqPartial, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_GetHeight_overload, s_wxluafunc_wxLua_wxTextAttrSize_GetHeight_overload_count, 0 },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_GetWidth_overload, s_wxluafunc_wxLua_wxTextAttrSize_GetWidth_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_height", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_Get_m_height, 1, NULL },
    // %member    { "Get_m_width", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_Get_m_width, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_IsValid, 1, NULL },
    { "RemoveStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_RemoveStyle, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_Reset, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_SetHeight_overload, s_wxluafunc_wxLua_wxTextAttrSize_SetHeight_overload_count, 0 },
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_SetWidth_overload, s_wxluafunc_wxLua_wxTextAttrSize_SetWidth_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Set_m_height", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_Set_m_height, 1, NULL },
    // %member    { "Set_m_width", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_Set_m_width, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttrSize_delete, 1, NULL },
    { "m_height", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrSize_Set_m_height, 1, NULL },
    { "m_height", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrSize_Get_m_height, 1, NULL },
    { "m_width", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrSize_Set_m_width, 1, NULL },
    { "m_width", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrSize_Get_m_width, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrSize_op_eq, 1, NULL },
    { "wxTextAttrSize", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttrSize_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextAttrSize_methodCount = sizeof(wxTextAttrSize_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxTextAttrDimensionConverter
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttrDimensionConverter'
int wxluatype_wxTextAttrDimensionConverter = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_ConvertPixelsToTenthsMM[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_ConvertPixelsToTenthsMM(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_ConvertPixelsToTenthsMM[1] = {{ wxLua_wxTextAttrDimensionConverter_ConvertPixelsToTenthsMM, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_ConvertPixelsToTenthsMM }};
//     int ConvertPixelsToTenthsMM(int pixels) const;
static int LUACALL wxLua_wxTextAttrDimensionConverter_ConvertPixelsToTenthsMM(lua_State *L)
{
    // int pixels
    int pixels = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call ConvertPixelsToTenthsMM
    int returns = (self->ConvertPixelsToTenthsMM(pixels));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_ConvertTenthsMMToPixels[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_ConvertTenthsMMToPixels(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_ConvertTenthsMMToPixels[1] = {{ wxLua_wxTextAttrDimensionConverter_ConvertTenthsMMToPixels, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_ConvertTenthsMMToPixels }};
//     int ConvertTenthsMMToPixels(int units) const;
static int LUACALL wxLua_wxTextAttrDimensionConverter_ConvertTenthsMMToPixels(lua_State *L)
{
    // int units
    int units = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call ConvertTenthsMMToPixels
    int returns = (self->ConvertTenthsMMToPixels(units));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetPPI[] = { &wxluatype_wxTextAttrDimensionConverter, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetPPI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetPPI[1] = {{ wxLua_wxTextAttrDimensionConverter_GetPPI, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetPPI }};
//     int GetPPI() const;
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetPPI(lua_State *L)
{
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call GetPPI
    int returns = (self->GetPPI());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetParentSize[] = { &wxluatype_wxTextAttrDimensionConverter, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetParentSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetParentSize[1] = {{ wxLua_wxTextAttrDimensionConverter_GetParentSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetParentSize }};
//     const wxSize& GetParentSize() const;
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetParentSize(lua_State *L)
{
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call GetParentSize
    const wxSize* returns = (const wxSize*)&self->GetParentSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetPixels[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_wxTextAttrDimension, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetPixels(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetPixels[1] = {{ wxLua_wxTextAttrDimensionConverter_GetPixels, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetPixels }};
//     int GetPixels(const wxTextAttrDimension& dim, int direction = wxHORIZONTAL) const;
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetPixels(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = wxHORIZONTAL
    int direction = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxHORIZONTAL);
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call GetPixels
    int returns = (self->GetPixels(*dim, direction));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetScale[] = { &wxluatype_wxTextAttrDimensionConverter, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetScale[1] = {{ wxLua_wxTextAttrDimensionConverter_GetScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetScale }};
//     double GetScale() const;
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetScale(lua_State *L)
{
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call GetScale
    double returns = (self->GetScale());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetTenthsMM[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetTenthsMM(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetTenthsMM[1] = {{ wxLua_wxTextAttrDimensionConverter_GetTenthsMM, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_GetTenthsMM }};
//     int GetTenthsMM(const wxTextAttrDimension& dim) const;
static int LUACALL wxLua_wxTextAttrDimensionConverter_GetTenthsMM(lua_State *L)
{
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call GetTenthsMM
    int returns = (self->GetTenthsMM(*dim));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Get_m_parentSize[] = { &wxluatype_wxTextAttrDimensionConverter, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_Get_m_parentSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_parentSize[1] = {{ wxLua_wxTextAttrDimensionConverter_Get_m_parentSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Get_m_parentSize }};
//     wxSize  m_parentSize;
static int LUACALL wxLua_wxTextAttrDimensionConverter_Get_m_parentSize(lua_State *L)
{
    // get this
    wxTextAttrDimensionConverter *self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_parentSize, wxluatype_wxSize);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Get_m_ppi[] = { &wxluatype_wxTextAttrDimensionConverter, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_Get_m_ppi(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_ppi[1] = {{ wxLua_wxTextAttrDimensionConverter_Get_m_ppi, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Get_m_ppi }};
//     int     m_ppi;
static int LUACALL wxLua_wxTextAttrDimensionConverter_Get_m_ppi(lua_State *L)
{
    // get this
    wxTextAttrDimensionConverter *self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_ppi) == (double)(self->m_ppi)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_ppi);
} else
#endif
{
    lua_pushnumber(L, self->m_ppi);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Get_m_scale[] = { &wxluatype_wxTextAttrDimensionConverter, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_Get_m_scale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_scale[1] = {{ wxLua_wxTextAttrDimensionConverter_Get_m_scale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Get_m_scale }};
//     double  m_scale;
static int LUACALL wxLua_wxTextAttrDimensionConverter_Get_m_scale(lua_State *L)
{
    // get this
    wxTextAttrDimensionConverter *self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // push the result floating point number
    lua_pushnumber(L, self->m_scale);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_SetPPI[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_SetPPI(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_SetPPI[1] = {{ wxLua_wxTextAttrDimensionConverter_SetPPI, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_SetPPI }};
//     void SetPPI(int ppi);
static int LUACALL wxLua_wxTextAttrDimensionConverter_SetPPI(lua_State *L)
{
    // int ppi
    int ppi = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call SetPPI
    self->SetPPI(ppi);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_SetParentSize[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_SetParentSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_SetParentSize[1] = {{ wxLua_wxTextAttrDimensionConverter_SetParentSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_SetParentSize }};
//     void SetParentSize(const wxSize& parentSize);
static int LUACALL wxLua_wxTextAttrDimensionConverter_SetParentSize(lua_State *L)
{
    // const wxSize parentSize
    const wxSize * parentSize = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call SetParentSize
    self->SetParentSize(*parentSize);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_SetScale[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_SetScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_SetScale[1] = {{ wxLua_wxTextAttrDimensionConverter_SetScale, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_SetScale }};
//     void SetScale(double scale);
static int LUACALL wxLua_wxTextAttrDimensionConverter_SetScale(lua_State *L)
{
    // double scale
    double scale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimensionConverter * self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    // call SetScale
    self->SetScale(scale);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Set_m_parentSize[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_Set_m_parentSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_parentSize[1] = {{ wxLua_wxTextAttrDimensionConverter_Set_m_parentSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Set_m_parentSize }};
//     wxSize  m_parentSize;
static int LUACALL wxLua_wxTextAttrDimensionConverter_Set_m_parentSize(lua_State *L)
{
    // get the data type value
    wxSize* val = (wxSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxTextAttrDimensionConverter *self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    self->m_parentSize = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Set_m_ppi[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_Set_m_ppi(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_ppi[1] = {{ wxLua_wxTextAttrDimensionConverter_Set_m_ppi, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Set_m_ppi }};
//     int     m_ppi;
static int LUACALL wxLua_wxTextAttrDimensionConverter_Set_m_ppi(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimensionConverter *self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    self->m_ppi = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Set_m_scale[] = { &wxluatype_wxTextAttrDimensionConverter, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_Set_m_scale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_scale[1] = {{ wxLua_wxTextAttrDimensionConverter_Set_m_scale, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_Set_m_scale }};
//     double  m_scale;
static int LUACALL wxLua_wxTextAttrDimensionConverter_Set_m_scale(lua_State *L)
{
    // get the number value
    double val = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrDimensionConverter *self = (wxTextAttrDimensionConverter *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimensionConverter);
    self->m_scale = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_delete[] = { &wxluatype_wxTextAttrDimensionConverter, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_delete }};


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_constructor1[1] = {{ wxLua_wxTextAttrDimensionConverter_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_constructor1 }};
//     wxTextAttrDimensionConverter(int ppi, double scale = 1.0, const wxSize& parentSize = wxDefaultSize);
static int LUACALL wxLua_wxTextAttrDimensionConverter_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 3 ? (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize) : &wxDefaultSize);
    // double scale = 1.0
    double scale = (argCount >= 2 ? (double)wxlua_getnumbertype(L, 2) : 1.0);
    // int ppi
    int ppi = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxTextAttrDimensionConverter* returns = new wxTextAttrDimensionConverter(ppi, scale, *parentSize);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrDimensionConverter);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensionConverter);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_constructor[] = { &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxTextAttrDimensionConverter_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_constructor[1] = {{ wxLua_wxTextAttrDimensionConverter_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_constructor }};
//     wxTextAttrDimensionConverter(wxDC& dc, double scale = 1.0, const wxSize& parentSize = wxDefaultSize);
static int LUACALL wxLua_wxTextAttrDimensionConverter_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 3 ? (const wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize) : &wxDefaultSize);
    // double scale = 1.0
    double scale = (argCount >= 2 ? (double)wxlua_getnumbertype(L, 2) : 1.0);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call constructor
    wxTextAttrDimensionConverter* returns = new wxTextAttrDimensionConverter(*dc, scale, *parentSize);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrDimensionConverter);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensionConverter);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)



#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrDimensionConverter_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxTextAttrDimensionConverter_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxTextAttrDimensionConverter_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxTextAttrDimensionConverter_constructor },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxTextAttrDimensionConverter_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrDimensionConverter_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

void wxLua_wxTextAttrDimensionConverter_delete_function(void** p)
{
    wxTextAttrDimensionConverter* o = (wxTextAttrDimensionConverter*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttrDimensionConverter_methods[] = {
    { "ConvertPixelsToTenthsMM", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_ConvertPixelsToTenthsMM, 1, NULL },
    { "ConvertTenthsMMToPixels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_ConvertTenthsMMToPixels, 1, NULL },
    { "GetPPI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetPPI, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetParentSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetParentSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetPixels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetPixels, 1, NULL },
    { "GetScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetScale, 1, NULL },
    { "GetTenthsMM", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_GetTenthsMM, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_parentSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_parentSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_ppi", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_ppi, 1, NULL },
    // %member    { "Get_m_scale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_scale, 1, NULL },
    { "SetPPI", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_SetPPI, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetParentSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_SetParentSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_SetScale, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_parentSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_parentSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Set_m_ppi", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_ppi, 1, NULL },
    // %member    { "Set_m_scale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_scale, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_delete, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_parentSize", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_parentSize, 1, NULL },
    { "m_parentSize", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_parentSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "m_ppi", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_ppi, 1, NULL },
    { "m_ppi", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_ppi, 1, NULL },
    { "m_scale", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Set_m_scale, 1, NULL },
    { "m_scale", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_Get_m_scale, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "wxTextAttrDimensionConverter", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_constructor_overload, s_wxluafunc_wxLua_wxTextAttrDimensionConverter_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { 0, 0, 0, 0 },
};

int wxTextAttrDimensionConverter_methodCount = sizeof(wxTextAttrDimensionConverter_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxTextAttrBorder
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttrBorder'
int wxluatype_wxTextAttrBorder = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_AddFlag[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_AddFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_AddFlag[1] = {{ wxLua_wxTextAttrBorder_AddFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_AddFlag }};
//     void AddFlag(int flag);
static int LUACALL wxLua_wxTextAttrBorder_AddFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call AddFlag
    self->AddFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Apply[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Apply[1] = {{ wxLua_wxTextAttrBorder_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorder_Apply }};
//     bool Apply(const wxTextAttrBorder& border, const wxTextAttrBorder* compareWith = NULL);
static int LUACALL wxLua_wxTextAttrBorder_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxTextAttrBorder compareWith = NULL
    const wxTextAttrBorder * compareWith = (argCount >= 3 ? (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorder) : NULL);
    // const wxTextAttrBorder border
    const wxTextAttrBorder * border = (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorder);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call Apply
    bool returns = (self->Apply(*border, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_CollectCommonAttributes[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_CollectCommonAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_CollectCommonAttributes[1] = {{ wxLua_wxTextAttrBorder_CollectCommonAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextAttrBorder_CollectCommonAttributes }};
//     void CollectCommonAttributes(const wxTextAttrBorder& attr, wxTextAttrBorder& clashingAttr, wxTextAttrBorder& absentAttr);
static int LUACALL wxLua_wxTextAttrBorder_CollectCommonAttributes(lua_State *L)
{
    // wxTextAttrBorder absentAttr
    wxTextAttrBorder * absentAttr = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttrBorder);
    // wxTextAttrBorder clashingAttr
    wxTextAttrBorder * clashingAttr = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorder);
    // const wxTextAttrBorder attr
    const wxTextAttrBorder * attr = (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorder);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call CollectCommonAttributes
    self->CollectCommonAttributes(*attr, *clashingAttr, *absentAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_EqPartial[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttrBorder_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_EqPartial[1] = {{ wxLua_wxTextAttrBorder_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorder_EqPartial }};
//     bool EqPartial(const wxTextAttrBorder& border, bool weakTest = true) const;
static int LUACALL wxLua_wxTextAttrBorder_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTextAttrBorder border
    const wxTextAttrBorder * border = (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorder);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call EqPartial
    bool returns = (self->EqPartial(*border, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_GetColour[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_GetColour[1] = {{ wxLua_wxTextAttrBorder_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetColour }};
//     wxColour GetColour() const;
static int LUACALL wxLua_wxTextAttrBorder_GetColour(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call GetColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_GetColourLong[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_GetColourLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_GetColourLong[1] = {{ wxLua_wxTextAttrBorder_GetColourLong, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetColourLong }};
//     unsigned long GetColourLong() const;
static int LUACALL wxLua_wxTextAttrBorder_GetColourLong(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call GetColourLong
    unsigned long returns = (self->GetColourLong());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_GetFlags[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_GetFlags[1] = {{ wxLua_wxTextAttrBorder_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxTextAttrBorder_GetFlags(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_GetStyle[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_GetStyle[1] = {{ wxLua_wxTextAttrBorder_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetStyle }};
//     int GetStyle() const;
static int LUACALL wxLua_wxTextAttrBorder_GetStyle(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call GetStyle
    int returns = (self->GetStyle());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_GetWidth1[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_GetWidth1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_GetWidth1[1] = {{ wxLua_wxTextAttrBorder_GetWidth1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetWidth1 }};
//     const wxTextAttrDimension& GetWidth() const;
static int LUACALL wxLua_wxTextAttrBorder_GetWidth1(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call GetWidth
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetWidth();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_GetWidth[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_GetWidth(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_GetWidth[1] = {{ wxLua_wxTextAttrBorder_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetWidth }};
//     wxTextAttrDimension& GetWidth();
static int LUACALL wxLua_wxTextAttrBorder_GetWidth(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call GetWidth
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetWidth();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_borderColour[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Get_m_borderColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderColour[1] = {{ wxLua_wxTextAttrBorder_Get_m_borderColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_borderColour }};
//     unsigned long               m_borderColour;
static int LUACALL wxLua_wxTextAttrBorder_Get_m_borderColour(lua_State *L)
{
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_borderColour) == (double)(self->m_borderColour)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_borderColour);
} else
#endif
{
    lua_pushnumber(L, self->m_borderColour);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_borderStyle[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Get_m_borderStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderStyle[1] = {{ wxLua_wxTextAttrBorder_Get_m_borderStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_borderStyle }};
//     int                         m_borderStyle;
static int LUACALL wxLua_wxTextAttrBorder_Get_m_borderStyle(lua_State *L)
{
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_borderStyle) == (double)(self->m_borderStyle)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_borderStyle);
} else
#endif
{
    lua_pushnumber(L, self->m_borderStyle);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_borderWidth[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Get_m_borderWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderWidth[1] = {{ wxLua_wxTextAttrBorder_Get_m_borderWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_borderWidth }};
//     wxTextAttrDimension         m_borderWidth;
static int LUACALL wxLua_wxTextAttrBorder_Get_m_borderWidth(lua_State *L)
{
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_borderWidth, wxluatype_wxTextAttrDimension);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_flags[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Get_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_flags[1] = {{ wxLua_wxTextAttrBorder_Get_m_flags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_Get_m_flags }};
//     int                         m_flags;
static int LUACALL wxLua_wxTextAttrBorder_Get_m_flags(lua_State *L)
{
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_flags) == (double)(self->m_flags)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_flags);
} else
#endif
{
    lua_pushnumber(L, self->m_flags);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_HasColour[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_HasColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_HasColour[1] = {{ wxLua_wxTextAttrBorder_HasColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_HasColour }};
//     bool HasColour() const;
static int LUACALL wxLua_wxTextAttrBorder_HasColour(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call HasColour
    bool returns = (self->HasColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_HasStyle[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_HasStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_HasStyle[1] = {{ wxLua_wxTextAttrBorder_HasStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_HasStyle }};
//     bool HasStyle() const;
static int LUACALL wxLua_wxTextAttrBorder_HasStyle(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call HasStyle
    bool returns = (self->HasStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_HasWidth[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_HasWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_HasWidth[1] = {{ wxLua_wxTextAttrBorder_HasWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_HasWidth }};
//     bool HasWidth() const;
static int LUACALL wxLua_wxTextAttrBorder_HasWidth(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call HasWidth
    bool returns = (self->HasWidth());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_IsDefault[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_IsDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_IsDefault[1] = {{ wxLua_wxTextAttrBorder_IsDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_IsDefault }};
//     bool IsDefault() const;
static int LUACALL wxLua_wxTextAttrBorder_IsDefault(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call IsDefault
    bool returns = (self->IsDefault());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_IsValid[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_IsValid[1] = {{ wxLua_wxTextAttrBorder_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_IsValid }};
//     bool IsValid() const;
static int LUACALL wxLua_wxTextAttrBorder_IsValid(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_MakeValid[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_MakeValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_MakeValid[1] = {{ wxLua_wxTextAttrBorder_MakeValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_MakeValid }};
//     void MakeValid();
static int LUACALL wxLua_wxTextAttrBorder_MakeValid(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call MakeValid
    self->MakeValid();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_RemoveFlag[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_RemoveFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_RemoveFlag[1] = {{ wxLua_wxTextAttrBorder_RemoveFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_RemoveFlag }};
//     void RemoveFlag(int flag);
static int LUACALL wxLua_wxTextAttrBorder_RemoveFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call RemoveFlag
    self->RemoveFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_RemoveStyle[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_RemoveStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_RemoveStyle[1] = {{ wxLua_wxTextAttrBorder_RemoveStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_RemoveStyle }};
//     bool RemoveStyle(const wxTextAttrBorder& attr);
static int LUACALL wxLua_wxTextAttrBorder_RemoveStyle(lua_State *L)
{
    // const wxTextAttrBorder attr
    const wxTextAttrBorder * attr = (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorder);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Reset[] = { &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Reset[1] = {{ wxLua_wxTextAttrBorder_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_Reset }};
//     void Reset();
static int LUACALL wxLua_wxTextAttrBorder_Reset(lua_State *L)
{
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call Reset
    self->Reset();

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_SetColour1[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextAttrBorder_SetColour1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetColour1[1] = {{ wxLua_wxTextAttrBorder_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetColour1 }};
//     void SetColour(const wxColour& colour);
static int LUACALL wxLua_wxTextAttrBorder_SetColour1(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call SetColour
    self->SetColour(*colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_SetColour[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_SetColour(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetColour[1] = {{ wxLua_wxTextAttrBorder_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetColour }};
//     void SetColour(unsigned long colour);
static int LUACALL wxLua_wxTextAttrBorder_SetColour(lua_State *L)
{
    // unsigned long colour
    unsigned long colour = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call SetColour
    self->SetColour(colour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_SetFlags[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetFlags[1] = {{ wxLua_wxTextAttrBorder_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxTextAttrBorder_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_SetStyle[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetStyle[1] = {{ wxLua_wxTextAttrBorder_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetStyle }};
//     void SetStyle(int style);
static int LUACALL wxLua_wxTextAttrBorder_SetStyle(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_SetWidth1[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_SetWidth1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetWidth1[1] = {{ wxLua_wxTextAttrBorder_SetWidth1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetWidth1 }};
//     void SetWidth(int value, wxTextAttrUnits units = wxTEXT_ATTR_UNITS_TENTHS_MM);
static int LUACALL wxLua_wxTextAttrBorder_SetWidth1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTextAttrUnits units = wxTEXT_ATTR_UNITS_TENTHS_MM
    wxTextAttrUnits units = (argCount >= 3 ? (wxTextAttrUnits)wxlua_getenumtype(L, 3) : wxTEXT_ATTR_UNITS_TENTHS_MM);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call SetWidth
    self->SetWidth(value, units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_SetWidth[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrBorder_SetWidth(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetWidth[1] = {{ wxLua_wxTextAttrBorder_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetWidth }};
//     void SetWidth(const wxTextAttrDimension& width);
static int LUACALL wxLua_wxTextAttrBorder_SetWidth(lua_State *L)
{
    // const wxTextAttrDimension width
    const wxTextAttrDimension * width = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call SetWidth
    self->SetWidth(*width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_borderColour[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Set_m_borderColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderColour[1] = {{ wxLua_wxTextAttrBorder_Set_m_borderColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_borderColour }};
//     unsigned long               m_borderColour;
static int LUACALL wxLua_wxTextAttrBorder_Set_m_borderColour(lua_State *L)
{
    // get the number value
    long val = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    self->m_borderColour = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_borderStyle[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Set_m_borderStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderStyle[1] = {{ wxLua_wxTextAttrBorder_Set_m_borderStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_borderStyle }};
//     int                         m_borderStyle;
static int LUACALL wxLua_wxTextAttrBorder_Set_m_borderStyle(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    self->m_borderStyle = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_borderWidth[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Set_m_borderWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderWidth[1] = {{ wxLua_wxTextAttrBorder_Set_m_borderWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_borderWidth }};
//     wxTextAttrDimension         m_borderWidth;
static int LUACALL wxLua_wxTextAttrBorder_Set_m_borderWidth(lua_State *L)
{
    // get the data type value
    wxTextAttrDimension* val = (wxTextAttrDimension*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    self->m_borderWidth = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_flags[] = { &wxluatype_wxTextAttrBorder, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorder_Set_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_flags[1] = {{ wxLua_wxTextAttrBorder_Set_m_flags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_Set_m_flags }};
//     int                         m_flags;
static int LUACALL wxLua_wxTextAttrBorder_Set_m_flags(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorder *self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    self->m_flags = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_delete[] = { &wxluatype_wxTextAttrBorder, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorder_op_eq[] = { &wxluatype_wxTextAttrBorder, &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxTextAttrBorder_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_op_eq[1] = {{ wxLua_wxTextAttrBorder_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_op_eq }};
//     bool operator==(const wxTextAttrBorder& border) const;
static int LUACALL wxLua_wxTextAttrBorder_op_eq(lua_State *L)
{
    // const wxTextAttrBorder border
    const wxTextAttrBorder * border = (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorder);
    // get this
    wxTextAttrBorder * self = (wxTextAttrBorder *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorder);
    // call op_eq
    bool returns = ((*self)==(*border));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxTextAttrBorder_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_constructor[1] = {{ wxLua_wxTextAttrBorder_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextAttrBorder();
static int LUACALL wxLua_wxTextAttrBorder_constructor(lua_State *L)
{
    // call constructor
    wxTextAttrBorder* returns = new wxTextAttrBorder();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrBorder);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_GetWidth_overload[] =
{
    { wxLua_wxTextAttrBorder_GetWidth1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetWidth1 },
    { wxLua_wxTextAttrBorder_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorder_GetWidth },
};
static int s_wxluafunc_wxLua_wxTextAttrBorder_GetWidth_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorder_GetWidth_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetColour_overload[] =
{

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxTextAttrBorder_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetColour1 },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxTextAttrBorder_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetColour },
};
static int s_wxluafunc_wxLua_wxTextAttrBorder_SetColour_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorder_SetColour_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorder_SetWidth_overload[] =
{
    { wxLua_wxTextAttrBorder_SetWidth1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetWidth1 },
    { wxLua_wxTextAttrBorder_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorder_SetWidth },
};
static int s_wxluafunc_wxLua_wxTextAttrBorder_SetWidth_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorder_SetWidth_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxTextAttrBorder_delete_function(void** p)
{
    wxTextAttrBorder* o = (wxTextAttrBorder*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttrBorder_methods[] = {
    { "AddFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_AddFlag, 1, NULL },
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Apply, 1, NULL },
    { "CollectCommonAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_CollectCommonAttributes, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_EqPartial, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_GetColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetColourLong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_GetColourLong, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_GetFlags, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_GetStyle, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_GetWidth_overload, s_wxluafunc_wxLua_wxTextAttrBorder_GetWidth_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_borderColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderColour, 1, NULL },
    // %member    { "Get_m_borderStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderStyle, 1, NULL },
    // %member    { "Get_m_borderWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderWidth, 1, NULL },
    // %member    { "Get_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_flags, 1, NULL },
    { "HasColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_HasColour, 1, NULL },
    { "HasStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_HasStyle, 1, NULL },
    { "HasWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_HasWidth, 1, NULL },
    { "IsDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_IsDefault, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_IsValid, 1, NULL },
    { "MakeValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_MakeValid, 1, NULL },
    { "RemoveFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_RemoveFlag, 1, NULL },
    { "RemoveStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_RemoveStyle, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Reset, 1, NULL },

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_SetColour_overload, s_wxluafunc_wxLua_wxTextAttrBorder_SetColour_overload_count, 0 },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_SetFlags, 1, NULL },
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_SetStyle, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_SetWidth_overload, s_wxluafunc_wxLua_wxTextAttrBorder_SetWidth_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Set_m_borderColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderColour, 1, NULL },
    // %member    { "Set_m_borderStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderStyle, 1, NULL },
    // %member    { "Set_m_borderWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderWidth, 1, NULL },
    // %member    { "Set_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_flags, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttrBorder_delete, 1, NULL },
    { "m_borderColour", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderColour, 1, NULL },
    { "m_borderColour", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderColour, 1, NULL },
    { "m_borderStyle", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderStyle, 1, NULL },
    { "m_borderStyle", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderStyle, 1, NULL },
    { "m_borderWidth", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_borderWidth, 1, NULL },
    { "m_borderWidth", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_borderWidth, 1, NULL },
    { "m_flags", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Set_m_flags, 1, NULL },
    { "m_flags", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextAttrBorder_Get_m_flags, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorder_op_eq, 1, NULL },
    { "wxTextAttrBorder", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttrBorder_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextAttrBorder_methodCount = sizeof(wxTextAttrBorder_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxTextAttrBorders
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextAttrBorders'
int wxluatype_wxTextAttrBorders = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_Apply[] = { &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_Apply[1] = {{ wxLua_wxTextAttrBorders_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorders_Apply }};
//     bool Apply(const wxTextAttrBorders& borders, const wxTextAttrBorders* compareWith = NULL);
static int LUACALL wxLua_wxTextAttrBorders_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxTextAttrBorders compareWith = NULL
    const wxTextAttrBorders * compareWith = (argCount >= 3 ? (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorders) : NULL);
    // const wxTextAttrBorders borders
    const wxTextAttrBorders * borders = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorders);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call Apply
    bool returns = (self->Apply(*borders, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_CollectCommonAttributes[] = { &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_CollectCommonAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_CollectCommonAttributes[1] = {{ wxLua_wxTextAttrBorders_CollectCommonAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextAttrBorders_CollectCommonAttributes }};
//     void CollectCommonAttributes(const wxTextAttrBorders& attr, wxTextAttrBorders& clashingAttr, wxTextAttrBorders& absentAttr);
static int LUACALL wxLua_wxTextAttrBorders_CollectCommonAttributes(lua_State *L)
{
    // wxTextAttrBorders absentAttr
    wxTextAttrBorders * absentAttr = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttrBorders);
    // wxTextAttrBorders clashingAttr
    wxTextAttrBorders * clashingAttr = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorders);
    // const wxTextAttrBorders attr
    const wxTextAttrBorders * attr = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorders);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call CollectCommonAttributes
    self->CollectCommonAttributes(*attr, *clashingAttr, *absentAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_EqPartial[] = { &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextAttrBorders_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_EqPartial[1] = {{ wxLua_wxTextAttrBorders_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorders_EqPartial }};
//     bool EqPartial(const wxTextAttrBorders& borders, bool weakTest = true) const;
static int LUACALL wxLua_wxTextAttrBorders_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTextAttrBorders borders
    const wxTextAttrBorders * borders = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorders);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call EqPartial
    bool returns = (self->EqPartial(*borders, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetBottom1[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetBottom1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetBottom1[1] = {{ wxLua_wxTextAttrBorders_GetBottom1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetBottom1 }};
//     wxTextAttrBorder& GetBottom();
static int LUACALL wxLua_wxTextAttrBorders_GetBottom1(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetBottom
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetBottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetBottom[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetBottom(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetBottom[1] = {{ wxLua_wxTextAttrBorders_GetBottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetBottom }};
//     const wxTextAttrBorder& GetBottom() const;
static int LUACALL wxLua_wxTextAttrBorders_GetBottom(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetBottom
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetBottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetLeft1[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetLeft1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetLeft1[1] = {{ wxLua_wxTextAttrBorders_GetLeft1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetLeft1 }};
//     wxTextAttrBorder& GetLeft();
static int LUACALL wxLua_wxTextAttrBorders_GetLeft1(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetLeft
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetLeft();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetLeft[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetLeft(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetLeft[1] = {{ wxLua_wxTextAttrBorders_GetLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetLeft }};
//     const wxTextAttrBorder& GetLeft() const;
static int LUACALL wxLua_wxTextAttrBorders_GetLeft(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetLeft
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetLeft();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetRight1[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetRight1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetRight1[1] = {{ wxLua_wxTextAttrBorders_GetRight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetRight1 }};
//     wxTextAttrBorder& GetRight();
static int LUACALL wxLua_wxTextAttrBorders_GetRight1(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetRight
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetRight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetRight[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetRight(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetRight[1] = {{ wxLua_wxTextAttrBorders_GetRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetRight }};
//     const wxTextAttrBorder& GetRight() const;
static int LUACALL wxLua_wxTextAttrBorders_GetRight(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetRight
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetRight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetTop1[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetTop1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetTop1[1] = {{ wxLua_wxTextAttrBorders_GetTop1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetTop1 }};
//     wxTextAttrBorder& GetTop();
static int LUACALL wxLua_wxTextAttrBorders_GetTop1(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetTop
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetTop();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_GetTop[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_GetTop(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetTop[1] = {{ wxLua_wxTextAttrBorders_GetTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetTop }};
//     const wxTextAttrBorder& GetTop() const;
static int LUACALL wxLua_wxTextAttrBorders_GetTop(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call GetTop
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetTop();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_IsDefault[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_IsDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_IsDefault[1] = {{ wxLua_wxTextAttrBorders_IsDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_IsDefault }};
//     bool IsDefault() const;
static int LUACALL wxLua_wxTextAttrBorders_IsDefault(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call IsDefault
    bool returns = (self->IsDefault());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_IsValid[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_IsValid[1] = {{ wxLua_wxTextAttrBorders_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_IsValid }};
//     bool IsValid() const;
static int LUACALL wxLua_wxTextAttrBorders_IsValid(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_RemoveStyle[] = { &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_RemoveStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_RemoveStyle[1] = {{ wxLua_wxTextAttrBorders_RemoveStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_RemoveStyle }};
//     bool RemoveStyle(const wxTextAttrBorders& attr);
static int LUACALL wxLua_wxTextAttrBorders_RemoveStyle(lua_State *L)
{
    // const wxTextAttrBorders attr
    const wxTextAttrBorders * attr = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorders);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_Reset[] = { &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_Reset[1] = {{ wxLua_wxTextAttrBorders_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_Reset }};
//     void Reset();
static int LUACALL wxLua_wxTextAttrBorders_Reset(lua_State *L)
{
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call Reset
    self->Reset();

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_SetColour1[] = { &wxluatype_wxTextAttrBorders, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxTextAttrBorders_SetColour1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_SetColour1[1] = {{ wxLua_wxTextAttrBorders_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetColour1 }};
//     void SetColour(const wxColour& colour);
static int LUACALL wxLua_wxTextAttrBorders_SetColour1(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call SetColour
    self->SetColour(*colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_SetColour[] = { &wxluatype_wxTextAttrBorders, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrBorders_SetColour(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_SetColour[1] = {{ wxLua_wxTextAttrBorders_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetColour }};
//     void SetColour(unsigned long colour);
static int LUACALL wxLua_wxTextAttrBorders_SetColour(lua_State *L)
{
    // unsigned long colour
    unsigned long colour = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call SetColour
    self->SetColour(colour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_SetStyle[] = { &wxluatype_wxTextAttrBorders, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextAttrBorders_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_SetStyle[1] = {{ wxLua_wxTextAttrBorders_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetStyle }};
//     void SetStyle(int style);
static int LUACALL wxLua_wxTextAttrBorders_SetStyle(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call SetStyle
    self->SetStyle(style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_SetWidth1[] = { &wxluatype_wxTextAttrBorders, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextAttrBorders_SetWidth1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_SetWidth1[1] = {{ wxLua_wxTextAttrBorders_SetWidth1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetWidth1 }};
//     void SetWidth(int value, wxTextAttrUnits units = wxTEXT_ATTR_UNITS_TENTHS_MM);
static int LUACALL wxLua_wxTextAttrBorders_SetWidth1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxTextAttrUnits units = wxTEXT_ATTR_UNITS_TENTHS_MM
    wxTextAttrUnits units = (argCount >= 3 ? (wxTextAttrUnits)wxlua_getenumtype(L, 3) : wxTEXT_ATTR_UNITS_TENTHS_MM);
    // int value
    int value = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call SetWidth
    self->SetWidth(value, units);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_SetWidth[] = { &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxTextAttrBorders_SetWidth(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_SetWidth[1] = {{ wxLua_wxTextAttrBorders_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetWidth }};
//     void SetWidth(const wxTextAttrDimension& width);
static int LUACALL wxLua_wxTextAttrBorders_SetWidth(lua_State *L)
{
    // const wxTextAttrDimension width
    const wxTextAttrDimension * width = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimension);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call SetWidth
    self->SetWidth(*width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_delete[] = { &wxluatype_wxTextAttrBorders, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextAttrBorders_op_eq[] = { &wxluatype_wxTextAttrBorders, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextAttrBorders_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_op_eq[1] = {{ wxLua_wxTextAttrBorders_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_op_eq }};
//     bool operator==(const wxTextAttrBorders& borders) const;
static int LUACALL wxLua_wxTextAttrBorders_op_eq(lua_State *L)
{
    // const wxTextAttrBorders borders
    const wxTextAttrBorders * borders = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorders);
    // get this
    wxTextAttrBorders * self = (wxTextAttrBorders *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrBorders);
    // call op_eq
    bool returns = ((*self)==(*borders));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxTextAttrBorders_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_constructor[1] = {{ wxLua_wxTextAttrBorders_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextAttrBorders();
static int LUACALL wxLua_wxTextAttrBorders_constructor(lua_State *L)
{
    // call constructor
    wxTextAttrBorders* returns = new wxTextAttrBorders();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrBorders);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorders);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetBottom_overload[] =
{
    { wxLua_wxTextAttrBorders_GetBottom1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetBottom1 },
    { wxLua_wxTextAttrBorders_GetBottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetBottom },
};
static int s_wxluafunc_wxLua_wxTextAttrBorders_GetBottom_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorders_GetBottom_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetLeft_overload[] =
{
    { wxLua_wxTextAttrBorders_GetLeft1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetLeft1 },
    { wxLua_wxTextAttrBorders_GetLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetLeft },
};
static int s_wxluafunc_wxLua_wxTextAttrBorders_GetLeft_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorders_GetLeft_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetRight_overload[] =
{
    { wxLua_wxTextAttrBorders_GetRight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetRight1 },
    { wxLua_wxTextAttrBorders_GetRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetRight },
};
static int s_wxluafunc_wxLua_wxTextAttrBorders_GetRight_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorders_GetRight_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_GetTop_overload[] =
{
    { wxLua_wxTextAttrBorders_GetTop1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetTop1 },
    { wxLua_wxTextAttrBorders_GetTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextAttrBorders_GetTop },
};
static int s_wxluafunc_wxLua_wxTextAttrBorders_GetTop_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorders_GetTop_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_SetColour_overload[] =
{

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxTextAttrBorders_SetColour1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetColour1 },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxTextAttrBorders_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetColour },
};
static int s_wxluafunc_wxLua_wxTextAttrBorders_SetColour_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorders_SetColour_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextAttrBorders_SetWidth_overload[] =
{
    { wxLua_wxTextAttrBorders_SetWidth1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetWidth1 },
    { wxLua_wxTextAttrBorders_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextAttrBorders_SetWidth },
};
static int s_wxluafunc_wxLua_wxTextAttrBorders_SetWidth_overload_count = sizeof(s_wxluafunc_wxLua_wxTextAttrBorders_SetWidth_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxTextAttrBorders_delete_function(void** p)
{
    wxTextAttrBorders* o = (wxTextAttrBorders*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextAttrBorders_methods[] = {
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_Apply, 1, NULL },
    { "CollectCommonAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_CollectCommonAttributes, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_EqPartial, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_GetBottom_overload, s_wxluafunc_wxLua_wxTextAttrBorders_GetBottom_overload_count, 0 },
    { "GetLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_GetLeft_overload, s_wxluafunc_wxLua_wxTextAttrBorders_GetLeft_overload_count, 0 },
    { "GetRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_GetRight_overload, s_wxluafunc_wxLua_wxTextAttrBorders_GetRight_overload_count, 0 },
    { "GetTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_GetTop_overload, s_wxluafunc_wxLua_wxTextAttrBorders_GetTop_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "IsDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_IsDefault, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_IsValid, 1, NULL },
    { "RemoveStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_RemoveStyle, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_Reset, 1, NULL },

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_SetColour_overload, s_wxluafunc_wxLua_wxTextAttrBorders_SetColour_overload_count, 0 },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_SetStyle, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_SetWidth_overload, s_wxluafunc_wxLua_wxTextAttrBorders_SetWidth_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextAttrBorders_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextAttrBorders_op_eq, 1, NULL },
    { "wxTextAttrBorders", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextAttrBorders_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTextAttrBorders_methodCount = sizeof(wxTextAttrBorders_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxTextBoxAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTextBoxAttr'
int wxluatype_wxTextBoxAttr = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_AddFlag[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_AddFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_AddFlag[1] = {{ wxLua_wxTextBoxAttr_AddFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_AddFlag }};
//     void AddFlag(wxTextBoxAttrFlags flag);
static int LUACALL wxLua_wxTextBoxAttr_AddFlag(lua_State *L)
{
    // wxTextBoxAttrFlags flag
    wxTextBoxAttrFlags flag = (wxTextBoxAttrFlags)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call AddFlag
    self->AddFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Apply[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Apply[1] = {{ wxLua_wxTextBoxAttr_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextBoxAttr_Apply }};
//     bool Apply(const wxTextBoxAttr& style, const wxTextBoxAttr* compareWith = NULL);
static int LUACALL wxLua_wxTextBoxAttr_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxTextBoxAttr compareWith = NULL
    const wxTextBoxAttr * compareWith = (argCount >= 3 ? (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextBoxAttr) : NULL);
    // const wxTextBoxAttr style
    const wxTextBoxAttr * style = (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextBoxAttr);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call Apply
    bool returns = (self->Apply(*style, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_CollectCommonAttributes[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_CollectCommonAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_CollectCommonAttributes[1] = {{ wxLua_wxTextBoxAttr_CollectCommonAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxTextBoxAttr_CollectCommonAttributes }};
//     void CollectCommonAttributes(const wxTextBoxAttr& attr, wxTextBoxAttr& clashingAttr, wxTextBoxAttr& absentAttr);
static int LUACALL wxLua_wxTextBoxAttr_CollectCommonAttributes(lua_State *L)
{
    // wxTextBoxAttr absentAttr
    wxTextBoxAttr * absentAttr = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextBoxAttr);
    // wxTextBoxAttr clashingAttr
    wxTextBoxAttr * clashingAttr = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextBoxAttr);
    // const wxTextBoxAttr attr
    const wxTextBoxAttr * attr = (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextBoxAttr);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call CollectCommonAttributes
    self->CollectCommonAttributes(*attr, *clashingAttr, *absentAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_EqPartial[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxTextBoxAttr_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_EqPartial[1] = {{ wxLua_wxTextBoxAttr_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxTextBoxAttr_EqPartial }};
//     bool EqPartial(const wxTextBoxAttr& attr, bool weakTest = true) const;
static int LUACALL wxLua_wxTextBoxAttr_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxTextBoxAttr attr
    const wxTextBoxAttr * attr = (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextBoxAttr);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call EqPartial
    bool returns = (self->EqPartial(*attr, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBorder1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBorder1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBorder1[1] = {{ wxLua_wxTextBoxAttr_GetBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBorder1 }};
//     const wxTextAttrBorders& GetBorder() const;
static int LUACALL wxLua_wxTextBoxAttr_GetBorder1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBorder
    const wxTextAttrBorders* returns = (const wxTextAttrBorders*)&self->GetBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorders);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBorder[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBorder(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBorder[1] = {{ wxLua_wxTextBoxAttr_GetBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBorder }};
//     wxTextAttrBorders& GetBorder();
static int LUACALL wxLua_wxTextBoxAttr_GetBorder(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBorder
    wxTextAttrBorders* returns = (wxTextAttrBorders*)&self->GetBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorders);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottom1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottom1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottom1[1] = {{ wxLua_wxTextBoxAttr_GetBottom1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottom1 }};
//     const wxTextAttrDimension& GetBottom() const;
static int LUACALL wxLua_wxTextBoxAttr_GetBottom1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottom
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetBottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottom[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottom(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottom[1] = {{ wxLua_wxTextBoxAttr_GetBottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottom }};
//     wxTextAttrDimension& GetBottom();
static int LUACALL wxLua_wxTextBoxAttr_GetBottom(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottom
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetBottom();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomBorder1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomBorder1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomBorder1[1] = {{ wxLua_wxTextBoxAttr_GetBottomBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomBorder1 }};
//     const wxTextAttrBorder& GetBottomBorder() const;
static int LUACALL wxLua_wxTextBoxAttr_GetBottomBorder1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomBorder
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetBottomBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomBorder[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomBorder(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomBorder[1] = {{ wxLua_wxTextBoxAttr_GetBottomBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomBorder }};
//     wxTextAttrBorder& GetBottomBorder();
static int LUACALL wxLua_wxTextBoxAttr_GetBottomBorder(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomBorder
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetBottomBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomMargin1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomMargin1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomMargin1[1] = {{ wxLua_wxTextBoxAttr_GetBottomMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomMargin1 }};
//     const wxTextAttrDimension& GetBottomMargin() const;
static int LUACALL wxLua_wxTextBoxAttr_GetBottomMargin1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomMargin
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetBottomMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomMargin[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomMargin(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomMargin[1] = {{ wxLua_wxTextBoxAttr_GetBottomMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomMargin }};
//     wxTextAttrDimension& GetBottomMargin();
static int LUACALL wxLua_wxTextBoxAttr_GetBottomMargin(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomMargin
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetBottomMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomOutline1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomOutline1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomOutline1[1] = {{ wxLua_wxTextBoxAttr_GetBottomOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomOutline1 }};
//     const wxTextAttrBorder& GetBottomOutline() const;
static int LUACALL wxLua_wxTextBoxAttr_GetBottomOutline1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomOutline
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetBottomOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomOutline[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomOutline(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomOutline[1] = {{ wxLua_wxTextBoxAttr_GetBottomOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomOutline }};
//     wxTextAttrBorder& GetBottomOutline();
static int LUACALL wxLua_wxTextBoxAttr_GetBottomOutline(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomOutline
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetBottomOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomPadding1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomPadding1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomPadding1[1] = {{ wxLua_wxTextBoxAttr_GetBottomPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomPadding1 }};
//     const wxTextAttrDimension& GetBottomPadding() const;
static int LUACALL wxLua_wxTextBoxAttr_GetBottomPadding1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomPadding
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetBottomPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomPadding[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBottomPadding(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomPadding[1] = {{ wxLua_wxTextBoxAttr_GetBottomPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomPadding }};
//     wxTextAttrDimension& GetBottomPadding();
static int LUACALL wxLua_wxTextBoxAttr_GetBottomPadding(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBottomPadding
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetBottomPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBoxStyleName[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetBoxStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBoxStyleName[1] = {{ wxLua_wxTextBoxAttr_GetBoxStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBoxStyleName }};
//     const wxString& GetBoxStyleName() const;
static int LUACALL wxLua_wxTextBoxAttr_GetBoxStyleName(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetBoxStyleName
    wxString returns = (self->GetBoxStyleName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetClearMode[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetClearMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetClearMode[1] = {{ wxLua_wxTextBoxAttr_GetClearMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetClearMode }};
//     wxTextBoxAttrClearStyle GetClearMode() const;
static int LUACALL wxLua_wxTextBoxAttr_GetClearMode(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetClearMode
    wxTextBoxAttrClearStyle returns = (self->GetClearMode());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetCollapseBorders[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetCollapseBorders(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetCollapseBorders[1] = {{ wxLua_wxTextBoxAttr_GetCollapseBorders, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetCollapseBorders }};
//     wxTextBoxAttrCollapseMode GetCollapseBorders() const;
static int LUACALL wxLua_wxTextBoxAttr_GetCollapseBorders(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetCollapseBorders
    wxTextBoxAttrCollapseMode returns = (self->GetCollapseBorders());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetFlags[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetFlags[1] = {{ wxLua_wxTextBoxAttr_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxTextBoxAttr_GetFlags(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetFloatMode[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetFloatMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetFloatMode[1] = {{ wxLua_wxTextBoxAttr_GetFloatMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetFloatMode }};
//     wxTextBoxAttrFloatStyle GetFloatMode() const;
static int LUACALL wxLua_wxTextBoxAttr_GetFloatMode(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetFloatMode
    wxTextBoxAttrFloatStyle returns = (self->GetFloatMode());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetHeight1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetHeight1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetHeight1[1] = {{ wxLua_wxTextBoxAttr_GetHeight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetHeight1 }};
//     const wxTextAttrDimension& GetHeight() const;
static int LUACALL wxLua_wxTextBoxAttr_GetHeight1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetHeight
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetHeight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetHeight[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetHeight(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetHeight[1] = {{ wxLua_wxTextBoxAttr_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetHeight }};
//     wxTextAttrDimension& GetHeight();
static int LUACALL wxLua_wxTextBoxAttr_GetHeight(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetHeight
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetHeight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeft1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeft1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeft1[1] = {{ wxLua_wxTextBoxAttr_GetLeft1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeft1 }};
//     const wxTextAttrDimension& GetLeft() const;
static int LUACALL wxLua_wxTextBoxAttr_GetLeft1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeft
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetLeft();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeft[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeft(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeft[1] = {{ wxLua_wxTextBoxAttr_GetLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeft }};
//     wxTextAttrDimension& GetLeft();
static int LUACALL wxLua_wxTextBoxAttr_GetLeft(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeft
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetLeft();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftBorder1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftBorder1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftBorder1[1] = {{ wxLua_wxTextBoxAttr_GetLeftBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftBorder1 }};
//     const wxTextAttrBorder& GetLeftBorder() const;
static int LUACALL wxLua_wxTextBoxAttr_GetLeftBorder1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftBorder
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetLeftBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftBorder[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftBorder(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftBorder[1] = {{ wxLua_wxTextBoxAttr_GetLeftBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftBorder }};
//     wxTextAttrBorder& GetLeftBorder();
static int LUACALL wxLua_wxTextBoxAttr_GetLeftBorder(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftBorder
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetLeftBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftMargin1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftMargin1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftMargin1[1] = {{ wxLua_wxTextBoxAttr_GetLeftMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftMargin1 }};
//     const wxTextAttrDimension& GetLeftMargin() const;
static int LUACALL wxLua_wxTextBoxAttr_GetLeftMargin1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftMargin
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetLeftMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftMargin[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftMargin(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftMargin[1] = {{ wxLua_wxTextBoxAttr_GetLeftMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftMargin }};
//     wxTextAttrDimension& GetLeftMargin();
static int LUACALL wxLua_wxTextBoxAttr_GetLeftMargin(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftMargin
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetLeftMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftOutline1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftOutline1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftOutline1[1] = {{ wxLua_wxTextBoxAttr_GetLeftOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftOutline1 }};
//     const wxTextAttrBorder& GetLeftOutline() const;
static int LUACALL wxLua_wxTextBoxAttr_GetLeftOutline1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftOutline
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetLeftOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftOutline[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftOutline(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftOutline[1] = {{ wxLua_wxTextBoxAttr_GetLeftOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftOutline }};
//     wxTextAttrBorder& GetLeftOutline();
static int LUACALL wxLua_wxTextBoxAttr_GetLeftOutline(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftOutline
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetLeftOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftPadding1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftPadding1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftPadding1[1] = {{ wxLua_wxTextBoxAttr_GetLeftPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftPadding1 }};
//     const wxTextAttrDimension& GetLeftPadding() const;
static int LUACALL wxLua_wxTextBoxAttr_GetLeftPadding1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftPadding
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetLeftPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftPadding[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetLeftPadding(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftPadding[1] = {{ wxLua_wxTextBoxAttr_GetLeftPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftPadding }};
//     wxTextAttrDimension& GetLeftPadding();
static int LUACALL wxLua_wxTextBoxAttr_GetLeftPadding(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetLeftPadding
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetLeftPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMargins1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetMargins1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMargins1[1] = {{ wxLua_wxTextBoxAttr_GetMargins1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMargins1 }};
//     const wxTextAttrDimensions& GetMargins() const;
static int LUACALL wxLua_wxTextBoxAttr_GetMargins1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetMargins
    const wxTextAttrDimensions* returns = (const wxTextAttrDimensions*)&self->GetMargins();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensions);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMargins[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetMargins(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMargins[1] = {{ wxLua_wxTextBoxAttr_GetMargins, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMargins }};
//     wxTextAttrDimensions& GetMargins();
static int LUACALL wxLua_wxTextBoxAttr_GetMargins(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetMargins
    wxTextAttrDimensions* returns = (wxTextAttrDimensions*)&self->GetMargins();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensions);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMaxSize1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetMaxSize1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMaxSize1[1] = {{ wxLua_wxTextBoxAttr_GetMaxSize1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMaxSize1 }};
//     const wxTextAttrSize& GetMaxSize() const;
static int LUACALL wxLua_wxTextBoxAttr_GetMaxSize1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetMaxSize
    const wxTextAttrSize* returns = (const wxTextAttrSize*)&self->GetMaxSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMaxSize[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetMaxSize(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMaxSize[1] = {{ wxLua_wxTextBoxAttr_GetMaxSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMaxSize }};
//     wxTextAttrSize& GetMaxSize();
static int LUACALL wxLua_wxTextBoxAttr_GetMaxSize(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetMaxSize
    wxTextAttrSize* returns = (wxTextAttrSize*)&self->GetMaxSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMinSize1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetMinSize1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMinSize1[1] = {{ wxLua_wxTextBoxAttr_GetMinSize1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMinSize1 }};
//     const wxTextAttrSize& GetMinSize() const;
static int LUACALL wxLua_wxTextBoxAttr_GetMinSize1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetMinSize
    const wxTextAttrSize* returns = (const wxTextAttrSize*)&self->GetMinSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMinSize[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetMinSize(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMinSize[1] = {{ wxLua_wxTextBoxAttr_GetMinSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMinSize }};
//     wxTextAttrSize& GetMinSize();
static int LUACALL wxLua_wxTextBoxAttr_GetMinSize(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetMinSize
    wxTextAttrSize* returns = (wxTextAttrSize*)&self->GetMinSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetOutline1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetOutline1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetOutline1[1] = {{ wxLua_wxTextBoxAttr_GetOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetOutline1 }};
//     const wxTextAttrBorders& GetOutline() const;
static int LUACALL wxLua_wxTextBoxAttr_GetOutline1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetOutline
    const wxTextAttrBorders* returns = (const wxTextAttrBorders*)&self->GetOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorders);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetOutline[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetOutline(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetOutline[1] = {{ wxLua_wxTextBoxAttr_GetOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetOutline }};
//     wxTextAttrBorders& GetOutline();
static int LUACALL wxLua_wxTextBoxAttr_GetOutline(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetOutline
    wxTextAttrBorders* returns = (wxTextAttrBorders*)&self->GetOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorders);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPadding1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetPadding1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetPadding1[1] = {{ wxLua_wxTextBoxAttr_GetPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPadding1 }};
//     const wxTextAttrDimensions& GetPadding() const;
static int LUACALL wxLua_wxTextBoxAttr_GetPadding1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetPadding
    const wxTextAttrDimensions* returns = (const wxTextAttrDimensions*)&self->GetPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensions);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPadding[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetPadding(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetPadding[1] = {{ wxLua_wxTextBoxAttr_GetPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPadding }};
//     wxTextAttrDimensions& GetPadding();
static int LUACALL wxLua_wxTextBoxAttr_GetPadding(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetPadding
    wxTextAttrDimensions* returns = (wxTextAttrDimensions*)&self->GetPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensions);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPosition1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetPosition1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetPosition1[1] = {{ wxLua_wxTextBoxAttr_GetPosition1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPosition1 }};
//     const wxTextAttrDimensions& GetPosition() const;
static int LUACALL wxLua_wxTextBoxAttr_GetPosition1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetPosition
    const wxTextAttrDimensions* returns = (const wxTextAttrDimensions*)&self->GetPosition();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensions);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPosition[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetPosition(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetPosition[1] = {{ wxLua_wxTextBoxAttr_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPosition }};
//     wxTextAttrDimensions& GetPosition();
static int LUACALL wxLua_wxTextBoxAttr_GetPosition(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetPosition
    wxTextAttrDimensions* returns = (wxTextAttrDimensions*)&self->GetPosition();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimensions);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRight1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRight1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRight1[1] = {{ wxLua_wxTextBoxAttr_GetRight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRight1 }};
//     const wxTextAttrDimension& GetRight() const;
static int LUACALL wxLua_wxTextBoxAttr_GetRight1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRight
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetRight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRight[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRight(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRight[1] = {{ wxLua_wxTextBoxAttr_GetRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRight }};
//     wxTextAttrDimension& GetRight();
static int LUACALL wxLua_wxTextBoxAttr_GetRight(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRight
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetRight();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightBorder1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightBorder1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightBorder1[1] = {{ wxLua_wxTextBoxAttr_GetRightBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightBorder1 }};
//     const wxTextAttrBorder& GetRightBorder() const;
static int LUACALL wxLua_wxTextBoxAttr_GetRightBorder1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightBorder
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetRightBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightBorder[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightBorder(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightBorder[1] = {{ wxLua_wxTextBoxAttr_GetRightBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightBorder }};
//     wxTextAttrBorder& GetRightBorder();
static int LUACALL wxLua_wxTextBoxAttr_GetRightBorder(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightBorder
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetRightBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightMargin1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightMargin1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightMargin1[1] = {{ wxLua_wxTextBoxAttr_GetRightMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightMargin1 }};
//     const wxTextAttrDimension& GetRightMargin() const;
static int LUACALL wxLua_wxTextBoxAttr_GetRightMargin1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightMargin
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetRightMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightMargin[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightMargin(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightMargin[1] = {{ wxLua_wxTextBoxAttr_GetRightMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightMargin }};
//     wxTextAttrDimension& GetRightMargin();
static int LUACALL wxLua_wxTextBoxAttr_GetRightMargin(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightMargin
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetRightMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightOutline1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightOutline1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightOutline1[1] = {{ wxLua_wxTextBoxAttr_GetRightOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightOutline1 }};
//     const wxTextAttrBorder& GetRightOutline() const;
static int LUACALL wxLua_wxTextBoxAttr_GetRightOutline1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightOutline
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetRightOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightOutline[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightOutline(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightOutline[1] = {{ wxLua_wxTextBoxAttr_GetRightOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightOutline }};
//     wxTextAttrBorder& GetRightOutline();
static int LUACALL wxLua_wxTextBoxAttr_GetRightOutline(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightOutline
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetRightOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightPadding1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightPadding1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightPadding1[1] = {{ wxLua_wxTextBoxAttr_GetRightPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightPadding1 }};
//     const wxTextAttrDimension& GetRightPadding() const;
static int LUACALL wxLua_wxTextBoxAttr_GetRightPadding1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightPadding
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetRightPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightPadding[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetRightPadding(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightPadding[1] = {{ wxLua_wxTextBoxAttr_GetRightPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightPadding }};
//     wxTextAttrDimension& GetRightPadding();
static int LUACALL wxLua_wxTextBoxAttr_GetRightPadding(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetRightPadding
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetRightPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetSize1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetSize1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetSize1[1] = {{ wxLua_wxTextBoxAttr_GetSize1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetSize1 }};
//     const wxTextAttrSize& GetSize() const;
static int LUACALL wxLua_wxTextBoxAttr_GetSize1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetSize
    const wxTextAttrSize* returns = (const wxTextAttrSize*)&self->GetSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetSize[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetSize(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetSize[1] = {{ wxLua_wxTextBoxAttr_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetSize }};
//     wxTextAttrSize& GetSize();
static int LUACALL wxLua_wxTextBoxAttr_GetSize(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetSize
    wxTextAttrSize* returns = (wxTextAttrSize*)&self->GetSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTop1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTop1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTop1[1] = {{ wxLua_wxTextBoxAttr_GetTop1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTop1 }};
//     const wxTextAttrDimension& GetTop() const;
static int LUACALL wxLua_wxTextBoxAttr_GetTop1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTop
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetTop();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTop[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTop(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTop[1] = {{ wxLua_wxTextBoxAttr_GetTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTop }};
//     wxTextAttrDimension& GetTop();
static int LUACALL wxLua_wxTextBoxAttr_GetTop(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTop
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetTop();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopBorder1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopBorder1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopBorder1[1] = {{ wxLua_wxTextBoxAttr_GetTopBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopBorder1 }};
//     const wxTextAttrBorder& GetTopBorder() const;
static int LUACALL wxLua_wxTextBoxAttr_GetTopBorder1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopBorder
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetTopBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopBorder[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopBorder(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopBorder[1] = {{ wxLua_wxTextBoxAttr_GetTopBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopBorder }};
//     wxTextAttrBorder& GetTopBorder();
static int LUACALL wxLua_wxTextBoxAttr_GetTopBorder(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopBorder
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetTopBorder();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopMargin1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopMargin1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopMargin1[1] = {{ wxLua_wxTextBoxAttr_GetTopMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopMargin1 }};
//     const wxTextAttrDimension& GetTopMargin() const;
static int LUACALL wxLua_wxTextBoxAttr_GetTopMargin1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopMargin
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetTopMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopMargin[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopMargin(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopMargin[1] = {{ wxLua_wxTextBoxAttr_GetTopMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopMargin }};
//     wxTextAttrDimension& GetTopMargin();
static int LUACALL wxLua_wxTextBoxAttr_GetTopMargin(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopMargin
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetTopMargin();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopOutline1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopOutline1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopOutline1[1] = {{ wxLua_wxTextBoxAttr_GetTopOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopOutline1 }};
//     const wxTextAttrBorder& GetTopOutline() const;
static int LUACALL wxLua_wxTextBoxAttr_GetTopOutline1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopOutline
    const wxTextAttrBorder* returns = (const wxTextAttrBorder*)&self->GetTopOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopOutline[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopOutline(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopOutline[1] = {{ wxLua_wxTextBoxAttr_GetTopOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopOutline }};
//     wxTextAttrBorder& GetTopOutline();
static int LUACALL wxLua_wxTextBoxAttr_GetTopOutline(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopOutline
    wxTextAttrBorder* returns = (wxTextAttrBorder*)&self->GetTopOutline();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrBorder);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopPadding1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopPadding1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopPadding1[1] = {{ wxLua_wxTextBoxAttr_GetTopPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopPadding1 }};
//     const wxTextAttrDimension& GetTopPadding() const;
static int LUACALL wxLua_wxTextBoxAttr_GetTopPadding1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopPadding
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetTopPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopPadding[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetTopPadding(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopPadding[1] = {{ wxLua_wxTextBoxAttr_GetTopPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopPadding }};
//     wxTextAttrDimension& GetTopPadding();
static int LUACALL wxLua_wxTextBoxAttr_GetTopPadding(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetTopPadding
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetTopPadding();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetVerticalAlignment[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetVerticalAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetVerticalAlignment[1] = {{ wxLua_wxTextBoxAttr_GetVerticalAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetVerticalAlignment }};
//     wxTextBoxAttrVerticalAlignment GetVerticalAlignment() const;
static int LUACALL wxLua_wxTextBoxAttr_GetVerticalAlignment(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetVerticalAlignment
    wxTextBoxAttrVerticalAlignment returns = (self->GetVerticalAlignment());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetWidth1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetWidth1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetWidth1[1] = {{ wxLua_wxTextBoxAttr_GetWidth1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetWidth1 }};
//     const wxTextAttrDimension& GetWidth() const;
static int LUACALL wxLua_wxTextBoxAttr_GetWidth1(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetWidth
    const wxTextAttrDimension* returns = (const wxTextAttrDimension*)&self->GetWidth();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_GetWidth[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_GetWidth(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetWidth[1] = {{ wxLua_wxTextBoxAttr_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetWidth }};
//     wxTextAttrDimension& GetWidth();
static int LUACALL wxLua_wxTextBoxAttr_GetWidth(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call GetWidth
    wxTextAttrDimension* returns = (wxTextAttrDimension*)&self->GetWidth();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_border[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_border(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_border[1] = {{ wxLua_wxTextBoxAttr_Get_m_border, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_border }};
//     wxTextAttrBorders               m_border;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_border(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_border, wxluatype_wxTextAttrBorders);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_boxStyleName[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_boxStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_boxStyleName[1] = {{ wxLua_wxTextBoxAttr_Get_m_boxStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_boxStyleName }};
//     wxString                        m_boxStyleName;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_boxStyleName(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result string
    wxlua_pushwxString(L, self->m_boxStyleName);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_clearMode[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_clearMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_clearMode[1] = {{ wxLua_wxTextBoxAttr_Get_m_clearMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_clearMode }};
//     wxTextBoxAttrClearStyle         m_clearMode;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_clearMode(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_clearMode) == (double)(self->m_clearMode)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_clearMode);
} else
#endif
{
    lua_pushnumber(L, self->m_clearMode);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_collapseMode[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_collapseMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_collapseMode[1] = {{ wxLua_wxTextBoxAttr_Get_m_collapseMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_collapseMode }};
//     wxTextBoxAttrCollapseMode       m_collapseMode;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_collapseMode(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_collapseMode) == (double)(self->m_collapseMode)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_collapseMode);
} else
#endif
{
    lua_pushnumber(L, self->m_collapseMode);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_flags[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_flags[1] = {{ wxLua_wxTextBoxAttr_Get_m_flags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_flags }};
//     int                             m_flags;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_flags(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_flags) == (double)(self->m_flags)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_flags);
} else
#endif
{
    lua_pushnumber(L, self->m_flags);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_floatMode[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_floatMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_floatMode[1] = {{ wxLua_wxTextBoxAttr_Get_m_floatMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_floatMode }};
//     wxTextBoxAttrFloatStyle         m_floatMode;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_floatMode(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_floatMode) == (double)(self->m_floatMode)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_floatMode);
} else
#endif
{
    lua_pushnumber(L, self->m_floatMode);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_margins[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_margins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_margins[1] = {{ wxLua_wxTextBoxAttr_Get_m_margins, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_margins }};
//     wxTextAttrDimensions            m_margins;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_margins(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_margins, wxluatype_wxTextAttrDimensions);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_maxSize[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_maxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_maxSize[1] = {{ wxLua_wxTextBoxAttr_Get_m_maxSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_maxSize }};
//     wxTextAttrSize                  m_maxSize;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_maxSize(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_maxSize, wxluatype_wxTextAttrSize);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_minSize[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_minSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_minSize[1] = {{ wxLua_wxTextBoxAttr_Get_m_minSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_minSize }};
//     wxTextAttrSize                  m_minSize;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_minSize(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_minSize, wxluatype_wxTextAttrSize);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_outline[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_outline(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_outline[1] = {{ wxLua_wxTextBoxAttr_Get_m_outline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_outline }};
//     wxTextAttrBorders               m_outline;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_outline(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_outline, wxluatype_wxTextAttrBorders);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_padding[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_padding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_padding[1] = {{ wxLua_wxTextBoxAttr_Get_m_padding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_padding }};
//     wxTextAttrDimensions            m_padding;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_padding(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_padding, wxluatype_wxTextAttrDimensions);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_position[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_position(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_position[1] = {{ wxLua_wxTextBoxAttr_Get_m_position, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_position }};
//     wxTextAttrDimensions            m_position;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_position(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_position, wxluatype_wxTextAttrDimensions);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_size[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_size[1] = {{ wxLua_wxTextBoxAttr_Get_m_size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_size }};
//     wxTextAttrSize                  m_size;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_size(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_size, wxluatype_wxTextAttrSize);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_verticalAlignment[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Get_m_verticalAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_verticalAlignment[1] = {{ wxLua_wxTextBoxAttr_Get_m_verticalAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Get_m_verticalAlignment }};
//     wxTextBoxAttrVerticalAlignment  m_verticalAlignment;
static int LUACALL wxLua_wxTextBoxAttr_Get_m_verticalAlignment(lua_State *L)
{
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_verticalAlignment) == (double)(self->m_verticalAlignment)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_verticalAlignment);
} else
#endif
{
    lua_pushnumber(L, self->m_verticalAlignment);
}
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_HasBoxStyleName[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_HasBoxStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_HasBoxStyleName[1] = {{ wxLua_wxTextBoxAttr_HasBoxStyleName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_HasBoxStyleName }};
//     bool HasBoxStyleName() const;
static int LUACALL wxLua_wxTextBoxAttr_HasBoxStyleName(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call HasBoxStyleName
    bool returns = (self->HasBoxStyleName());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_HasClearMode[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_HasClearMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_HasClearMode[1] = {{ wxLua_wxTextBoxAttr_HasClearMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_HasClearMode }};
//     bool HasClearMode() const;
static int LUACALL wxLua_wxTextBoxAttr_HasClearMode(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call HasClearMode
    bool returns = (self->HasClearMode());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_HasCollapseBorders[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_HasCollapseBorders(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_HasCollapseBorders[1] = {{ wxLua_wxTextBoxAttr_HasCollapseBorders, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_HasCollapseBorders }};
//     bool HasCollapseBorders() const;
static int LUACALL wxLua_wxTextBoxAttr_HasCollapseBorders(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call HasCollapseBorders
    bool returns = (self->HasCollapseBorders());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_HasFlag[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_HasFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_HasFlag[1] = {{ wxLua_wxTextBoxAttr_HasFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_HasFlag }};
//     bool HasFlag(wxTextBoxAttrFlags flag) const;
static int LUACALL wxLua_wxTextBoxAttr_HasFlag(lua_State *L)
{
    // wxTextBoxAttrFlags flag
    wxTextBoxAttrFlags flag = (wxTextBoxAttrFlags)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call HasFlag
    bool returns = (self->HasFlag(flag));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_HasFloatMode[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_HasFloatMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_HasFloatMode[1] = {{ wxLua_wxTextBoxAttr_HasFloatMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_HasFloatMode }};
//     bool HasFloatMode() const;
static int LUACALL wxLua_wxTextBoxAttr_HasFloatMode(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call HasFloatMode
    bool returns = (self->HasFloatMode());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_HasVerticalAlignment[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_HasVerticalAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_HasVerticalAlignment[1] = {{ wxLua_wxTextBoxAttr_HasVerticalAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_HasVerticalAlignment }};
//     bool HasVerticalAlignment() const;
static int LUACALL wxLua_wxTextBoxAttr_HasVerticalAlignment(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call HasVerticalAlignment
    bool returns = (self->HasVerticalAlignment());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Init[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Init[1] = {{ wxLua_wxTextBoxAttr_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Init }};
//     void Init();
static int LUACALL wxLua_wxTextBoxAttr_Init(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_IsDefault[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_IsDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_IsDefault[1] = {{ wxLua_wxTextBoxAttr_IsDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_IsDefault }};
//     bool IsDefault() const;
static int LUACALL wxLua_wxTextBoxAttr_IsDefault(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call IsDefault
    bool returns = (self->IsDefault());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_IsFloating[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_IsFloating(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_IsFloating[1] = {{ wxLua_wxTextBoxAttr_IsFloating, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_IsFloating }};
//     bool IsFloating() const;
static int LUACALL wxLua_wxTextBoxAttr_IsFloating(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call IsFloating
    bool returns = (self->IsFloating());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_RemoveFlag[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_RemoveFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_RemoveFlag[1] = {{ wxLua_wxTextBoxAttr_RemoveFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_RemoveFlag }};
//     void RemoveFlag(wxTextBoxAttrFlags flag);
static int LUACALL wxLua_wxTextBoxAttr_RemoveFlag(lua_State *L)
{
    // wxTextBoxAttrFlags flag
    wxTextBoxAttrFlags flag = (wxTextBoxAttrFlags)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call RemoveFlag
    self->RemoveFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_RemoveStyle[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_RemoveStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_RemoveStyle[1] = {{ wxLua_wxTextBoxAttr_RemoveStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_RemoveStyle }};
//     bool RemoveStyle(const wxTextBoxAttr& attr);
static int LUACALL wxLua_wxTextBoxAttr_RemoveStyle(lua_State *L)
{
    // const wxTextBoxAttr attr
    const wxTextBoxAttr * attr = (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextBoxAttr);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Reset[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Reset[1] = {{ wxLua_wxTextBoxAttr_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_Reset }};
//     void Reset();
static int LUACALL wxLua_wxTextBoxAttr_Reset(lua_State *L)
{
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetBoxStyleName[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetBoxStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetBoxStyleName[1] = {{ wxLua_wxTextBoxAttr_SetBoxStyleName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetBoxStyleName }};
//     void SetBoxStyleName(const wxString& name);
static int LUACALL wxLua_wxTextBoxAttr_SetBoxStyleName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetBoxStyleName
    self->SetBoxStyleName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetClearMode[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetClearMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetClearMode[1] = {{ wxLua_wxTextBoxAttr_SetClearMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetClearMode }};
//     void SetClearMode(wxTextBoxAttrClearStyle mode);
static int LUACALL wxLua_wxTextBoxAttr_SetClearMode(lua_State *L)
{
    // wxTextBoxAttrClearStyle mode
    wxTextBoxAttrClearStyle mode = (wxTextBoxAttrClearStyle)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetClearMode
    self->SetClearMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetCollapseBorders[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetCollapseBorders(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetCollapseBorders[1] = {{ wxLua_wxTextBoxAttr_SetCollapseBorders, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetCollapseBorders }};
//     void SetCollapseBorders(wxTextBoxAttrCollapseMode collapse);
static int LUACALL wxLua_wxTextBoxAttr_SetCollapseBorders(lua_State *L)
{
    // wxTextBoxAttrCollapseMode collapse
    wxTextBoxAttrCollapseMode collapse = (wxTextBoxAttrCollapseMode)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetCollapseBorders
    self->SetCollapseBorders(collapse);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetFlags[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetFlags[1] = {{ wxLua_wxTextBoxAttr_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxTextBoxAttr_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetFloatMode[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetFloatMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetFloatMode[1] = {{ wxLua_wxTextBoxAttr_SetFloatMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetFloatMode }};
//     void SetFloatMode(wxTextBoxAttrFloatStyle mode);
static int LUACALL wxLua_wxTextBoxAttr_SetFloatMode(lua_State *L)
{
    // wxTextBoxAttrFloatStyle mode
    wxTextBoxAttrFloatStyle mode = (wxTextBoxAttrFloatStyle)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetFloatMode
    self->SetFloatMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetMaxSize[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetMaxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetMaxSize[1] = {{ wxLua_wxTextBoxAttr_SetMaxSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetMaxSize }};
//     void SetMaxSize(const wxTextAttrSize& sz);
static int LUACALL wxLua_wxTextBoxAttr_SetMaxSize(lua_State *L)
{
    // const wxTextAttrSize sz
    const wxTextAttrSize * sz = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetMaxSize
    self->SetMaxSize(*sz);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetMinSize[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetMinSize[1] = {{ wxLua_wxTextBoxAttr_SetMinSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetMinSize }};
//     void SetMinSize(const wxTextAttrSize& sz);
static int LUACALL wxLua_wxTextBoxAttr_SetMinSize(lua_State *L)
{
    // const wxTextAttrSize sz
    const wxTextAttrSize * sz = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetMinSize
    self->SetMinSize(*sz);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetSize[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetSize[1] = {{ wxLua_wxTextBoxAttr_SetSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetSize }};
//     void SetSize(const wxTextAttrSize& sz);
static int LUACALL wxLua_wxTextBoxAttr_SetSize(lua_State *L)
{
    // const wxTextAttrSize sz
    const wxTextAttrSize * sz = (const wxTextAttrSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetSize
    self->SetSize(*sz);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_SetVerticalAlignment[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_SetVerticalAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_SetVerticalAlignment[1] = {{ wxLua_wxTextBoxAttr_SetVerticalAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_SetVerticalAlignment }};
//     void SetVerticalAlignment(wxTextBoxAttrVerticalAlignment verticalAlignment);
static int LUACALL wxLua_wxTextBoxAttr_SetVerticalAlignment(lua_State *L)
{
    // wxTextBoxAttrVerticalAlignment verticalAlignment
    wxTextBoxAttrVerticalAlignment verticalAlignment = (wxTextBoxAttrVerticalAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call SetVerticalAlignment
    self->SetVerticalAlignment(verticalAlignment);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_border[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_border(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_border[1] = {{ wxLua_wxTextBoxAttr_Set_m_border, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_border }};
//     wxTextAttrBorders               m_border;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_border(lua_State *L)
{
    // get the data type value
    wxTextAttrBorders* val = (wxTextAttrBorders*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorders);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_border = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_boxStyleName[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_boxStyleName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_boxStyleName[1] = {{ wxLua_wxTextBoxAttr_Set_m_boxStyleName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_boxStyleName }};
//     wxString                        m_boxStyleName;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_boxStyleName(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_boxStyleName = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_clearMode[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_clearMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_clearMode[1] = {{ wxLua_wxTextBoxAttr_Set_m_clearMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_clearMode }};
//     wxTextBoxAttrClearStyle         m_clearMode;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_clearMode(lua_State *L)
{
    // get the enum value
    wxTextBoxAttrClearStyle val = (wxTextBoxAttrClearStyle)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_clearMode = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_collapseMode[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_collapseMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_collapseMode[1] = {{ wxLua_wxTextBoxAttr_Set_m_collapseMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_collapseMode }};
//     wxTextBoxAttrCollapseMode       m_collapseMode;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_collapseMode(lua_State *L)
{
    // get the enum value
    wxTextBoxAttrCollapseMode val = (wxTextBoxAttrCollapseMode)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_collapseMode = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_flags[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_flags[1] = {{ wxLua_wxTextBoxAttr_Set_m_flags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_flags }};
//     int                             m_flags;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_flags(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_flags = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_floatMode[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_floatMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_floatMode[1] = {{ wxLua_wxTextBoxAttr_Set_m_floatMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_floatMode }};
//     wxTextBoxAttrFloatStyle         m_floatMode;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_floatMode(lua_State *L)
{
    // get the enum value
    wxTextBoxAttrFloatStyle val = (wxTextBoxAttrFloatStyle)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_floatMode = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_margins[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_margins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_margins[1] = {{ wxLua_wxTextBoxAttr_Set_m_margins, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_margins }};
//     wxTextAttrDimensions            m_margins;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_margins(lua_State *L)
{
    // get the data type value
    wxTextAttrDimensions* val = (wxTextAttrDimensions*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_margins = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_maxSize[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_maxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_maxSize[1] = {{ wxLua_wxTextBoxAttr_Set_m_maxSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_maxSize }};
//     wxTextAttrSize                  m_maxSize;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_maxSize(lua_State *L)
{
    // get the data type value
    wxTextAttrSize* val = (wxTextAttrSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_maxSize = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_minSize[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_minSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_minSize[1] = {{ wxLua_wxTextBoxAttr_Set_m_minSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_minSize }};
//     wxTextAttrSize                  m_minSize;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_minSize(lua_State *L)
{
    // get the data type value
    wxTextAttrSize* val = (wxTextAttrSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_minSize = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_outline[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_outline(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_outline[1] = {{ wxLua_wxTextBoxAttr_Set_m_outline, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_outline }};
//     wxTextAttrBorders               m_outline;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_outline(lua_State *L)
{
    // get the data type value
    wxTextAttrBorders* val = (wxTextAttrBorders*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrBorders);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_outline = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_padding[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_padding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_padding[1] = {{ wxLua_wxTextBoxAttr_Set_m_padding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_padding }};
//     wxTextAttrDimensions            m_padding;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_padding(lua_State *L)
{
    // get the data type value
    wxTextAttrDimensions* val = (wxTextAttrDimensions*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_padding = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_position[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_position(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_position[1] = {{ wxLua_wxTextBoxAttr_Set_m_position, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_position }};
//     wxTextAttrDimensions            m_position;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_position(lua_State *L)
{
    // get the data type value
    wxTextAttrDimensions* val = (wxTextAttrDimensions*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrDimensions);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_position = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_size[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextAttrSize, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_size[1] = {{ wxLua_wxTextBoxAttr_Set_m_size, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_size }};
//     wxTextAttrSize                  m_size;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_size(lua_State *L)
{
    // get the data type value
    wxTextAttrSize* val = (wxTextAttrSize*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttrSize);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_size = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_verticalAlignment[] = { &wxluatype_wxTextBoxAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxTextBoxAttr_Set_m_verticalAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_verticalAlignment[1] = {{ wxLua_wxTextBoxAttr_Set_m_verticalAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_Set_m_verticalAlignment }};
//     wxTextBoxAttrVerticalAlignment  m_verticalAlignment;
static int LUACALL wxLua_wxTextBoxAttr_Set_m_verticalAlignment(lua_State *L)
{
    // get the enum value
    wxTextBoxAttrVerticalAlignment val = (wxTextBoxAttrVerticalAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxTextBoxAttr *self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    self->m_verticalAlignment = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_delete[] = { &wxluatype_wxTextBoxAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_op_eq[] = { &wxluatype_wxTextBoxAttr, &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_op_eq[1] = {{ wxLua_wxTextBoxAttr_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTextBoxAttr_op_eq }};
//     bool operator== (const wxTextBoxAttr& attr) const;
static int LUACALL wxLua_wxTextBoxAttr_op_eq(lua_State *L)
{
    // const wxTextBoxAttr attr
    const wxTextBoxAttr * attr = (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextBoxAttr);
    // get this
    wxTextBoxAttr * self = (wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call op_eq
    bool returns = ((*self)==(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxTextBoxAttr_constructor1[] = { &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxTextBoxAttr_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_constructor1[1] = {{ wxLua_wxTextBoxAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_constructor1 }};
//     wxTextBoxAttr(const wxTextBoxAttr& attr);
static int LUACALL wxLua_wxTextBoxAttr_constructor1(lua_State *L)
{
    // const wxTextBoxAttr attr
    const wxTextBoxAttr * attr = (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextBoxAttr);
    // call constructor
    wxTextBoxAttr* returns = new wxTextBoxAttr(*attr);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextBoxAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextBoxAttr);

    return 1;
}

static int LUACALL wxLua_wxTextBoxAttr_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_constructor[1] = {{ wxLua_wxTextBoxAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTextBoxAttr();
static int LUACALL wxLua_wxTextBoxAttr_constructor(lua_State *L)
{
    // call constructor
    wxTextBoxAttr* returns = new wxTextBoxAttr();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextBoxAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextBoxAttr);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBorder_overload[] =
{
    { wxLua_wxTextBoxAttr_GetBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBorder1 },
    { wxLua_wxTextBoxAttr_GetBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBorder },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetBorder_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetBorder_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottom_overload[] =
{
    { wxLua_wxTextBoxAttr_GetBottom1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottom1 },
    { wxLua_wxTextBoxAttr_GetBottom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottom },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetBottom_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetBottom_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomBorder_overload[] =
{
    { wxLua_wxTextBoxAttr_GetBottomBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomBorder1 },
    { wxLua_wxTextBoxAttr_GetBottomBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomBorder },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomBorder_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomBorder_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomMargin_overload[] =
{
    { wxLua_wxTextBoxAttr_GetBottomMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomMargin1 },
    { wxLua_wxTextBoxAttr_GetBottomMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomMargin },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomMargin_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomMargin_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomOutline_overload[] =
{
    { wxLua_wxTextBoxAttr_GetBottomOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomOutline1 },
    { wxLua_wxTextBoxAttr_GetBottomOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomOutline },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomOutline_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomOutline_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomPadding_overload[] =
{
    { wxLua_wxTextBoxAttr_GetBottomPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomPadding1 },
    { wxLua_wxTextBoxAttr_GetBottomPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetBottomPadding },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomPadding_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomPadding_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetHeight_overload[] =
{
    { wxLua_wxTextBoxAttr_GetHeight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetHeight1 },
    { wxLua_wxTextBoxAttr_GetHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetHeight },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetHeight_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetHeight_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeft_overload[] =
{
    { wxLua_wxTextBoxAttr_GetLeft1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeft1 },
    { wxLua_wxTextBoxAttr_GetLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeft },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetLeft_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetLeft_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftBorder_overload[] =
{
    { wxLua_wxTextBoxAttr_GetLeftBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftBorder1 },
    { wxLua_wxTextBoxAttr_GetLeftBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftBorder },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftBorder_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftBorder_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftMargin_overload[] =
{
    { wxLua_wxTextBoxAttr_GetLeftMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftMargin1 },
    { wxLua_wxTextBoxAttr_GetLeftMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftMargin },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftMargin_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftMargin_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftOutline_overload[] =
{
    { wxLua_wxTextBoxAttr_GetLeftOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftOutline1 },
    { wxLua_wxTextBoxAttr_GetLeftOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftOutline },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftOutline_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftOutline_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftPadding_overload[] =
{
    { wxLua_wxTextBoxAttr_GetLeftPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftPadding1 },
    { wxLua_wxTextBoxAttr_GetLeftPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetLeftPadding },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftPadding_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftPadding_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMargins_overload[] =
{
    { wxLua_wxTextBoxAttr_GetMargins1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMargins1 },
    { wxLua_wxTextBoxAttr_GetMargins, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMargins },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetMargins_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetMargins_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMaxSize_overload[] =
{
    { wxLua_wxTextBoxAttr_GetMaxSize1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMaxSize1 },
    { wxLua_wxTextBoxAttr_GetMaxSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMaxSize },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetMaxSize_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetMaxSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetMinSize_overload[] =
{
    { wxLua_wxTextBoxAttr_GetMinSize1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMinSize1 },
    { wxLua_wxTextBoxAttr_GetMinSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetMinSize },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetMinSize_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetMinSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetOutline_overload[] =
{
    { wxLua_wxTextBoxAttr_GetOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetOutline1 },
    { wxLua_wxTextBoxAttr_GetOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetOutline },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetOutline_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetOutline_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetPadding_overload[] =
{
    { wxLua_wxTextBoxAttr_GetPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPadding1 },
    { wxLua_wxTextBoxAttr_GetPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPadding },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetPadding_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetPadding_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetPosition_overload[] =
{
    { wxLua_wxTextBoxAttr_GetPosition1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPosition1 },
    { wxLua_wxTextBoxAttr_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetPosition },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetPosition_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetPosition_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRight_overload[] =
{
    { wxLua_wxTextBoxAttr_GetRight1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRight1 },
    { wxLua_wxTextBoxAttr_GetRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRight },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetRight_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetRight_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightBorder_overload[] =
{
    { wxLua_wxTextBoxAttr_GetRightBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightBorder1 },
    { wxLua_wxTextBoxAttr_GetRightBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightBorder },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetRightBorder_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetRightBorder_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightMargin_overload[] =
{
    { wxLua_wxTextBoxAttr_GetRightMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightMargin1 },
    { wxLua_wxTextBoxAttr_GetRightMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightMargin },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetRightMargin_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetRightMargin_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightOutline_overload[] =
{
    { wxLua_wxTextBoxAttr_GetRightOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightOutline1 },
    { wxLua_wxTextBoxAttr_GetRightOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightOutline },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetRightOutline_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetRightOutline_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetRightPadding_overload[] =
{
    { wxLua_wxTextBoxAttr_GetRightPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightPadding1 },
    { wxLua_wxTextBoxAttr_GetRightPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetRightPadding },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetRightPadding_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetRightPadding_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetSize_overload[] =
{
    { wxLua_wxTextBoxAttr_GetSize1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetSize1 },
    { wxLua_wxTextBoxAttr_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetSize },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetSize_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTop_overload[] =
{
    { wxLua_wxTextBoxAttr_GetTop1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTop1 },
    { wxLua_wxTextBoxAttr_GetTop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTop },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetTop_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetTop_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopBorder_overload[] =
{
    { wxLua_wxTextBoxAttr_GetTopBorder1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopBorder1 },
    { wxLua_wxTextBoxAttr_GetTopBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopBorder },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetTopBorder_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetTopBorder_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopMargin_overload[] =
{
    { wxLua_wxTextBoxAttr_GetTopMargin1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopMargin1 },
    { wxLua_wxTextBoxAttr_GetTopMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopMargin },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetTopMargin_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetTopMargin_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopOutline_overload[] =
{
    { wxLua_wxTextBoxAttr_GetTopOutline1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopOutline1 },
    { wxLua_wxTextBoxAttr_GetTopOutline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopOutline },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetTopOutline_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetTopOutline_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetTopPadding_overload[] =
{
    { wxLua_wxTextBoxAttr_GetTopPadding1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopPadding1 },
    { wxLua_wxTextBoxAttr_GetTopPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetTopPadding },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetTopPadding_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetTopPadding_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_GetWidth_overload[] =
{
    { wxLua_wxTextBoxAttr_GetWidth1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetWidth1 },
    { wxLua_wxTextBoxAttr_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_GetWidth },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_GetWidth_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_GetWidth_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTextBoxAttr_constructor_overload[] =
{
    { wxLua_wxTextBoxAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxTextBoxAttr_constructor1 },
    { wxLua_wxTextBoxAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxTextBoxAttr_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxTextBoxAttr_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxTextBoxAttr_delete_function(void** p)
{
    wxTextBoxAttr* o = (wxTextBoxAttr*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTextBoxAttr_methods[] = {
    { "AddFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_AddFlag, 1, NULL },
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Apply, 1, NULL },
    { "CollectCommonAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_CollectCommonAttributes, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_EqPartial, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetBorder_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetBorder_overload_count, 0 },
    { "GetBottom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottom_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottom_overload_count, 0 },
    { "GetBottomBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomBorder_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomBorder_overload_count, 0 },
    { "GetBottomMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomMargin_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomMargin_overload_count, 0 },
    { "GetBottomOutline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomOutline_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomOutline_overload_count, 0 },
    { "GetBottomPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomPadding_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetBottomPadding_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetBoxStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetBoxStyleName, 1, NULL },
    { "GetClearMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetClearMode, 1, NULL },
    { "GetCollapseBorders", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetCollapseBorders, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetFlags, 1, NULL },
    { "GetFloatMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetFloatMode, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetHeight_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetHeight_overload_count, 0 },
    { "GetLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeft_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeft_overload_count, 0 },
    { "GetLeftBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftBorder_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftBorder_overload_count, 0 },
    { "GetLeftMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftMargin_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftMargin_overload_count, 0 },
    { "GetLeftOutline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftOutline_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftOutline_overload_count, 0 },
    { "GetLeftPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftPadding_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetLeftPadding_overload_count, 0 },
    { "GetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetMargins_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetMargins_overload_count, 0 },
    { "GetMaxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetMaxSize_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetMaxSize_overload_count, 0 },
    { "GetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetMinSize_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetMinSize_overload_count, 0 },
    { "GetOutline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetOutline_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetOutline_overload_count, 0 },
    { "GetPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetPadding_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetPadding_overload_count, 0 },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetPosition_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetPosition_overload_count, 0 },
    { "GetRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetRight_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetRight_overload_count, 0 },
    { "GetRightBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightBorder_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightBorder_overload_count, 0 },
    { "GetRightMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightMargin_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightMargin_overload_count, 0 },
    { "GetRightOutline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightOutline_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightOutline_overload_count, 0 },
    { "GetRightPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightPadding_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetRightPadding_overload_count, 0 },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetSize_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetSize_overload_count, 0 },
    { "GetTop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetTop_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetTop_overload_count, 0 },
    { "GetTopBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopBorder_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopBorder_overload_count, 0 },
    { "GetTopMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopMargin_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopMargin_overload_count, 0 },
    { "GetTopOutline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopOutline_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopOutline_overload_count, 0 },
    { "GetTopPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopPadding_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetTopPadding_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetVerticalAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetVerticalAlignment, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_GetWidth_overload, s_wxluafunc_wxLua_wxTextBoxAttr_GetWidth_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_border", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_border, 1, NULL },
    // %member    { "Get_m_boxStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_boxStyleName, 1, NULL },
    // %member    { "Get_m_clearMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_clearMode, 1, NULL },
    // %member    { "Get_m_collapseMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_collapseMode, 1, NULL },
    // %member    { "Get_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_flags, 1, NULL },
    // %member    { "Get_m_floatMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_floatMode, 1, NULL },
    // %member    { "Get_m_margins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_margins, 1, NULL },
    // %member    { "Get_m_maxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_maxSize, 1, NULL },
    // %member    { "Get_m_minSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_minSize, 1, NULL },
    // %member    { "Get_m_outline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_outline, 1, NULL },
    // %member    { "Get_m_padding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_padding, 1, NULL },
    // %member    { "Get_m_position", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_position, 1, NULL },
    // %member    { "Get_m_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_size, 1, NULL },
    // %member    { "Get_m_verticalAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_verticalAlignment, 1, NULL },
    { "HasBoxStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_HasBoxStyleName, 1, NULL },
    { "HasClearMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_HasClearMode, 1, NULL },
    { "HasCollapseBorders", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_HasCollapseBorders, 1, NULL },
    { "HasFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_HasFlag, 1, NULL },
    { "HasFloatMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_HasFloatMode, 1, NULL },
    { "HasVerticalAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_HasVerticalAlignment, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Init, 1, NULL },
    { "IsDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_IsDefault, 1, NULL },
    { "IsFloating", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_IsFloating, 1, NULL },
    { "RemoveFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_RemoveFlag, 1, NULL },
    { "RemoveStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_RemoveStyle, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Reset, 1, NULL },
    { "SetBoxStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetBoxStyleName, 1, NULL },
    { "SetClearMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetClearMode, 1, NULL },
    { "SetCollapseBorders", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetCollapseBorders, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetFlags, 1, NULL },
    { "SetFloatMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetFloatMode, 1, NULL },
    { "SetMaxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetMaxSize, 1, NULL },
    { "SetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetMinSize, 1, NULL },
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetSize, 1, NULL },
    { "SetVerticalAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_SetVerticalAlignment, 1, NULL },
    // %member    { "Set_m_border", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_border, 1, NULL },
    // %member    { "Set_m_boxStyleName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_boxStyleName, 1, NULL },
    // %member    { "Set_m_clearMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_clearMode, 1, NULL },
    // %member    { "Set_m_collapseMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_collapseMode, 1, NULL },
    // %member    { "Set_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_flags, 1, NULL },
    // %member    { "Set_m_floatMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_floatMode, 1, NULL },
    // %member    { "Set_m_margins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_margins, 1, NULL },
    // %member    { "Set_m_maxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_maxSize, 1, NULL },
    // %member    { "Set_m_minSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_minSize, 1, NULL },
    // %member    { "Set_m_outline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_outline, 1, NULL },
    // %member    { "Set_m_padding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_padding, 1, NULL },
    // %member    { "Set_m_position", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_position, 1, NULL },
    // %member    { "Set_m_size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_size, 1, NULL },
    // %member    { "Set_m_verticalAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_verticalAlignment, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTextBoxAttr_delete, 1, NULL },
    { "m_border", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_border, 1, NULL },
    { "m_border", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_border, 1, NULL },
    { "m_boxStyleName", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_boxStyleName, 1, NULL },
    { "m_boxStyleName", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_boxStyleName, 1, NULL },
    { "m_clearMode", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_clearMode, 1, NULL },
    { "m_clearMode", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_clearMode, 1, NULL },
    { "m_collapseMode", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_collapseMode, 1, NULL },
    { "m_collapseMode", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_collapseMode, 1, NULL },
    { "m_flags", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_flags, 1, NULL },
    { "m_flags", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_flags, 1, NULL },
    { "m_floatMode", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_floatMode, 1, NULL },
    { "m_floatMode", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_floatMode, 1, NULL },
    { "m_margins", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_margins, 1, NULL },
    { "m_margins", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_margins, 1, NULL },
    { "m_maxSize", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_maxSize, 1, NULL },
    { "m_maxSize", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_maxSize, 1, NULL },
    { "m_minSize", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_minSize, 1, NULL },
    { "m_minSize", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_minSize, 1, NULL },
    { "m_outline", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_outline, 1, NULL },
    { "m_outline", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_outline, 1, NULL },
    { "m_padding", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_padding, 1, NULL },
    { "m_padding", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_padding, 1, NULL },
    { "m_position", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_position, 1, NULL },
    { "m_position", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_position, 1, NULL },
    { "m_size", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_size, 1, NULL },
    { "m_size", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_size, 1, NULL },
    { "m_verticalAlignment", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Set_m_verticalAlignment, 1, NULL },
    { "m_verticalAlignment", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxTextBoxAttr_Get_m_verticalAlignment, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTextBoxAttr_op_eq, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxTextBoxAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTextBoxAttr_constructor_overload, s_wxluafunc_wxLua_wxTextBoxAttr_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxTextBoxAttr_methodCount = sizeof(wxTextBoxAttr_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextAttr'
int wxluatype_wxRichTextAttr = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_Apply[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_Apply(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_Apply[1] = {{ wxLua_wxRichTextAttr_Apply, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextAttr_Apply }};
//     bool Apply(const wxRichTextAttr& style, const wxRichTextAttr* compareWith = NULL);
static int LUACALL wxLua_wxRichTextAttr_Apply(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr compareWith = NULL
    const wxRichTextAttr * compareWith = (argCount >= 3 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call Apply
    bool returns = (self->Apply(*style, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_CollectCommonAttributes[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_CollectCommonAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_CollectCommonAttributes[1] = {{ wxLua_wxRichTextAttr_CollectCommonAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextAttr_CollectCommonAttributes }};
//     void CollectCommonAttributes(const wxRichTextAttr& attr, wxRichTextAttr& clashingAttr, wxRichTextAttr& absentAttr);
static int LUACALL wxLua_wxRichTextAttr_CollectCommonAttributes(lua_State *L)
{
    // wxRichTextAttr absentAttr
    wxRichTextAttr * absentAttr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // wxRichTextAttr clashingAttr
    wxRichTextAttr * clashingAttr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call CollectCommonAttributes
    self->CollectCommonAttributes(*attr, *clashingAttr, *absentAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_Copy[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_Copy[1] = {{ wxLua_wxRichTextAttr_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_Copy }};
//     void Copy(const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextAttr_Copy(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call Copy
    self->Copy(*attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_EqPartial[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextAttr_EqPartial(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_EqPartial[1] = {{ wxLua_wxRichTextAttr_EqPartial, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextAttr_EqPartial }};
//     bool EqPartial(const wxRichTextAttr& attr, bool weakTest = true) const;
static int LUACALL wxLua_wxRichTextAttr_EqPartial(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool weakTest = true
    bool weakTest = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call EqPartial
    bool returns = (self->EqPartial(*attr, weakTest));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_GetTextBoxAttr1[] = { &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_GetTextBoxAttr1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_GetTextBoxAttr1[1] = {{ wxLua_wxRichTextAttr_GetTextBoxAttr1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_GetTextBoxAttr1 }};
//     const wxTextBoxAttr& GetTextBoxAttr() const;
static int LUACALL wxLua_wxRichTextAttr_GetTextBoxAttr1(lua_State *L)
{
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call GetTextBoxAttr
    const wxTextBoxAttr* returns = (const wxTextBoxAttr*)&self->GetTextBoxAttr();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextBoxAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_GetTextBoxAttr[] = { &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_GetTextBoxAttr(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_GetTextBoxAttr[1] = {{ wxLua_wxRichTextAttr_GetTextBoxAttr, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_GetTextBoxAttr }};
//     wxTextBoxAttr& GetTextBoxAttr();
static int LUACALL wxLua_wxRichTextAttr_GetTextBoxAttr(lua_State *L)
{
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call GetTextBoxAttr
    wxTextBoxAttr* returns = (wxTextBoxAttr*)&self->GetTextBoxAttr();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextBoxAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_Get_m_textBoxAttr[] = { &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_Get_m_textBoxAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_Get_m_textBoxAttr[1] = {{ wxLua_wxRichTextAttr_Get_m_textBoxAttr, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_Get_m_textBoxAttr }};
//     wxTextBoxAttr    m_textBoxAttr;
static int LUACALL wxLua_wxRichTextAttr_Get_m_textBoxAttr(lua_State *L)
{
    // get this
    wxRichTextAttr *self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_textBoxAttr, wxluatype_wxTextBoxAttr);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_IsDefault[] = { &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_IsDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_IsDefault[1] = {{ wxLua_wxRichTextAttr_IsDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_IsDefault }};
//     bool IsDefault() const;
static int LUACALL wxLua_wxRichTextAttr_IsDefault(lua_State *L)
{
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call IsDefault
    bool returns = (self->IsDefault());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_RemoveStyle[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_RemoveStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_RemoveStyle[1] = {{ wxLua_wxRichTextAttr_RemoveStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_RemoveStyle }};
//     bool RemoveStyle(const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextAttr_RemoveStyle(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_SetTextBoxAttr[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_SetTextBoxAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_SetTextBoxAttr[1] = {{ wxLua_wxRichTextAttr_SetTextBoxAttr, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_SetTextBoxAttr }};
//     void SetTextBoxAttr(const wxTextBoxAttr& attr);
static int LUACALL wxLua_wxRichTextAttr_SetTextBoxAttr(lua_State *L)
{
    // const wxTextBoxAttr attr
    const wxTextBoxAttr * attr = (const wxTextBoxAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextBoxAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call SetTextBoxAttr
    self->SetTextBoxAttr(*attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_Set_m_textBoxAttr[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxTextBoxAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_Set_m_textBoxAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_Set_m_textBoxAttr[1] = {{ wxLua_wxRichTextAttr_Set_m_textBoxAttr, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_Set_m_textBoxAttr }};
//     wxTextBoxAttr    m_textBoxAttr;
static int LUACALL wxLua_wxRichTextAttr_Set_m_textBoxAttr(lua_State *L)
{
    // get the data type value
    wxTextBoxAttr* val = (wxTextBoxAttr*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextBoxAttr);
    // get this
    wxRichTextAttr *self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    self->m_textBoxAttr = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_delete[] = { &wxluatype_wxRichTextAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_op_eq[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_op_eq[1] = {{ wxLua_wxRichTextAttr_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_op_eq }};
//     bool operator==(const wxRichTextAttr& attr) const;
static int LUACALL wxLua_wxRichTextAttr_op_eq(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call op_eq
    bool returns = ((*self)==(*attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_op_set1[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_op_set1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_op_set1[1] = {{ wxLua_wxRichTextAttr_op_set1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_op_set1 }};
//     void operator=(const wxTextAttr& attr);
static int LUACALL wxLua_wxRichTextAttr_op_set1(lua_State *L)
{
    // const wxTextAttr attr
    const wxTextAttr * attr = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call op_set
    (*self)=(*attr);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_op_set[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_op_set(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_op_set[1] = {{ wxLua_wxRichTextAttr_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_op_set }};
//     void operator=(const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextAttr_op_set(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttr * self = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call op_set
    (*self)=(*attr);

    return 0;
}

static int LUACALL wxLua_wxRichTextAttr_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_constructor2[1] = {{ wxLua_wxRichTextAttr_constructor2, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextAttr();
static int LUACALL wxLua_wxRichTextAttr_constructor2(lua_State *L)
{
    // call constructor
    wxRichTextAttr* returns = new wxRichTextAttr();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_constructor1[] = { &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_constructor1[1] = {{ wxLua_wxRichTextAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_constructor1 }};
//     wxRichTextAttr(const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextAttr_constructor1(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call constructor
    wxRichTextAttr* returns = new wxRichTextAttr(*attr);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttr_constructor[] = { &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttr_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_constructor[1] = {{ wxLua_wxRichTextAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_constructor }};
//     wxRichTextAttr(const wxTextAttr& attr);
static int LUACALL wxLua_wxRichTextAttr_constructor(lua_State *L)
{
    // const wxTextAttr attr
    const wxTextAttr * attr = (const wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call constructor
    wxRichTextAttr* returns = new wxRichTextAttr(*attr);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)



#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_GetTextBoxAttr_overload[] =
{
    { wxLua_wxRichTextAttr_GetTextBoxAttr1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_GetTextBoxAttr1 },
    { wxLua_wxRichTextAttr_GetTextBoxAttr, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_GetTextBoxAttr },
};
static int s_wxluafunc_wxLua_wxRichTextAttr_GetTextBoxAttr_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAttr_GetTextBoxAttr_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_op_set_overload[] =
{

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextAttr_op_set1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_op_set1 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextAttr_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttr_op_set },
};
static int s_wxluafunc_wxLua_wxRichTextAttr_op_set_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAttr_op_set_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttr_constructor_overload[] =
{
    { wxLua_wxRichTextAttr_constructor2, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
    { wxLua_wxRichTextAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_constructor1 },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttr_constructor },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
};
static int s_wxluafunc_wxLua_wxRichTextAttr_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAttr_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

void wxLua_wxRichTextAttr_delete_function(void** p)
{
    wxRichTextAttr* o = (wxRichTextAttr*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextAttr_methods[] = {
    { "Apply", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_Apply, 1, NULL },
    { "CollectCommonAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_CollectCommonAttributes, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_Copy, 1, NULL },
    { "EqPartial", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_EqPartial, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetTextBoxAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_GetTextBoxAttr_overload, s_wxluafunc_wxLua_wxRichTextAttr_GetTextBoxAttr_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_textBoxAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_Get_m_textBoxAttr, 1, NULL },
    { "IsDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_IsDefault, 1, NULL },
    { "RemoveStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_RemoveStyle, 1, NULL },
    { "SetTextBoxAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_SetTextBoxAttr, 1, NULL },
    // %member    { "Set_m_textBoxAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_Set_m_textBoxAttr, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextAttr_delete, 1, NULL },
    { "m_textBoxAttr", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextAttr_Set_m_textBoxAttr, 1, NULL },
    { "m_textBoxAttr", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextAttr_Get_m_textBoxAttr, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_op_eq, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttr_op_set_overload, s_wxluafunc_wxLua_wxRichTextAttr_op_set_overload_count, 0 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
    { "wxRichTextAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextAttr_constructor_overload, s_wxluafunc_wxLua_wxRichTextAttr_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

    { 0, 0, 0, 0 },
};

int wxRichTextAttr_methodCount = sizeof(wxRichTextAttr_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextAttrArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextAttrArray'
int wxluatype_wxRichTextAttrArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_Add[] = { &wxluatype_wxRichTextAttrArray, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_Add[1] = {{ wxLua_wxRichTextAttrArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttrArray_Add }};
//     void Add(const wxRichTextAttr& item);
static int LUACALL wxLua_wxRichTextAttrArray_Add(lua_State *L)
{
    // const wxRichTextAttr item
    const wxRichTextAttr * item = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttrArray * self = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call Add
    self->Add(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_Clear[] = { &wxluatype_wxRichTextAttrArray, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_Clear[1] = {{ wxLua_wxRichTextAttrArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttrArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextAttrArray_Clear(lua_State *L)
{
    // get this
    wxRichTextAttrArray * self = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_GetCount[] = { &wxluatype_wxRichTextAttrArray, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_GetCount[1] = {{ wxLua_wxRichTextAttrArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttrArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxRichTextAttrArray_GetCount(lua_State *L)
{
    // get this
    wxRichTextAttrArray * self = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_Insert[] = { &wxluatype_wxRichTextAttrArray, &wxluatype_wxRichTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_Insert[1] = {{ wxLua_wxRichTextAttrArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextAttrArray_Insert }};
//     void Insert(const wxRichTextAttr& item, int nIndex);
static int LUACALL wxLua_wxRichTextAttrArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxRichTextAttr item
    const wxRichTextAttr * item = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextAttrArray * self = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call Insert
    self->Insert(*item, nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_IsEmpty[] = { &wxluatype_wxRichTextAttrArray, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_IsEmpty[1] = {{ wxLua_wxRichTextAttrArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttrArray_IsEmpty }};
//     bool IsEmpty();
static int LUACALL wxLua_wxRichTextAttrArray_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextAttrArray * self = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_Item[] = { &wxluatype_wxRichTextAttrArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_Item[1] = {{ wxLua_wxRichTextAttrArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttrArray_Item }};
//     wxRichTextAttr Item(size_t nIndex) const;
static int LUACALL wxLua_wxRichTextAttrArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextAttrArray * self = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call Item
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_RemoveAt[] = { &wxluatype_wxRichTextAttrArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_RemoveAt[1] = {{ wxLua_wxRichTextAttrArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAttrArray_RemoveAt }};
//     void RemoveAt(size_t nIndex);
static int LUACALL wxLua_wxRichTextAttrArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextAttrArray * self = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_delete[] = { &wxluatype_wxRichTextAttrArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttrArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAttrArray_constructor1[] = { &wxluatype_wxRichTextAttrArray, NULL };
static int LUACALL wxLua_wxRichTextAttrArray_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_constructor1[1] = {{ wxLua_wxRichTextAttrArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttrArray_constructor1 }};
//     wxRichTextAttrArray(const wxRichTextAttrArray& array);
static int LUACALL wxLua_wxRichTextAttrArray_constructor1(lua_State *L)
{
    // const wxRichTextAttrArray array
    const wxRichTextAttrArray * array = (const wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttrArray);
    // call constructor
    wxRichTextAttrArray* returns = new wxRichTextAttrArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttrArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttrArray);

    return 1;
}

static int LUACALL wxLua_wxRichTextAttrArray_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_constructor[1] = {{ wxLua_wxRichTextAttrArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextAttrArray();
static int LUACALL wxLua_wxRichTextAttrArray_constructor(lua_State *L)
{
    // call constructor
    wxRichTextAttrArray* returns = new wxRichTextAttrArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttrArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttrArray);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAttrArray_constructor_overload[] =
{
    { wxLua_wxRichTextAttrArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAttrArray_constructor1 },
    { wxLua_wxRichTextAttrArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextAttrArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAttrArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextAttrArray_delete_function(void** p)
{
    wxRichTextAttrArray* o = (wxRichTextAttrArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextAttrArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttrArray_Add, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttrArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttrArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttrArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttrArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttrArray_Item, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAttrArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextAttrArray_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextAttrArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextAttrArray_constructor_overload, s_wxluafunc_wxLua_wxRichTextAttrArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextAttrArray_methodCount = sizeof(wxRichTextAttrArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextVariantArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextVariantArray'
int wxluatype_wxRichTextVariantArray = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_Add[] = { &wxluatype_wxRichTextVariantArray, &wxluatype_wxVariant, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_Add[1] = {{ wxLua_wxRichTextVariantArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextVariantArray_Add }};
//     void Add(const wxVariant& item);
static int LUACALL wxLua_wxRichTextVariantArray_Add(lua_State *L)
{
    // const wxVariant item
    const wxVariant * item = (const wxVariant *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVariant);
    // get this
    wxRichTextVariantArray * self = (wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call Add
    self->Add(*item);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_Clear[] = { &wxluatype_wxRichTextVariantArray, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_Clear[1] = {{ wxLua_wxRichTextVariantArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextVariantArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextVariantArray_Clear(lua_State *L)
{
    // get this
    wxRichTextVariantArray * self = (wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_GetCount[] = { &wxluatype_wxRichTextVariantArray, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_GetCount[1] = {{ wxLua_wxRichTextVariantArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextVariantArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxRichTextVariantArray_GetCount(lua_State *L)
{
    // get this
    wxRichTextVariantArray * self = (wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_Insert[] = { &wxluatype_wxRichTextVariantArray, &wxluatype_wxVariant, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_Insert[1] = {{ wxLua_wxRichTextVariantArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextVariantArray_Insert }};
//     void Insert(const wxVariant& item, int nIndex);
static int LUACALL wxLua_wxRichTextVariantArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxVariant item
    const wxVariant * item = (const wxVariant *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVariant);
    // get this
    wxRichTextVariantArray * self = (wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call Insert
    self->Insert(*item, nIndex);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_IsEmpty[] = { &wxluatype_wxRichTextVariantArray, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_IsEmpty[1] = {{ wxLua_wxRichTextVariantArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextVariantArray_IsEmpty }};
//     bool IsEmpty();
static int LUACALL wxLua_wxRichTextVariantArray_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextVariantArray * self = (wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_Item[] = { &wxluatype_wxRichTextVariantArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_Item[1] = {{ wxLua_wxRichTextVariantArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextVariantArray_Item }};
//     wxVariant Item(size_t nIndex) const;
static int LUACALL wxLua_wxRichTextVariantArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextVariantArray * self = (wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call Item
    // allocate a new object using the copy constructor
    wxVariant* returns = new wxVariant(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVariant);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVariant);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_RemoveAt[] = { &wxluatype_wxRichTextVariantArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_RemoveAt[1] = {{ wxLua_wxRichTextVariantArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextVariantArray_RemoveAt }};
//     void RemoveAt(size_t nIndex);
static int LUACALL wxLua_wxRichTextVariantArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextVariantArray * self = (wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_delete[] = { &wxluatype_wxRichTextVariantArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextVariantArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextVariantArray_constructor1[] = { &wxluatype_wxRichTextVariantArray, NULL };
static int LUACALL wxLua_wxRichTextVariantArray_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_constructor1[1] = {{ wxLua_wxRichTextVariantArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextVariantArray_constructor1 }};
//     wxRichTextVariantArray(const wxRichTextVariantArray& array);
static int LUACALL wxLua_wxRichTextVariantArray_constructor1(lua_State *L)
{
    // const wxRichTextVariantArray array
    const wxRichTextVariantArray * array = (const wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextVariantArray);
    // call constructor
    wxRichTextVariantArray* returns = new wxRichTextVariantArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextVariantArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextVariantArray);

    return 1;
}

static int LUACALL wxLua_wxRichTextVariantArray_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_constructor[1] = {{ wxLua_wxRichTextVariantArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextVariantArray();
static int LUACALL wxLua_wxRichTextVariantArray_constructor(lua_State *L)
{
    // call constructor
    wxRichTextVariantArray* returns = new wxRichTextVariantArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextVariantArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextVariantArray);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextVariantArray_constructor_overload[] =
{
    { wxLua_wxRichTextVariantArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextVariantArray_constructor1 },
    { wxLua_wxRichTextVariantArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextVariantArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextVariantArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextVariantArray_delete_function(void** p)
{
    wxRichTextVariantArray* o = (wxRichTextVariantArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextVariantArray_methods[] = {
#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextVariantArray_Add, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextVariantArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextVariantArray_GetCount, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextVariantArray_Insert, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextVariantArray_IsEmpty, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextVariantArray_Item, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextVariantArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextVariantArray_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextVariantArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextVariantArray_constructor_overload, s_wxluafunc_wxLua_wxRichTextVariantArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextVariantArray_methodCount = sizeof(wxRichTextVariantArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextRectArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextRectArray'
int wxluatype_wxRichTextRectArray = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_Add[] = { &wxluatype_wxRichTextRectArray, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextRectArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_Add[1] = {{ wxLua_wxRichTextRectArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRectArray_Add }};
//     void Add(const wxRect& item);
static int LUACALL wxLua_wxRichTextRectArray_Add(lua_State *L)
{
    // const wxRect item
    const wxRect * item = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRichTextRectArray * self = (wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call Add
    self->Add(*item);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_Clear[] = { &wxluatype_wxRichTextRectArray, NULL };
static int LUACALL wxLua_wxRichTextRectArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_Clear[1] = {{ wxLua_wxRichTextRectArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRectArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextRectArray_Clear(lua_State *L)
{
    // get this
    wxRichTextRectArray * self = (wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_GetCount[] = { &wxluatype_wxRichTextRectArray, NULL };
static int LUACALL wxLua_wxRichTextRectArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_GetCount[1] = {{ wxLua_wxRichTextRectArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRectArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxRichTextRectArray_GetCount(lua_State *L)
{
    // get this
    wxRichTextRectArray * self = (wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_Insert[] = { &wxluatype_wxRichTextRectArray, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextRectArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_Insert[1] = {{ wxLua_wxRichTextRectArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextRectArray_Insert }};
//     void Insert(const wxRect& item, int nIndex);
static int LUACALL wxLua_wxRichTextRectArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxRect item
    const wxRect * item = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRichTextRectArray * self = (wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call Insert
    self->Insert(*item, nIndex);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_IsEmpty[] = { &wxluatype_wxRichTextRectArray, NULL };
static int LUACALL wxLua_wxRichTextRectArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_IsEmpty[1] = {{ wxLua_wxRichTextRectArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRectArray_IsEmpty }};
//     bool IsEmpty();
static int LUACALL wxLua_wxRichTextRectArray_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextRectArray * self = (wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_Item[] = { &wxluatype_wxRichTextRectArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextRectArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_Item[1] = {{ wxLua_wxRichTextRectArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRectArray_Item }};
//     wxRect Item(size_t nIndex) const;
static int LUACALL wxLua_wxRichTextRectArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextRectArray * self = (wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call Item
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_RemoveAt[] = { &wxluatype_wxRichTextRectArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextRectArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_RemoveAt[1] = {{ wxLua_wxRichTextRectArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRectArray_RemoveAt }};
//     void RemoveAt(size_t nIndex);
static int LUACALL wxLua_wxRichTextRectArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextRectArray * self = (wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_delete[] = { &wxluatype_wxRichTextRectArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRectArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRectArray_constructor1[] = { &wxluatype_wxRichTextRectArray, NULL };
static int LUACALL wxLua_wxRichTextRectArray_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_constructor1[1] = {{ wxLua_wxRichTextRectArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRectArray_constructor1 }};
//     wxRichTextRectArray(const wxRichTextRectArray& array);
static int LUACALL wxLua_wxRichTextRectArray_constructor1(lua_State *L)
{
    // const wxRichTextRectArray array
    const wxRichTextRectArray * array = (const wxRichTextRectArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRectArray);
    // call constructor
    wxRichTextRectArray* returns = new wxRichTextRectArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRectArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRectArray);

    return 1;
}

static int LUACALL wxLua_wxRichTextRectArray_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_constructor[1] = {{ wxLua_wxRichTextRectArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextRectArray();
static int LUACALL wxLua_wxRichTextRectArray_constructor(lua_State *L)
{
    // call constructor
    wxRichTextRectArray* returns = new wxRichTextRectArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRectArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRectArray);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRectArray_constructor_overload[] =
{
    { wxLua_wxRichTextRectArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRectArray_constructor1 },
    { wxLua_wxRichTextRectArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextRectArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextRectArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextRectArray_delete_function(void** p)
{
    wxRichTextRectArray* o = (wxRichTextRectArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextRectArray_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRectArray_Add, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRectArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRectArray_GetCount, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRectArray_Insert, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRectArray_IsEmpty, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRectArray_Item, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRectArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextRectArray_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextRectArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextRectArray_constructor_overload, s_wxluafunc_wxLua_wxRichTextRectArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextRectArray_methodCount = sizeof(wxRichTextRectArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextProperties
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextProperties'
int wxluatype_wxRichTextProperties = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_Clear[] = { &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_Clear[1] = {{ wxLua_wxRichTextProperties_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextProperties_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextProperties_Clear(lua_State *L)
{
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_Copy[] = { &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_Copy[1] = {{ wxLua_wxRichTextProperties_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_Copy }};
//     void Copy(const wxRichTextProperties& props);
static int LUACALL wxLua_wxRichTextProperties_Copy(lua_State *L)
{
    // const wxRichTextProperties props
    const wxRichTextProperties * props = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call Copy
    self->Copy(*props);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_Find[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_Find(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_Find[1] = {{ wxLua_wxRichTextProperties_Find, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_Find }};
//     int Find(const wxString& name) const;
static int LUACALL wxLua_wxRichTextProperties_Find(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call Find
    int returns = (self->Find(name));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_FindOrCreateProperty[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_FindOrCreateProperty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_FindOrCreateProperty[1] = {{ wxLua_wxRichTextProperties_FindOrCreateProperty, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_FindOrCreateProperty }};
//     wxVariant* FindOrCreateProperty(const wxString& name);
static int LUACALL wxLua_wxRichTextProperties_FindOrCreateProperty(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call FindOrCreateProperty
    wxVariant* returns = (wxVariant*)self->FindOrCreateProperty(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVariant);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetCount[] = { &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetCount[1] = {{ wxLua_wxRichTextProperties_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextProperties_GetCount }};
//     size_t GetCount() const;
static int LUACALL wxLua_wxRichTextProperties_GetCount(lua_State *L)
{
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetCount
    size_t returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetProperties[] = { &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetProperties[1] = {{ wxLua_wxRichTextProperties_GetProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextProperties_GetProperties }};
//     wxRichTextVariantArray& GetProperties();
static int LUACALL wxLua_wxRichTextProperties_GetProperties(lua_State *L)
{
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetProperties
    wxRichTextVariantArray* returns = (wxRichTextVariantArray*)&self->GetProperties();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextVariantArray);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetProperty[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetProperty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetProperty[1] = {{ wxLua_wxRichTextProperties_GetProperty, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_GetProperty }};
//     const wxVariant& GetProperty(const wxString& name) const;
static int LUACALL wxLua_wxRichTextProperties_GetProperty(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetProperty
    const wxVariant* returns = (const wxVariant*)&self->GetProperty(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVariant);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyBool[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetPropertyBool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyBool[1] = {{ wxLua_wxRichTextProperties_GetPropertyBool, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyBool }};
//     bool GetPropertyBool(const wxString& name) const;
static int LUACALL wxLua_wxRichTextProperties_GetPropertyBool(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetPropertyBool
    bool returns = (self->GetPropertyBool(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyDouble[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetPropertyDouble(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyDouble[1] = {{ wxLua_wxRichTextProperties_GetPropertyDouble, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyDouble }};
//     double GetPropertyDouble(const wxString& name) const;
static int LUACALL wxLua_wxRichTextProperties_GetPropertyDouble(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetPropertyDouble
    double returns = (self->GetPropertyDouble(name));
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyLong[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetPropertyLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyLong[1] = {{ wxLua_wxRichTextProperties_GetPropertyLong, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyLong }};
//     long GetPropertyLong(const wxString& name) const;
static int LUACALL wxLua_wxRichTextProperties_GetPropertyLong(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetPropertyLong
    long returns = (self->GetPropertyLong(name));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyNames[] = { &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetPropertyNames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyNames[1] = {{ wxLua_wxRichTextProperties_GetPropertyNames, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyNames }};
//     wxArrayString GetPropertyNames() const;
static int LUACALL wxLua_wxRichTextProperties_GetPropertyNames(lua_State *L)
{
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetPropertyNames
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(self->GetPropertyNames());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxArrayString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyString[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_GetPropertyString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyString[1] = {{ wxLua_wxRichTextProperties_GetPropertyString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_GetPropertyString }};
//     wxString GetPropertyString(const wxString& name) const;
static int LUACALL wxLua_wxRichTextProperties_GetPropertyString(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call GetPropertyString
    wxString returns = (self->GetPropertyString(name));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_HasProperty[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_HasProperty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_HasProperty[1] = {{ wxLua_wxRichTextProperties_HasProperty, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_HasProperty }};
//     bool HasProperty(const wxString& name) const;
static int LUACALL wxLua_wxRichTextProperties_HasProperty(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call HasProperty
    bool returns = (self->HasProperty(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_MergeProperties[] = { &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_MergeProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_MergeProperties[1] = {{ wxLua_wxRichTextProperties_MergeProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_MergeProperties }};
//     void MergeProperties(const wxRichTextProperties& properties);
static int LUACALL wxLua_wxRichTextProperties_MergeProperties(lua_State *L)
{
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call MergeProperties
    self->MergeProperties(*properties);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_Remove[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_Remove[1] = {{ wxLua_wxRichTextProperties_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_Remove }};
//     bool Remove(const wxString& name);
static int LUACALL wxLua_wxRichTextProperties_Remove(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call Remove
    bool returns = (self->Remove(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_RemoveProperties[] = { &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_RemoveProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_RemoveProperties[1] = {{ wxLua_wxRichTextProperties_RemoveProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_RemoveProperties }};
//     void RemoveProperties(const wxRichTextProperties& properties);
static int LUACALL wxLua_wxRichTextProperties_RemoveProperties(lua_State *L)
{
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call RemoveProperties
    self->RemoveProperties(*properties);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperties[] = { &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextVariantArray, NULL };
static int LUACALL wxLua_wxRichTextProperties_SetProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperties[1] = {{ wxLua_wxRichTextProperties_SetProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperties }};
//     void SetProperties(const wxRichTextVariantArray& props);
static int LUACALL wxLua_wxRichTextProperties_SetProperties(lua_State *L)
{
    // const wxRichTextVariantArray props
    const wxRichTextVariantArray * props = (const wxRichTextVariantArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextVariantArray);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call SetProperties
    self->SetProperties(*props);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty5[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextProperties_SetProperty5(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperty5[1] = {{ wxLua_wxRichTextProperties_SetProperty5, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty5 }};
//     void SetProperty(const wxString& name, bool value);
static int LUACALL wxLua_wxRichTextProperties_SetProperty5(lua_State *L)
{
    // bool value
    bool value = wxlua_getbooleantype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call SetProperty
    self->SetProperty(name, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty4[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextProperties_SetProperty4(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperty4[1] = {{ wxLua_wxRichTextProperties_SetProperty4, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty4 }};
//     void SetProperty(const wxString& name, double value);
static int LUACALL wxLua_wxRichTextProperties_SetProperty4(lua_State *L)
{
    // double value
    double value = (double)wxlua_getnumbertype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call SetProperty
    self->SetProperty(name, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty3[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextProperties_SetProperty3(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperty3[1] = {{ wxLua_wxRichTextProperties_SetProperty3, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty3 }};
//     void SetProperty(const wxString& name, long value);
static int LUACALL wxLua_wxRichTextProperties_SetProperty3(lua_State *L)
{
    // long value
    long value = (long)wxlua_getnumbertype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call SetProperty
    self->SetProperty(name, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty2[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextProperties_SetProperty2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperty2[1] = {{ wxLua_wxRichTextProperties_SetProperty2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty2 }};
//     void SetProperty(const wxString& name, const wxString& value);
static int LUACALL wxLua_wxRichTextProperties_SetProperty2(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call SetProperty
    self->SetProperty(name, value);

    return 0;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty1[] = { &wxluatype_wxRichTextProperties, &wxluatype_TSTRING, &wxluatype_wxVariant, NULL };
static int LUACALL wxLua_wxRichTextProperties_SetProperty1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperty1[1] = {{ wxLua_wxRichTextProperties_SetProperty1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty1 }};
//     void SetProperty(const wxString& name, const wxVariant& variant);
static int LUACALL wxLua_wxRichTextProperties_SetProperty1(lua_State *L)
{
    // const wxVariant variant
    const wxVariant * variant = (const wxVariant *)wxluaT_getuserdatatype(L, 3, wxluatype_wxVariant);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call SetProperty
    self->SetProperty(name, *variant);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty[] = { &wxluatype_wxRichTextProperties, &wxluatype_wxVariant, NULL };
static int LUACALL wxLua_wxRichTextProperties_SetProperty(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperty[1] = {{ wxLua_wxRichTextProperties_SetProperty, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty }};
//     void SetProperty(const wxVariant& variant);
static int LUACALL wxLua_wxRichTextProperties_SetProperty(lua_State *L)
{
    // const wxVariant variant
    const wxVariant * variant = (const wxVariant *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVariant);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call SetProperty
    self->SetProperty(*variant);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_delete[] = { &wxluatype_wxRichTextProperties, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextProperties_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_op_eq[] = { &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_op_eq[1] = {{ wxLua_wxRichTextProperties_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_op_eq }};
//     bool operator==(const wxRichTextProperties& props) const;
static int LUACALL wxLua_wxRichTextProperties_op_eq(lua_State *L)
{
    // const wxRichTextProperties props
    const wxRichTextProperties * props = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call op_eq
    bool returns = ((*self)==(*props));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_op_index1[] = { &wxluatype_wxRichTextProperties, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextProperties_op_index1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_op_index1[1] = {{ wxLua_wxRichTextProperties_op_index1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_op_index1 }};
//     wxVariant& operator[](size_t idx);
static int LUACALL wxLua_wxRichTextProperties_op_index1(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call op_index
    wxVariant* returns = (wxVariant*)&((*self)[(idx)]);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVariant);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_op_index[] = { &wxluatype_wxRichTextProperties, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextProperties_op_index(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_op_index[1] = {{ wxLua_wxRichTextProperties_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_op_index }};
//     const wxVariant& operator[](size_t idx) const;
static int LUACALL wxLua_wxRichTextProperties_op_index(lua_State *L)
{
    // size_t idx
    size_t idx = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call op_index
    const wxVariant* returns = (const wxVariant*)&((*self)[(idx)]);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVariant);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_op_set[] = { &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_op_set[1] = {{ wxLua_wxRichTextProperties_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_op_set }};
//     void operator=(const wxRichTextProperties& props);
static int LUACALL wxLua_wxRichTextProperties_op_set(lua_State *L)
{
    // const wxRichTextProperties props
    const wxRichTextProperties * props = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextProperties * self = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call op_set
    (*self)=(*props);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextProperties_constructor1[] = { &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextProperties_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_constructor1[1] = {{ wxLua_wxRichTextProperties_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextProperties_constructor1 }};
//     wxRichTextProperties(const wxRichTextProperties& props);
static int LUACALL wxLua_wxRichTextProperties_constructor1(lua_State *L)
{
    // const wxRichTextProperties props
    const wxRichTextProperties * props = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextProperties);
    // call constructor
    wxRichTextProperties* returns = new wxRichTextProperties(*props);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextProperties);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}

static int LUACALL wxLua_wxRichTextProperties_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_constructor[1] = {{ wxLua_wxRichTextProperties_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextProperties();
static int LUACALL wxLua_wxRichTextProperties_constructor(lua_State *L)
{
    // call constructor
    wxRichTextProperties* returns = new wxRichTextProperties();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextProperties);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_SetProperty_overload[] =
{
    { wxLua_wxRichTextProperties_SetProperty5, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty5 },
    { wxLua_wxRichTextProperties_SetProperty4, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty4 },
    { wxLua_wxRichTextProperties_SetProperty3, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty3 },
    { wxLua_wxRichTextProperties_SetProperty2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty2 },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { wxLua_wxRichTextProperties_SetProperty1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty1 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { wxLua_wxRichTextProperties_SetProperty, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_SetProperty },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
};
static int s_wxluafunc_wxLua_wxRichTextProperties_SetProperty_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextProperties_SetProperty_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_op_index_overload[] =
{

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { wxLua_wxRichTextProperties_op_index1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_op_index1 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { wxLua_wxRichTextProperties_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextProperties_op_index },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
};
static int s_wxluafunc_wxLua_wxRichTextProperties_op_index_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextProperties_op_index_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextProperties_constructor_overload[] =
{
    { wxLua_wxRichTextProperties_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextProperties_constructor1 },
    { wxLua_wxRichTextProperties_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextProperties_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextProperties_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextProperties_delete_function(void** p)
{
    wxRichTextProperties* o = (wxRichTextProperties*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextProperties_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_Clear, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_Copy, 1, NULL },
    { "Find", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_Find, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { "FindOrCreateProperty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_FindOrCreateProperty, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetCount, 1, NULL },
    { "GetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetProperties, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)
    { "GetProperty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetProperty, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT)

    { "GetPropertyBool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyBool, 1, NULL },
    { "GetPropertyDouble", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyDouble, 1, NULL },
    { "GetPropertyLong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyLong, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetPropertyNames", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyNames, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetPropertyString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_GetPropertyString, 1, NULL },
    { "HasProperty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_HasProperty, 1, NULL },
    { "MergeProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_MergeProperties, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_Remove, 1, NULL },
    { "RemoveProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_RemoveProperties, 1, NULL },
    { "SetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_SetProperties, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))
    { "SetProperty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_SetProperty_overload, s_wxluafunc_wxLua_wxRichTextProperties_SetProperty_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextProperties_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_op_eq, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))
    { "op_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_op_index_overload, s_wxluafunc_wxLua_wxRichTextProperties_op_index_overload_count, 0 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_VARIANT))

    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextProperties_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextProperties", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextProperties_constructor_overload, s_wxluafunc_wxLua_wxRichTextProperties_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextProperties_methodCount = sizeof(wxRichTextProperties_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextFontTable
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFontTable'
int wxluatype_wxRichTextFontTable = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_Clear[] = { &wxluatype_wxRichTextFontTable, NULL };
static int LUACALL wxLua_wxRichTextFontTable_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_Clear[1] = {{ wxLua_wxRichTextFontTable_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFontTable_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextFontTable_Clear(lua_State *L)
{
    // get this
    wxRichTextFontTable * self = (wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call Clear
    self->Clear();

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_FindFont[] = { &wxluatype_wxRichTextFontTable, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextFontTable_FindFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_FindFont[1] = {{ wxLua_wxRichTextFontTable_FindFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFontTable_FindFont }};
//     wxFont FindFont(const wxRichTextAttr& fontSpec);
static int LUACALL wxLua_wxRichTextFontTable_FindFont(lua_State *L)
{
    // const wxRichTextAttr fontSpec
    const wxRichTextAttr * fontSpec = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextFontTable * self = (wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call FindFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->FindFont(*fontSpec));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_IsOk[] = { &wxluatype_wxRichTextFontTable, NULL };
static int LUACALL wxLua_wxRichTextFontTable_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_IsOk[1] = {{ wxLua_wxRichTextFontTable_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFontTable_IsOk }};
//     bool IsOk() const;
static int LUACALL wxLua_wxRichTextFontTable_IsOk(lua_State *L)
{
    // get this
    wxRichTextFontTable * self = (wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_SetFontScale[] = { &wxluatype_wxRichTextFontTable, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFontTable_SetFontScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_SetFontScale[1] = {{ wxLua_wxRichTextFontTable_SetFontScale, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFontTable_SetFontScale }};
//     void SetFontScale(double fontScale);
static int LUACALL wxLua_wxRichTextFontTable_SetFontScale(lua_State *L)
{
    // double fontScale
    double fontScale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFontTable * self = (wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call SetFontScale
    self->SetFontScale(fontScale);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_delete[] = { &wxluatype_wxRichTextFontTable, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFontTable_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_op_eq[] = { &wxluatype_wxRichTextFontTable, &wxluatype_wxRichTextFontTable, NULL };
static int LUACALL wxLua_wxRichTextFontTable_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_op_eq[1] = {{ wxLua_wxRichTextFontTable_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFontTable_op_eq }};
//     bool operator == (const wxRichTextFontTable& table) const;
static int LUACALL wxLua_wxRichTextFontTable_op_eq(lua_State *L)
{
    // const wxRichTextFontTable table
    const wxRichTextFontTable * table = (const wxRichTextFontTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFontTable);
    // get this
    wxRichTextFontTable * self = (wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call op_eq
    bool returns = ((*self)==(*table));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_op_ne[] = { &wxluatype_wxRichTextFontTable, &wxluatype_wxRichTextFontTable, NULL };
static int LUACALL wxLua_wxRichTextFontTable_op_ne(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_op_ne[1] = {{ wxLua_wxRichTextFontTable_op_ne, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFontTable_op_ne }};
//     bool operator != (const wxRichTextFontTable& table) const;
static int LUACALL wxLua_wxRichTextFontTable_op_ne(lua_State *L)
{
    // const wxRichTextFontTable table
    const wxRichTextFontTable * table = (const wxRichTextFontTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFontTable);
    // get this
    wxRichTextFontTable * self = (wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call op_ne
    bool returns = ((*self)!=(*table));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_op_set[] = { &wxluatype_wxRichTextFontTable, &wxluatype_wxRichTextFontTable, NULL };
static int LUACALL wxLua_wxRichTextFontTable_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_op_set[1] = {{ wxLua_wxRichTextFontTable_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFontTable_op_set }};
//     void operator= (const wxRichTextFontTable& table);
static int LUACALL wxLua_wxRichTextFontTable_op_set(lua_State *L)
{
    // const wxRichTextFontTable table
    const wxRichTextFontTable * table = (const wxRichTextFontTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFontTable);
    // get this
    wxRichTextFontTable * self = (wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call op_set
    (*self)=(*table);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFontTable_constructor1[] = { &wxluatype_wxRichTextFontTable, NULL };
static int LUACALL wxLua_wxRichTextFontTable_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_constructor1[1] = {{ wxLua_wxRichTextFontTable_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFontTable_constructor1 }};
//     wxRichTextFontTable(const wxRichTextFontTable& table);
static int LUACALL wxLua_wxRichTextFontTable_constructor1(lua_State *L)
{
    // const wxRichTextFontTable table
    const wxRichTextFontTable * table = (const wxRichTextFontTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFontTable);
    // call constructor
    wxRichTextFontTable* returns = new wxRichTextFontTable(*table);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFontTable);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFontTable);

    return 1;
}

static int LUACALL wxLua_wxRichTextFontTable_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_constructor[1] = {{ wxLua_wxRichTextFontTable_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextFontTable();
static int LUACALL wxLua_wxRichTextFontTable_constructor(lua_State *L)
{
    // call constructor
    wxRichTextFontTable* returns = new wxRichTextFontTable();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFontTable);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFontTable);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFontTable_constructor_overload[] =
{
    { wxLua_wxRichTextFontTable_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFontTable_constructor1 },
    { wxLua_wxRichTextFontTable_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextFontTable_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextFontTable_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextFontTable_delete_function(void** p)
{
    wxRichTextFontTable* o = (wxRichTextFontTable*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFontTable_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFontTable_Clear, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFontTable_FindFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFontTable_IsOk, 1, NULL },
    { "SetFontScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFontTable_SetFontScale, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFontTable_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFontTable_op_eq, 1, NULL },
    { "op_ne", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFontTable_op_ne, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFontTable_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextFontTable", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextFontTable_constructor_overload, s_wxluafunc_wxLua_wxRichTextFontTable_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextFontTable_methodCount = sizeof(wxRichTextFontTable_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextRangeArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextRangeArray'
int wxluatype_wxRichTextRangeArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_Add[] = { &wxluatype_wxRichTextRangeArray, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_Add[1] = {{ wxLua_wxRichTextRangeArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRangeArray_Add }};
//     void Add(const wxRichTextRange& item);
static int LUACALL wxLua_wxRichTextRangeArray_Add(lua_State *L)
{
    // const wxRichTextRange item
    const wxRichTextRange * item = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRangeArray * self = (wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call Add
    self->Add(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_Clear[] = { &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_Clear[1] = {{ wxLua_wxRichTextRangeArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRangeArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextRangeArray_Clear(lua_State *L)
{
    // get this
    wxRichTextRangeArray * self = (wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_GetCount[] = { &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_GetCount[1] = {{ wxLua_wxRichTextRangeArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRangeArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxRichTextRangeArray_GetCount(lua_State *L)
{
    // get this
    wxRichTextRangeArray * self = (wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_Insert[] = { &wxluatype_wxRichTextRangeArray, &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_Insert[1] = {{ wxLua_wxRichTextRangeArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextRangeArray_Insert }};
//     void Insert(const wxRichTextRange& item, int nIndex);
static int LUACALL wxLua_wxRichTextRangeArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxRichTextRange item
    const wxRichTextRange * item = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRangeArray * self = (wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call Insert
    self->Insert(*item, nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_IsEmpty[] = { &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_IsEmpty[1] = {{ wxLua_wxRichTextRangeArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRangeArray_IsEmpty }};
//     bool IsEmpty();
static int LUACALL wxLua_wxRichTextRangeArray_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextRangeArray * self = (wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_Item[] = { &wxluatype_wxRichTextRangeArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_Item[1] = {{ wxLua_wxRichTextRangeArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRangeArray_Item }};
//     wxRichTextRange Item(size_t nIndex) const;
static int LUACALL wxLua_wxRichTextRangeArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextRangeArray * self = (wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call Item
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_RemoveAt[] = { &wxluatype_wxRichTextRangeArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_RemoveAt[1] = {{ wxLua_wxRichTextRangeArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRangeArray_RemoveAt }};
//     void RemoveAt(size_t nIndex);
static int LUACALL wxLua_wxRichTextRangeArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextRangeArray * self = (wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_delete[] = { &wxluatype_wxRichTextRangeArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRangeArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRangeArray_constructor1[] = { &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextRangeArray_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_constructor1[1] = {{ wxLua_wxRichTextRangeArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRangeArray_constructor1 }};
//     wxRichTextRangeArray(const wxRichTextRangeArray& array);
static int LUACALL wxLua_wxRichTextRangeArray_constructor1(lua_State *L)
{
    // const wxRichTextRangeArray array
    const wxRichTextRangeArray * array = (const wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRangeArray);
    // call constructor
    wxRichTextRangeArray* returns = new wxRichTextRangeArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRangeArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRangeArray);

    return 1;
}

static int LUACALL wxLua_wxRichTextRangeArray_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_constructor[1] = {{ wxLua_wxRichTextRangeArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextRangeArray();
static int LUACALL wxLua_wxRichTextRangeArray_constructor(lua_State *L)
{
    // call constructor
    wxRichTextRangeArray* returns = new wxRichTextRangeArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRangeArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRangeArray);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRangeArray_constructor_overload[] =
{
    { wxLua_wxRichTextRangeArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRangeArray_constructor1 },
    { wxLua_wxRichTextRangeArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextRangeArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextRangeArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextRangeArray_delete_function(void** p)
{
    wxRichTextRangeArray* o = (wxRichTextRangeArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextRangeArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRangeArray_Add, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRangeArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRangeArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRangeArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRangeArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRangeArray_Item, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRangeArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextRangeArray_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextRangeArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextRangeArray_constructor_overload, s_wxluafunc_wxLua_wxRichTextRangeArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextRangeArray_methodCount = sizeof(wxRichTextRangeArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextRange
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextRange'
int wxluatype_wxRichTextRange = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_Contains[] = { &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextRange_Contains(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_Contains[1] = {{ wxLua_wxRichTextRange_Contains, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_Contains }};
//     bool Contains(long pos) const;
static int LUACALL wxLua_wxRichTextRange_Contains(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call Contains
    bool returns = (self->Contains(pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_FromInternal[] = { &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_FromInternal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_FromInternal[1] = {{ wxLua_wxRichTextRange_FromInternal, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_FromInternal }};
//     wxRichTextRange FromInternal() const;
static int LUACALL wxLua_wxRichTextRange_FromInternal(lua_State *L)
{
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call FromInternal
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->FromInternal());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_GetEnd[] = { &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_GetEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_GetEnd[1] = {{ wxLua_wxRichTextRange_GetEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_GetEnd }};
//     long GetEnd() const;
static int LUACALL wxLua_wxRichTextRange_GetEnd(lua_State *L)
{
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call GetEnd
    long returns = (self->GetEnd());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_GetLength[] = { &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_GetLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_GetLength[1] = {{ wxLua_wxRichTextRange_GetLength, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_GetLength }};
//     long GetLength() const;
static int LUACALL wxLua_wxRichTextRange_GetLength(lua_State *L)
{
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call GetLength
    long returns = (self->GetLength());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_GetStart[] = { &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_GetStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_GetStart[1] = {{ wxLua_wxRichTextRange_GetStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_GetStart }};
//     long GetStart() const;
static int LUACALL wxLua_wxRichTextRange_GetStart(lua_State *L)
{
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call GetStart
    long returns = (self->GetStart());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_IsOutside[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_IsOutside(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_IsOutside[1] = {{ wxLua_wxRichTextRange_IsOutside, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_IsOutside }};
//     bool IsOutside(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextRange_IsOutside(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call IsOutside
    bool returns = (self->IsOutside(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_IsWithin[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_IsWithin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_IsWithin[1] = {{ wxLua_wxRichTextRange_IsWithin, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_IsWithin }};
//     bool IsWithin(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextRange_IsWithin(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call IsWithin
    bool returns = (self->IsWithin(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_LimitTo[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_LimitTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_LimitTo[1] = {{ wxLua_wxRichTextRange_LimitTo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_LimitTo }};
//     bool LimitTo(const wxRichTextRange& range) ;
static int LUACALL wxLua_wxRichTextRange_LimitTo(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call LimitTo
    bool returns = (self->LimitTo(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_SetEnd[] = { &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextRange_SetEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_SetEnd[1] = {{ wxLua_wxRichTextRange_SetEnd, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_SetEnd }};
//     void SetEnd(long end);
static int LUACALL wxLua_wxRichTextRange_SetEnd(lua_State *L)
{
    // long end
    long end = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call SetEnd
    self->SetEnd(end);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_SetRange[] = { &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextRange_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_SetRange[1] = {{ wxLua_wxRichTextRange_SetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextRange_SetRange }};
//     void SetRange(long start, long end);
static int LUACALL wxLua_wxRichTextRange_SetRange(lua_State *L)
{
    // long end
    long end = (long)wxlua_getnumbertype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call SetRange
    self->SetRange(start, end);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_SetStart[] = { &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextRange_SetStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_SetStart[1] = {{ wxLua_wxRichTextRange_SetStart, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_SetStart }};
//     void SetStart(long start);
static int LUACALL wxLua_wxRichTextRange_SetStart(lua_State *L)
{
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call SetStart
    self->SetStart(start);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_Swap[] = { &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_Swap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_Swap[1] = {{ wxLua_wxRichTextRange_Swap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_Swap }};
//     void Swap();
static int LUACALL wxLua_wxRichTextRange_Swap(lua_State *L)
{
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call Swap
    self->Swap();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_ToInternal[] = { &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_ToInternal(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_ToInternal[1] = {{ wxLua_wxRichTextRange_ToInternal, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_ToInternal }};
//     wxRichTextRange ToInternal() const;
static int LUACALL wxLua_wxRichTextRange_ToInternal(lua_State *L)
{
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call ToInternal
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->ToInternal());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_delete[] = { &wxluatype_wxRichTextRange, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_op_add[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_op_add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_op_add[1] = {{ wxLua_wxRichTextRange_op_add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_op_add }};
//     wxRichTextRange operator +(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextRange_op_add(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call op_add
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange((*self)+(*range));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_op_eq[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_op_eq[1] = {{ wxLua_wxRichTextRange_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_op_eq }};
//     bool operator ==(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextRange_op_eq(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call op_eq
    bool returns = ((*self)==(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_op_ne[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_op_ne(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_op_ne[1] = {{ wxLua_wxRichTextRange_op_ne, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_op_ne }};
//     bool operator !=(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextRange_op_ne(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call op_ne
    bool returns = ((*self)!=(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_op_set[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_op_set[1] = {{ wxLua_wxRichTextRange_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_op_set }};
//     void operator =(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextRange_op_set(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call op_set
    (*self)=(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_op_sub[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_op_sub(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_op_sub[1] = {{ wxLua_wxRichTextRange_op_sub, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_op_sub }};
//     wxRichTextRange operator -(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextRange_op_sub(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextRange * self = (wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call op_sub
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange((*self)-(*range));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_constructor2[] = { &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextRange_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_constructor2[1] = {{ wxLua_wxRichTextRange_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_constructor2 }};
//     wxRichTextRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextRange_constructor2(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call constructor
    wxRichTextRange* returns = new wxRichTextRange(*range);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRange_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextRange_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_constructor1[1] = {{ wxLua_wxRichTextRange_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_constructor1 }};
//     wxRichTextRange(long start, long end);
static int LUACALL wxLua_wxRichTextRange_constructor1(lua_State *L)
{
    // long end
    long end = (long)wxlua_getnumbertype(L, 2);
    // long start
    long start = (long)wxlua_getnumbertype(L, 1);
    // call constructor
    wxRichTextRange* returns = new wxRichTextRange(start, end);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static int LUACALL wxLua_wxRichTextRange_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_constructor[1] = {{ wxLua_wxRichTextRange_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextRange();
static int LUACALL wxLua_wxRichTextRange_constructor(lua_State *L)
{
    // call constructor
    wxRichTextRange* returns = new wxRichTextRange();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRange_constructor_overload[] =
{
    { wxLua_wxRichTextRange_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRange_constructor2 },
    { wxLua_wxRichTextRange_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRange_constructor1 },
    { wxLua_wxRichTextRange_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextRange_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextRange_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextRange_delete_function(void** p)
{
    wxRichTextRange* o = (wxRichTextRange*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextRange_methods[] = {
    { "Contains", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_Contains, 1, NULL },
    { "FromInternal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_FromInternal, 1, NULL },
    { "GetEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_GetEnd, 1, NULL },
    { "GetLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_GetLength, 1, NULL },
    { "GetStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_GetStart, 1, NULL },
    { "IsOutside", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_IsOutside, 1, NULL },
    { "IsWithin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_IsWithin, 1, NULL },
    { "LimitTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_LimitTo, 1, NULL },
    { "SetEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_SetEnd, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_SetRange, 1, NULL },
    { "SetStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_SetStart, 1, NULL },
    { "Swap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_Swap, 1, NULL },
    { "ToInternal", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_ToInternal, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextRange_delete, 1, NULL },
    { "op_add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_op_add, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_op_eq, 1, NULL },
    { "op_ne", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_op_ne, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_op_set, 1, NULL },
    { "op_sub", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRange_op_sub, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextRange", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextRange_constructor_overload, s_wxluafunc_wxLua_wxRichTextRange_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextRange_methodCount = sizeof(wxRichTextRange_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextSelection
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextSelection'
int wxluatype_wxRichTextSelection = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Add[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextSelection_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Add[1] = {{ wxLua_wxRichTextSelection_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_Add }};
//     void Add(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextSelection_Add(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call Add
    self->Add(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Copy[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Copy[1] = {{ wxLua_wxRichTextSelection_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_Copy }};
//     void Copy(const wxRichTextSelection& sel);
static int LUACALL wxLua_wxRichTextSelection_Copy(lua_State *L)
{
    // const wxRichTextSelection sel
    const wxRichTextSelection * sel = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextSelection);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call Copy
    self->Copy(*sel);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_GetContainer[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_GetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_GetContainer[1] = {{ wxLua_wxRichTextSelection_GetContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_GetContainer }};
//     wxRichTextParagraphLayoutBox* GetContainer() const;
static int LUACALL wxLua_wxRichTextSelection_GetContainer(lua_State *L)
{
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call GetContainer
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->GetContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_GetCount[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_GetCount[1] = {{ wxLua_wxRichTextSelection_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_GetCount }};
//     size_t GetCount() const;
static int LUACALL wxLua_wxRichTextSelection_GetCount(lua_State *L)
{
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call GetCount
    size_t returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_GetRange1[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_GetRange1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_GetRange1[1] = {{ wxLua_wxRichTextSelection_GetRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_GetRange1 }};
//     wxRichTextRange GetRange() const;
static int LUACALL wxLua_wxRichTextSelection_GetRange1(lua_State *L)
{
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call GetRange
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->GetRange());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_GetRange[] = { &wxluatype_wxRichTextSelection, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextSelection_GetRange(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_GetRange[1] = {{ wxLua_wxRichTextSelection_GetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_GetRange }};
//     wxRichTextRange GetRange(size_t i) const;
static int LUACALL wxLua_wxRichTextSelection_GetRange(lua_State *L)
{
    // size_t i
    size_t i = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call GetRange
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->GetRange(i));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_GetRanges[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_GetRanges(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_GetRanges[1] = {{ wxLua_wxRichTextSelection_GetRanges, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_GetRanges }};
//     wxRichTextRangeArray& GetRanges();
static int LUACALL wxLua_wxRichTextSelection_GetRanges(lua_State *L)
{
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call GetRanges
    wxRichTextRangeArray* returns = (wxRichTextRangeArray*)&self->GetRanges();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRangeArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_GetSelectionForObject[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextSelection_GetSelectionForObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_GetSelectionForObject[1] = {{ wxLua_wxRichTextSelection_GetSelectionForObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_GetSelectionForObject }};
//     wxRichTextRangeArray GetSelectionForObject(wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextSelection_GetSelectionForObject(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call GetSelectionForObject
    // allocate a new object using the copy constructor
    wxRichTextRangeArray* returns = new wxRichTextRangeArray(self->GetSelectionForObject(obj));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRangeArray);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRangeArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Get_m_container[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_Get_m_container(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Get_m_container[1] = {{ wxLua_wxRichTextSelection_Get_m_container, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_Get_m_container }};
//     wxRichTextParagraphLayoutBox*   m_container;
static int LUACALL wxLua_wxRichTextSelection_Get_m_container(lua_State *L)
{
    // get this
    wxRichTextSelection *self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_container, wxluatype_wxRichTextParagraphLayoutBox);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Get_m_ranges[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_Get_m_ranges(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Get_m_ranges[1] = {{ wxLua_wxRichTextSelection_Get_m_ranges, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_Get_m_ranges }};
//     wxRichTextRangeArray            m_ranges;
static int LUACALL wxLua_wxRichTextSelection_Get_m_ranges(lua_State *L)
{
    // get this
    wxRichTextSelection *self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_ranges, wxluatype_wxRichTextRangeArray);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_IsValid[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_IsValid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_IsValid[1] = {{ wxLua_wxRichTextSelection_IsValid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_IsValid }};
//     bool IsValid() const;
static int LUACALL wxLua_wxRichTextSelection_IsValid(lua_State *L)
{
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call IsValid
    bool returns = (self->IsValid());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Reset[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Reset[1] = {{ wxLua_wxRichTextSelection_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_Reset }};
//     void Reset();
static int LUACALL wxLua_wxRichTextSelection_Reset(lua_State *L)
{
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Set1[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextRangeArray, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextSelection_Set1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Set1[1] = {{ wxLua_wxRichTextSelection_Set1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextSelection_Set1 }};
//     void Set(const wxRichTextRangeArray& ranges, wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextSelection_Set1(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // const wxRichTextRangeArray ranges
    const wxRichTextRangeArray * ranges = (const wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRangeArray);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call Set
    self->Set(*ranges, container);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Set[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextSelection_Set(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Set[1] = {{ wxLua_wxRichTextSelection_Set, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextSelection_Set }};
//     void Set(const wxRichTextRange& range, wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextSelection_Set(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call Set
    self->Set(*range, container);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_SetContainer[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextSelection_SetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_SetContainer[1] = {{ wxLua_wxRichTextSelection_SetContainer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_SetContainer }};
//     void SetContainer(wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextSelection_SetContainer(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call SetContainer
    self->SetContainer(container);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_SetRange[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextSelection_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_SetRange[1] = {{ wxLua_wxRichTextSelection_SetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_SetRange }};
//     void SetRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextSelection_SetRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call SetRange
    self->SetRange(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_SetRanges[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextSelection_SetRanges(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_SetRanges[1] = {{ wxLua_wxRichTextSelection_SetRanges, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_SetRanges }};
//     void SetRanges(const wxRichTextRangeArray& ranges);
static int LUACALL wxLua_wxRichTextSelection_SetRanges(lua_State *L)
{
    // const wxRichTextRangeArray ranges
    const wxRichTextRangeArray * ranges = (const wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRangeArray);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call SetRanges
    self->SetRanges(*ranges);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Set_m_container[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextSelection_Set_m_container(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Set_m_container[1] = {{ wxLua_wxRichTextSelection_Set_m_container, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_Set_m_container }};
//     wxRichTextParagraphLayoutBox*   m_container;
static int LUACALL wxLua_wxRichTextSelection_Set_m_container(lua_State *L)
{
    // get the data type value
    wxRichTextParagraphLayoutBox* val = (wxRichTextParagraphLayoutBox*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextSelection *self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    self->m_container = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_Set_m_ranges[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextSelection_Set_m_ranges(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Set_m_ranges[1] = {{ wxLua_wxRichTextSelection_Set_m_ranges, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_Set_m_ranges }};
//     wxRichTextRangeArray            m_ranges;
static int LUACALL wxLua_wxRichTextSelection_Set_m_ranges(lua_State *L)
{
    // get the data type value
    wxRichTextRangeArray* val = (wxRichTextRangeArray*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRangeArray);
    // get this
    wxRichTextSelection *self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    self->m_ranges = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection3[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextSelection_WithinSelection3(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection3[1] = {{ wxLua_wxRichTextSelection_WithinSelection3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection3 }};
//     static bool WithinSelection(const wxRichTextRange& range, const wxRichTextRangeArray& ranges);
static int LUACALL wxLua_wxRichTextSelection_WithinSelection3(lua_State *L)
{
    // const wxRichTextRangeArray ranges
    const wxRichTextRangeArray * ranges = (const wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRangeArray);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call WithinSelection
    bool returns = (wxRichTextSelection::WithinSelection(*range, *ranges));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection2[] = { &wxluatype_TNUMBER, &wxluatype_wxRichTextRangeArray, NULL };
static int LUACALL wxLua_wxRichTextSelection_WithinSelection2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection2[1] = {{ wxLua_wxRichTextSelection_WithinSelection2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection2 }};
//     static bool WithinSelection(long pos, const wxRichTextRangeArray& ranges);
static int LUACALL wxLua_wxRichTextSelection_WithinSelection2(lua_State *L)
{
    // const wxRichTextRangeArray ranges
    const wxRichTextRangeArray * ranges = (const wxRichTextRangeArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRangeArray);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 1);
    // call WithinSelection
    bool returns = (wxRichTextSelection::WithinSelection(pos, *ranges));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection1[] = { &wxluatype_wxRichTextSelection, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextSelection_WithinSelection1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection1[1] = {{ wxLua_wxRichTextSelection_WithinSelection1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection1 }};
//     bool WithinSelection(long pos) const;
static int LUACALL wxLua_wxRichTextSelection_WithinSelection1(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call WithinSelection
    bool returns = (self->WithinSelection(pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection[] = { &wxluatype_wxRichTextSelection, &wxluatype_TNUMBER, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextSelection_WithinSelection(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection[1] = {{ wxLua_wxRichTextSelection_WithinSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection }};
//     bool WithinSelection(long pos, wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextSelection_WithinSelection(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call WithinSelection
    bool returns = (self->WithinSelection(pos, obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_delete[] = { &wxluatype_wxRichTextSelection, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_op_eq[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_op_eq[1] = {{ wxLua_wxRichTextSelection_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_op_eq }};
//     bool operator==(const wxRichTextSelection& sel) const;
static int LUACALL wxLua_wxRichTextSelection_op_eq(lua_State *L)
{
    // const wxRichTextSelection sel
    const wxRichTextSelection * sel = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextSelection);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call op_eq
    bool returns = ((*self)==(*sel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_op_index[] = { &wxluatype_wxRichTextSelection, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextSelection_op_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_op_index[1] = {{ wxLua_wxRichTextSelection_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_op_index }};
//     wxRichTextRange operator[](size_t i) const;
static int LUACALL wxLua_wxRichTextSelection_op_index(lua_State *L)
{
    // size_t i
    size_t i = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call op_index
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange((*self)[(i)]);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_op_set[] = { &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_op_set[1] = {{ wxLua_wxRichTextSelection_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_op_set }};
//     void operator=(const wxRichTextSelection& sel);
static int LUACALL wxLua_wxRichTextSelection_op_set(lua_State *L)
{
    // const wxRichTextSelection sel
    const wxRichTextSelection * sel = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextSelection);
    // get this
    wxRichTextSelection * self = (wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call op_set
    (*self)=(*sel);

    return 0;
}

static int LUACALL wxLua_wxRichTextSelection_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_constructor2[1] = {{ wxLua_wxRichTextSelection_constructor2, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextSelection();
static int LUACALL wxLua_wxRichTextSelection_constructor2(lua_State *L)
{
    // call constructor
    wxRichTextSelection* returns = new wxRichTextSelection();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextSelection);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextSelection);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_constructor1[] = { &wxluatype_wxRichTextRange, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextSelection_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_constructor1[1] = {{ wxLua_wxRichTextSelection_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_constructor1 }};
//     wxRichTextSelection(const wxRichTextRange& range, wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextSelection_constructor1(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRange);
    // call constructor
    wxRichTextSelection* returns = new wxRichTextSelection(*range, container);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextSelection);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextSelection);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextSelection_constructor[] = { &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextSelection_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_constructor[1] = {{ wxLua_wxRichTextSelection_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_constructor }};
//     wxRichTextSelection(const wxRichTextSelection& sel);
static int LUACALL wxLua_wxRichTextSelection_constructor(lua_State *L)
{
    // const wxRichTextSelection sel
    const wxRichTextSelection * sel = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextSelection);
    // call constructor
    wxRichTextSelection* returns = new wxRichTextSelection(*sel);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextSelection);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextSelection);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_GetRange_overload[] =
{
    { wxLua_wxRichTextSelection_GetRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_GetRange1 },
    { wxLua_wxRichTextSelection_GetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_GetRange },
};
static int s_wxluafunc_wxLua_wxRichTextSelection_GetRange_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextSelection_GetRange_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_Set_overload[] =
{
    { wxLua_wxRichTextSelection_Set1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextSelection_Set1 },
    { wxLua_wxRichTextSelection_Set, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextSelection_Set },
};
static int s_wxluafunc_wxLua_wxRichTextSelection_Set_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextSelection_Set_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection_overload[] =
{
    { wxLua_wxRichTextSelection_WithinSelection3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection3 },
    { wxLua_wxRichTextSelection_WithinSelection2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection2 },
    { wxLua_wxRichTextSelection_WithinSelection1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection1 },
    { wxLua_wxRichTextSelection_WithinSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextSelection_WithinSelection },
};
static int s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextSelection_constructor_overload[] =
{
    { wxLua_wxRichTextSelection_constructor2, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
    { wxLua_wxRichTextSelection_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRichTextSelection_constructor1 },
    { wxLua_wxRichTextSelection_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextSelection_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextSelection_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextSelection_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextSelection_delete_function(void** p)
{
    wxRichTextSelection* o = (wxRichTextSelection*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextSelection_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Add, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Copy, 1, NULL },
    { "GetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_GetContainer, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_GetCount, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_GetRange_overload, s_wxluafunc_wxLua_wxRichTextSelection_GetRange_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRanges", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_GetRanges, 1, NULL },
    { "GetSelectionForObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_GetSelectionForObject, 1, NULL },
    // %member    { "Get_m_container", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Get_m_container, 1, NULL },
    // %member    { "Get_m_ranges", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Get_m_ranges, 1, NULL },
    { "IsValid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_IsValid, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Reset, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Set_overload, s_wxluafunc_wxLua_wxRichTextSelection_Set_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_SetContainer, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_SetRange, 1, NULL },
    { "SetRanges", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_SetRanges, 1, NULL },
    // %member    { "Set_m_container", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Set_m_container, 1, NULL },
    // %member    { "Set_m_ranges", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_Set_m_ranges, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "WithinSelection", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection_overload, s_wxluafunc_wxLua_wxRichTextSelection_WithinSelection_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextSelection_delete, 1, NULL },
    { "m_container", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextSelection_Set_m_container, 1, NULL },
    { "m_container", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextSelection_Get_m_container, 1, NULL },
    { "m_ranges", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextSelection_Set_m_ranges, 1, NULL },
    { "m_ranges", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextSelection_Get_m_ranges, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_op_eq, 1, NULL },
    { "op_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_op_index, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextSelection_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextSelection", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextSelection_constructor_overload, s_wxluafunc_wxLua_wxRichTextSelection_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextSelection_methodCount = sizeof(wxRichTextSelection_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextDrawingContext
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextDrawingContext'
int wxluatype_wxRichTextDrawingContext = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_ApplyVirtualAttributes[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_ApplyVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_ApplyVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingContext_ApplyVirtualAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_ApplyVirtualAttributes }};
//     bool ApplyVirtualAttributes(wxRichTextAttr& attr, wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextDrawingContext_ApplyVirtualAttributes(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call ApplyVirtualAttributes
    bool returns = (self->ApplyVirtualAttributes(*attr, obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_EnableVirtualAttributes[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_EnableVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_EnableVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingContext_EnableVirtualAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_EnableVirtualAttributes }};
//     void EnableVirtualAttributes(bool b);
static int LUACALL wxLua_wxRichTextDrawingContext_EnableVirtualAttributes(lua_State *L)
{
    // bool b
    bool b = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call EnableVirtualAttributes
    self->EnableVirtualAttributes(b);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualAttributes[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingContext_GetVirtualAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualAttributes }};
//     wxRichTextAttr GetVirtualAttributes(wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualAttributes(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call GetVirtualAttributes
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->GetVirtualAttributes(obj));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualAttributesEnabled[] = { &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualAttributesEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualAttributesEnabled[1] = {{ wxLua_wxRichTextDrawingContext_GetVirtualAttributesEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualAttributesEnabled }};
//     bool GetVirtualAttributesEnabled() const;
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualAttributesEnabled(lua_State *L)
{
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call GetVirtualAttributesEnabled
    bool returns = (self->GetVirtualAttributesEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributes[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextObject, &wxluatype_wxArrayInt, &wxluatype_wxRichTextAttrArray, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributes[1] = {{ wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributes }};
//     int GetVirtualSubobjectAttributes(wxRichTextObject* obj, wxArrayInt& positions, wxRichTextAttrArray& attributes) const;
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributes(lua_State *L)
{
    // wxRichTextAttrArray attributes
    wxRichTextAttrArray * attributes = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttrArray);
    // wxArrayInt positions
    wxArrayInt * positions = (wxArrayInt *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayInt);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call GetVirtualSubobjectAttributes
    int returns = (self->GetVirtualSubobjectAttributes(obj, *positions, *attributes));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount[1] = {{ wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount }};
//     int GetVirtualSubobjectAttributesCount(wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call GetVirtualSubobjectAttributesCount
    int returns = (self->GetVirtualSubobjectAttributesCount(obj));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualText[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextPlainText, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualText[1] = {{ wxLua_wxRichTextDrawingContext_GetVirtualText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_GetVirtualText }};
//     bool GetVirtualText(const wxRichTextPlainText* obj, wxString& text) const;
static int LUACALL wxLua_wxRichTextDrawingContext_GetVirtualText(lua_State *L)
{
    // wxString text
    wxString text = wxlua_getwxStringtype(L, 3);
    // const wxRichTextPlainText obj
    const wxRichTextPlainText * obj = (const wxRichTextPlainText *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextPlainText);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call GetVirtualText
    bool returns = (self->GetVirtualText(obj, text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Get_m_buffer[] = { &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_Get_m_buffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_Get_m_buffer[1] = {{ wxLua_wxRichTextDrawingContext_Get_m_buffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Get_m_buffer }};
//     wxRichTextBuffer*   m_buffer;
static int LUACALL wxLua_wxRichTextDrawingContext_Get_m_buffer(lua_State *L)
{
    // get this
    wxRichTextDrawingContext *self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_buffer, wxluatype_wxRichTextBuffer);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes[] = { &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes }};
//     bool                m_enableVirtualAttributes;
static int LUACALL wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes(lua_State *L)
{
    // get this
    wxRichTextDrawingContext *self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // push the result flag
    lua_pushboolean(L, self->m_enableVirtualAttributes);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_HasVirtualAttributes[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_HasVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_HasVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingContext_HasVirtualAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_HasVirtualAttributes }};
//     bool HasVirtualAttributes(wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextDrawingContext_HasVirtualAttributes(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call HasVirtualAttributes
    bool returns = (self->HasVirtualAttributes(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_HasVirtualText[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_HasVirtualText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_HasVirtualText[1] = {{ wxLua_wxRichTextDrawingContext_HasVirtualText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_HasVirtualText }};
//     bool HasVirtualText(const wxRichTextPlainText* obj) const;
static int LUACALL wxLua_wxRichTextDrawingContext_HasVirtualText(lua_State *L)
{
    // const wxRichTextPlainText obj
    const wxRichTextPlainText * obj = (const wxRichTextPlainText *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextPlainText);
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call HasVirtualText
    bool returns = (self->HasVirtualText(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Init[] = { &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_Init[1] = {{ wxLua_wxRichTextDrawingContext_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextDrawingContext_Init(lua_State *L)
{
    // get this
    wxRichTextDrawingContext * self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Set_m_buffer[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_Set_m_buffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_Set_m_buffer[1] = {{ wxLua_wxRichTextDrawingContext_Set_m_buffer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Set_m_buffer }};
//     wxRichTextBuffer*   m_buffer;
static int LUACALL wxLua_wxRichTextDrawingContext_Set_m_buffer(lua_State *L)
{
    // get the data type value
    wxRichTextBuffer* val = (wxRichTextBuffer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextDrawingContext *self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    self->m_buffer = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes[] = { &wxluatype_wxRichTextDrawingContext, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes }};
//     bool                m_enableVirtualAttributes;
static int LUACALL wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextDrawingContext *self = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingContext);
    self->m_enableVirtualAttributes = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_delete[] = { &wxluatype_wxRichTextDrawingContext, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingContext_constructor[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextDrawingContext_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingContext_constructor[1] = {{ wxLua_wxRichTextDrawingContext_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingContext_constructor }};
//     wxRichTextDrawingContext(wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextDrawingContext_constructor(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call constructor
    wxRichTextDrawingContext* returns = new wxRichTextDrawingContext(buffer);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextDrawingContext);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextDrawingContext);

    return 1;
}




void wxLua_wxRichTextDrawingContext_delete_function(void** p)
{
    wxRichTextDrawingContext* o = (wxRichTextDrawingContext*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextDrawingContext_methods[] = {
    { "ApplyVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_ApplyVirtualAttributes, 1, NULL },
    { "EnableVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_EnableVirtualAttributes, 1, NULL },
    { "GetVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualAttributes, 1, NULL },
    { "GetVirtualAttributesEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualAttributesEnabled, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetVirtualSubobjectAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributes, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetVirtualSubobjectAttributesCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount, 1, NULL },
    { "GetVirtualText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_GetVirtualText, 1, NULL },
    // %member    { "Get_m_buffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_Get_m_buffer, 1, NULL },
    // %member    { "Get_m_enableVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes, 1, NULL },
    { "HasVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_HasVirtualAttributes, 1, NULL },
    { "HasVirtualText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_HasVirtualText, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_Init, 1, NULL },
    // %member    { "Set_m_buffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_Set_m_buffer, 1, NULL },
    // %member    { "Set_m_enableVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextDrawingContext_delete, 1, NULL },
    { "m_buffer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextDrawingContext_Set_m_buffer, 1, NULL },
    { "m_buffer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextDrawingContext_Get_m_buffer, 1, NULL },
    { "m_enableVirtualAttributes", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextDrawingContext_Set_m_enableVirtualAttributes, 1, NULL },
    { "m_enableVirtualAttributes", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextDrawingContext_Get_m_enableVirtualAttributes, 1, NULL },
    { "wxRichTextDrawingContext", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextDrawingContext_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextDrawingContext_methodCount = sizeof(wxRichTextDrawingContext_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextObject'
int wxluatype_wxRichTextObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_AcceptsFocus[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_AcceptsFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_AcceptsFocus[1] = {{ wxLua_wxRichTextObject_AcceptsFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_AcceptsFocus }};
//     virtual bool AcceptsFocus() const;
static int LUACALL wxLua_wxRichTextObject_AcceptsFocus(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call AcceptsFocus
    bool returns = (self->AcceptsFocus());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_AdjustAttributes[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextObject_AdjustAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_AdjustAttributes[1] = {{ wxLua_wxRichTextObject_AdjustAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_AdjustAttributes }};
//     virtual bool AdjustAttributes(wxRichTextAttr& attr, wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextObject_AdjustAttributes(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call AdjustAttributes
    bool returns = (self->AdjustAttributes(*attr, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_AdjustAvailableSpace[] = { &wxluatype_wxDC, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextObject_AdjustAvailableSpace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_AdjustAvailableSpace[1] = {{ wxLua_wxRichTextObject_AdjustAvailableSpace, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 6, 6, s_wxluatypeArray_wxLua_wxRichTextObject_AdjustAvailableSpace }};
//         const wxRect& availableParentSpace, const wxRect& availableContainerSpace);
static int LUACALL wxLua_wxRichTextObject_AdjustAvailableSpace(lua_State *L)
{
    // const wxRect availableContainerSpace
    const wxRect * availableContainerSpace = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRect availableParentSpace
    const wxRect * availableParentSpace = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRichTextAttr childAttr
    const wxRichTextAttr * childAttr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // const wxRichTextAttr parentAttr
    const wxRichTextAttr * parentAttr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call AdjustAvailableSpace
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(wxRichTextObject::AdjustAvailableSpace(*dc, buffer, *parentAttr, *childAttr, *availableParentSpace, *availableContainerSpace));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_CalculateRange[] = { &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextObject_CalculateRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_CalculateRange[1] = {{ wxLua_wxRichTextObject_CalculateRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_CalculateRange }};
//     virtual void CalculateRange(long start, long& end);
static int LUACALL wxLua_wxRichTextObject_CalculateRange(lua_State *L)
{
    // long end
    long * end = (long *)wxlua_touserdata(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call CalculateRange
    self->CalculateRange(start, *end);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_CanEditProperties[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_CanEditProperties[1] = {{ wxLua_wxRichTextObject_CanEditProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_CanEditProperties }};
//     virtual bool CanEditProperties() const;
static int LUACALL wxLua_wxRichTextObject_CanEditProperties(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call CanEditProperties
    bool returns = (self->CanEditProperties());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_CanMerge[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextObject_CanMerge(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_CanMerge[1] = {{ wxLua_wxRichTextObject_CanMerge, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_CanMerge }};
//     virtual bool CanMerge(wxRichTextObject* object, wxRichTextDrawingContext& context) const;
static int LUACALL wxLua_wxRichTextObject_CanMerge(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextObject object
    wxRichTextObject * object = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call CanMerge
    bool returns = (self->CanMerge(object, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_CanSplit[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextObject_CanSplit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_CanSplit[1] = {{ wxLua_wxRichTextObject_CanSplit, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_CanSplit }};
//     virtual bool CanSplit(wxRichTextDrawingContext& context) const;
static int LUACALL wxLua_wxRichTextObject_CanSplit(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextDrawingContext);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call CanSplit
    bool returns = (self->CanSplit(*context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Clone[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Clone[1] = {{ wxLua_wxRichTextObject_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextObject_Clone(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1[1] = {{ wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1 }};
//     static int ConvertPixelsToTenthsMM(int ppi, int pixels, double scale = 1.0);
static int LUACALL wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double scale = 1.0
    double scale = (argCount >= 3 ? (double)wxlua_getnumbertype(L, 3) : 1.0);
    // int pixels
    int pixels = (int)wxlua_getnumbertype(L, 2);
    // int ppi
    int ppi = (int)wxlua_getnumbertype(L, 1);
    // call ConvertPixelsToTenthsMM
    int returns = (wxRichTextObject::ConvertPixelsToTenthsMM(ppi, pixels, scale));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_ConvertPixelsToTenthsMM(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM[1] = {{ wxLua_wxRichTextObject_ConvertPixelsToTenthsMM, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM }};
//     int ConvertPixelsToTenthsMM(wxDC& dc, int pixels) const;
static int LUACALL wxLua_wxRichTextObject_ConvertPixelsToTenthsMM(lua_State *L)
{
    // int pixels
    int pixels = (int)wxlua_getnumbertype(L, 3);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call ConvertPixelsToTenthsMM
    int returns = (self->ConvertPixelsToTenthsMM(*dc, pixels));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_ConvertTenthsMMToPixels1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_ConvertTenthsMMToPixels1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ConvertTenthsMMToPixels1[1] = {{ wxLua_wxRichTextObject_ConvertTenthsMMToPixels1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertTenthsMMToPixels1 }};
//     static int ConvertTenthsMMToPixels(int ppi, int units, double scale = 1.0);
static int LUACALL wxLua_wxRichTextObject_ConvertTenthsMMToPixels1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // double scale = 1.0
    double scale = (argCount >= 3 ? (double)wxlua_getnumbertype(L, 3) : 1.0);
    // int units
    int units = (int)wxlua_getnumbertype(L, 2);
    // int ppi
    int ppi = (int)wxlua_getnumbertype(L, 1);
    // call ConvertTenthsMMToPixels
    int returns = (wxRichTextObject::ConvertTenthsMMToPixels(ppi, units, scale));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_ConvertTenthsMMToPixels[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_ConvertTenthsMMToPixels(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ConvertTenthsMMToPixels[1] = {{ wxLua_wxRichTextObject_ConvertTenthsMMToPixels, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertTenthsMMToPixels }};
//     int ConvertTenthsMMToPixels(wxDC& dc, int units) const;
static int LUACALL wxLua_wxRichTextObject_ConvertTenthsMMToPixels(lua_State *L)
{
    // int units
    int units = (int)wxlua_getnumbertype(L, 3);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call ConvertTenthsMMToPixels
    int returns = (self->ConvertTenthsMMToPixels(*dc, units));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Copy[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Copy[1] = {{ wxLua_wxRichTextObject_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_Copy }};
//     void Copy(const wxRichTextObject& obj);
static int LUACALL wxLua_wxRichTextObject_Copy(lua_State *L)
{
    // const wxRichTextObject obj
    const wxRichTextObject * obj = (const wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Copy
    self->Copy(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_DeleteRange[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextObject_DeleteRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_DeleteRange[1] = {{ wxLua_wxRichTextObject_DeleteRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_DeleteRange }};
//     virtual bool DeleteRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextObject_DeleteRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call DeleteRange
    bool returns = (self->DeleteRange(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Dereference[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_Dereference(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Dereference[1] = {{ wxLua_wxRichTextObject_Dereference, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_Dereference }};
//     void Dereference();
static int LUACALL wxLua_wxRichTextObject_Dereference(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Dereference
    self->Dereference();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_DoSplit[] = { &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_DoSplit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_DoSplit[1] = {{ wxLua_wxRichTextObject_DoSplit, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_DoSplit }};
//     virtual wxRichTextObject* DoSplit(long pos);
static int LUACALL wxLua_wxRichTextObject_DoSplit(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call DoSplit
    wxRichTextObject* returns = (wxRichTextObject*)self->DoSplit(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Draw[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Draw[1] = {{ wxLua_wxRichTextObject_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextObject_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextObject_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_DrawBorder1[] = { &wxluatype_wxDC, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAttr, &wxluatype_wxTextAttrBorders, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_DrawBorder1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_DrawBorder1[1] = {{ wxLua_wxRichTextObject_DrawBorder1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 5, 6, s_wxluatypeArray_wxLua_wxRichTextObject_DrawBorder1 }};
//     %wxchkver_3_1_0  static bool DrawBorder(wxDC& dc, wxRichTextBuffer* buffer, const wxRichTextAttr& attr, const wxTextAttrBorders& borders, const wxRect& rect, int flags = 0);
static int LUACALL wxLua_wxRichTextObject_DrawBorder1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxTextAttrBorders borders
    const wxTextAttrBorders * borders = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttrBorders);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawBorder
    bool returns = (wxRichTextObject::DrawBorder(*dc, buffer, *attr, *borders, *rect, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_DrawBorder[] = { &wxluatype_wxDC, &wxluatype_wxRichTextBuffer, &wxluatype_wxTextAttrBorders, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_DrawBorder(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_DrawBorder[1] = {{ wxLua_wxRichTextObject_DrawBorder, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 5, s_wxluatypeArray_wxLua_wxRichTextObject_DrawBorder }};
//     !%wxchkver_3_1_0 static bool DrawBorder(wxDC& dc, wxRichTextBuffer* buffer, const wxTextAttrBorders& attr, const wxRect& rect, int flags = 0);
static int LUACALL wxLua_wxRichTextObject_DrawBorder(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // const wxTextAttrBorders attr
    const wxTextAttrBorders * attr = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorders);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawBorder
    bool returns = (wxRichTextObject::DrawBorder(*dc, buffer, *attr, *rect, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_DrawBoxAttributes[] = { &wxluatype_wxDC, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_DrawBoxAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_DrawBoxAttributes[1] = {{ wxLua_wxRichTextObject_DrawBoxAttributes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 6, s_wxluatypeArray_wxLua_wxRichTextObject_DrawBoxAttributes }};
//     static bool DrawBoxAttributes(wxDC& dc, wxRichTextBuffer* buffer, const wxRichTextAttr& attr, const wxRect& boxRect, int flags = 0, wxRichTextObject* obj = NULL);
static int LUACALL wxLua_wxRichTextObject_DrawBoxAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject obj = NULL
    wxRichTextObject * obj = (argCount >= 6 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject) : NULL);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // const wxRect boxRect
    const wxRect * boxRect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call DrawBoxAttributes
    bool returns = (wxRichTextObject::DrawBoxAttributes(*dc, buffer, *attr, *boxRect, flags, obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Dump[] = { &wxluatype_wxRichTextObject, &wxluatype_wxTextOutputStream, NULL };
static int LUACALL wxLua_wxRichTextObject_Dump(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Dump[1] = {{ wxLua_wxRichTextObject_Dump, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_Dump }};
//     virtual void Dump(wxTextOutputStream& stream);
static int LUACALL wxLua_wxRichTextObject_Dump(lua_State *L)
{
    // wxTextOutputStream stream
    wxTextOutputStream * stream = (wxTextOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextOutputStream);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Dump
    self->Dump(*stream);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_EditProperties[] = { &wxluatype_wxRichTextObject, &wxluatype_wxWindow, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextObject_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_EditProperties[1] = {{ wxLua_wxRichTextObject_EditProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_EditProperties }};
//     virtual bool EditProperties(wxWindow* parent, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextObject_EditProperties(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextBuffer);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call EditProperties
    bool returns = (self->EditProperties(parent, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_ExportXML1[] = { &wxluatype_wxRichTextObject, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextObject_ExportXML1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ExportXML1[1] = {{ wxLua_wxRichTextObject_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ExportXML1 }};
//     virtual bool ExportXML(wxXmlNode* parent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextObject_ExportXML1(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode parent
    wxXmlNode * parent = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call ExportXML
    bool returns = (self->ExportXML(parent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_ExportXML[] = { &wxluatype_wxRichTextObject, &wxluatype_wxOutputStream, &wxluatype_TNUMBER, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextObject_ExportXML(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ExportXML[1] = {{ wxLua_wxRichTextObject_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextObject_ExportXML }};
//     virtual bool ExportXML(wxOutputStream& stream, int indent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextObject_ExportXML(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 3);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call ExportXML
    bool returns = (self->ExportXML(*stream, indent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_FindPosition[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextObject_FindPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_FindPosition[1] = {{ wxLua_wxRichTextObject_FindPosition, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextObject_FindPosition }};
//     virtual bool FindPosition(wxDC& dc, wxRichTextDrawingContext& context, long index, wxPoint& pt, int* height, bool forceLineStart);
static int LUACALL wxLua_wxRichTextObject_FindPosition(lua_State *L)
{
    // bool forceLineStart
    bool forceLineStart = wxlua_getbooleantype(L, 7);
    // int height
    int * height = (int *)wxlua_touserdata(L, 6);
    // wxPoint pt
    wxPoint * pt = (wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint);
    // long index
    long index = (long)wxlua_getnumbertype(L, 4);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call FindPosition
    bool returns = (self->FindPosition(*dc, *context, index, *pt, height, forceLineStart));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetAbsolutePosition[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetAbsolutePosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetAbsolutePosition[1] = {{ wxLua_wxRichTextObject_GetAbsolutePosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetAbsolutePosition }};
//     virtual wxPoint GetAbsolutePosition() const;
static int LUACALL wxLua_wxRichTextObject_GetAbsolutePosition(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetAbsolutePosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetAbsolutePosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetAttributes1[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetAttributes1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetAttributes1[1] = {{ wxLua_wxRichTextObject_GetAttributes1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetAttributes1 }};
//     wxRichTextAttr& GetAttributes();
static int LUACALL wxLua_wxRichTextObject_GetAttributes1(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetAttributes
    wxRichTextAttr* returns = (wxRichTextAttr*)&self->GetAttributes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetAttributes[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetAttributes(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetAttributes[1] = {{ wxLua_wxRichTextObject_GetAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetAttributes }};
//     const wxRichTextAttr& GetAttributes() const;
static int LUACALL wxLua_wxRichTextObject_GetAttributes(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetAttributes
    const wxRichTextAttr* returns = (const wxRichTextAttr*)&self->GetAttributes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetAvailableContentArea[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextObject_GetAvailableContentArea(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetAvailableContentArea[1] = {{ wxLua_wxRichTextObject_GetAvailableContentArea, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextObject_GetAvailableContentArea }};
//     virtual wxRect GetAvailableContentArea(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& outerRect) const;
static int LUACALL wxLua_wxRichTextObject_GetAvailableContentArea(lua_State *L)
{
    // const wxRect outerRect
    const wxRect * outerRect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetAvailableContentArea
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetAvailableContentArea(*dc, *context, *outerRect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetBestSize[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetBestSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetBestSize[1] = {{ wxLua_wxRichTextObject_GetBestSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetBestSize }};
//     virtual wxSize GetBestSize() const;
static int LUACALL wxLua_wxRichTextObject_GetBestSize(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetBestSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetBestSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetBottomMargin[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetBottomMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetBottomMargin[1] = {{ wxLua_wxRichTextObject_GetBottomMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetBottomMargin }};
//     virtual int GetBottomMargin() const;
static int LUACALL wxLua_wxRichTextObject_GetBottomMargin(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetBottomMargin
    int returns = (self->GetBottomMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetBoxRects[] = { &wxluatype_wxDC, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextObject_GetBoxRects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetBoxRects[1] = {{ wxLua_wxRichTextObject_GetBoxRects, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 8, 8, s_wxluatypeArray_wxLua_wxRichTextObject_GetBoxRects }};
//     static bool GetBoxRects(wxDC& dc, wxRichTextBuffer* buffer, const wxRichTextAttr& attr, wxRect& marginRect, wxRect& borderRect, wxRect& contentRect, wxRect& paddingRect, wxRect& outlineRect);
static int LUACALL wxLua_wxRichTextObject_GetBoxRects(lua_State *L)
{
    // wxRect outlineRect
    wxRect * outlineRect = (wxRect *)wxluaT_getuserdatatype(L, 8, wxluatype_wxRect);
    // wxRect paddingRect
    wxRect * paddingRect = (wxRect *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRect);
    // wxRect contentRect
    wxRect * contentRect = (wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // wxRect borderRect
    wxRect * borderRect = (wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // wxRect marginRect
    wxRect * marginRect = (wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetBoxRects
    bool returns = (wxRichTextObject::GetBoxRects(*dc, buffer, *attr, *marginRect, *borderRect, *contentRect, *paddingRect, *outlineRect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetBuffer[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetBuffer[1] = {{ wxLua_wxRichTextObject_GetBuffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetBuffer }};
//     wxRichTextBuffer* GetBuffer() const;
static int LUACALL wxLua_wxRichTextObject_GetBuffer(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetBuffer
    wxRichTextBuffer* returns = (wxRichTextBuffer*)self->GetBuffer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetCachedSize[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetCachedSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetCachedSize[1] = {{ wxLua_wxRichTextObject_GetCachedSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetCachedSize }};
//     virtual wxSize GetCachedSize() const;
static int LUACALL wxLua_wxRichTextObject_GetCachedSize(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetCachedSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetCachedSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetContainer[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetContainer[1] = {{ wxLua_wxRichTextObject_GetContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetContainer }};
//     virtual wxRichTextParagraphLayoutBox* GetContainer() const;
static int LUACALL wxLua_wxRichTextObject_GetContainer(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetContainer
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->GetContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetDescent[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetDescent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetDescent[1] = {{ wxLua_wxRichTextObject_GetDescent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetDescent }};
//     int GetDescent() const;
static int LUACALL wxLua_wxRichTextObject_GetDescent(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetDescent
    int returns = (self->GetDescent());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetFloatDirection[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetFloatDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetFloatDirection[1] = {{ wxLua_wxRichTextObject_GetFloatDirection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetFloatDirection }};
//     virtual int GetFloatDirection() const;
static int LUACALL wxLua_wxRichTextObject_GetFloatDirection(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetFloatDirection
    int returns = (self->GetFloatDirection());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetLeftMargin[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetLeftMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetLeftMargin[1] = {{ wxLua_wxRichTextObject_GetLeftMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetLeftMargin }};
//     virtual int GetLeftMargin() const;
static int LUACALL wxLua_wxRichTextObject_GetLeftMargin(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetLeftMargin
    int returns = (self->GetLeftMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetMaxSize[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetMaxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetMaxSize[1] = {{ wxLua_wxRichTextObject_GetMaxSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetMaxSize }};
//     virtual wxSize GetMaxSize() const;
static int LUACALL wxLua_wxRichTextObject_GetMaxSize(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetMaxSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetMaxSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetMinSize[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetMinSize[1] = {{ wxLua_wxRichTextObject_GetMinSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetMinSize }};
//     virtual wxSize GetMinSize() const;
static int LUACALL wxLua_wxRichTextObject_GetMinSize(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetMinSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetMinSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetName[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetName[1] = {{ wxLua_wxRichTextObject_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetName }};
//     wxString GetName() const;
static int LUACALL wxLua_wxRichTextObject_GetName(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetNaturalSize[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetNaturalSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetNaturalSize[1] = {{ wxLua_wxRichTextObject_GetNaturalSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetNaturalSize }};
//     virtual wxTextAttrSize GetNaturalSize() const;
static int LUACALL wxLua_wxRichTextObject_GetNaturalSize(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetNaturalSize
    // allocate a new object using the copy constructor
    wxTextAttrSize* returns = new wxTextAttrSize(self->GetNaturalSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRange1[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetOwnRange1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetOwnRange1[1] = {{ wxLua_wxRichTextObject_GetOwnRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRange1 }};
//     wxRichTextRange& GetOwnRange();
static int LUACALL wxLua_wxRichTextObject_GetOwnRange1(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetOwnRange
    wxRichTextRange* returns = (wxRichTextRange*)&self->GetOwnRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRange[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetOwnRange(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetOwnRange[1] = {{ wxLua_wxRichTextObject_GetOwnRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRange }};
//     const wxRichTextRange& GetOwnRange() const;
static int LUACALL wxLua_wxRichTextObject_GetOwnRange(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetOwnRange
    const wxRichTextRange* returns = (const wxRichTextRange*)&self->GetOwnRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRangeIfTopLevel[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetOwnRangeIfTopLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetOwnRangeIfTopLevel[1] = {{ wxLua_wxRichTextObject_GetOwnRangeIfTopLevel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRangeIfTopLevel }};
//     wxRichTextRange GetOwnRangeIfTopLevel() const;
static int LUACALL wxLua_wxRichTextObject_GetOwnRangeIfTopLevel(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetOwnRangeIfTopLevel
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->GetOwnRangeIfTopLevel());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetParent[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetParent[1] = {{ wxLua_wxRichTextObject_GetParent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetParent }};
//     virtual wxRichTextObject* GetParent() const;
static int LUACALL wxLua_wxRichTextObject_GetParent(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetParent
    wxRichTextObject* returns = (wxRichTextObject*)self->GetParent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetParentContainer[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetParentContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetParentContainer[1] = {{ wxLua_wxRichTextObject_GetParentContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetParentContainer }};
//     virtual wxRichTextParagraphLayoutBox* GetParentContainer() const;
static int LUACALL wxLua_wxRichTextObject_GetParentContainer(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetParentContainer
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->GetParentContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetPosition[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetPosition[1] = {{ wxLua_wxRichTextObject_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetPosition }};
//     virtual wxPoint GetPosition() const;
static int LUACALL wxLua_wxRichTextObject_GetPosition(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetProperties1[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetProperties1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetProperties1[1] = {{ wxLua_wxRichTextObject_GetProperties1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetProperties1 }};
//     const wxRichTextProperties& GetProperties() const;
static int LUACALL wxLua_wxRichTextObject_GetProperties1(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetProperties
    const wxRichTextProperties* returns = (const wxRichTextProperties*)&self->GetProperties();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetProperties[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetProperties(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetProperties[1] = {{ wxLua_wxRichTextObject_GetProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetProperties }};
//     wxRichTextProperties& GetProperties();
static int LUACALL wxLua_wxRichTextObject_GetProperties(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetProperties
    wxRichTextProperties* returns = (wxRichTextProperties*)&self->GetProperties();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextObject_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel() const;
static int LUACALL wxLua_wxRichTextObject_GetPropertiesMenuLabel(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetRange1[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetRange1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetRange1[1] = {{ wxLua_wxRichTextObject_GetRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetRange1 }};
//     wxRichTextRange& GetRange();
static int LUACALL wxLua_wxRichTextObject_GetRange1(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetRange
    wxRichTextRange* returns = (wxRichTextRange*)&self->GetRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetRange[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetRange(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetRange[1] = {{ wxLua_wxRichTextObject_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetRange }};
//     const wxRichTextRange& GetRange() const;
static int LUACALL wxLua_wxRichTextObject_GetRange(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetRange
    const wxRichTextRange* returns = (const wxRichTextRange*)&self->GetRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetRangeSize[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextObject_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetRangeSize[1] = {{ wxLua_wxRichTextObject_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextObject_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextObject_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetRect[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetRect[1] = {{ wxLua_wxRichTextObject_GetRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetRect }};
//     virtual wxRect GetRect() const;
static int LUACALL wxLua_wxRichTextObject_GetRect(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetRightMargin[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetRightMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetRightMargin[1] = {{ wxLua_wxRichTextObject_GetRightMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetRightMargin }};
//     virtual int GetRightMargin() const;
static int LUACALL wxLua_wxRichTextObject_GetRightMargin(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetRightMargin
    int returns = (self->GetRightMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetSelection[] = { &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetSelection[1] = {{ wxLua_wxRichTextObject_GetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_GetSelection }};
//     virtual wxRichTextSelection GetSelection(long start, long end) const;
static int LUACALL wxLua_wxRichTextObject_GetSelection(lua_State *L)
{
    // long end
    long end = (long)wxlua_getnumbertype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetSelection
    // allocate a new object using the copy constructor
    wxRichTextSelection* returns = new wxRichTextSelection(self->GetSelection(start, end));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextSelection);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextSelection);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetTextForRange[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextObject_GetTextForRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetTextForRange[1] = {{ wxLua_wxRichTextObject_GetTextForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_GetTextForRange }};
//     virtual wxString GetTextForRange(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextObject_GetTextForRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetTextForRange
    wxString returns = (self->GetTextForRange(*range));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetTopMargin[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetTopMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetTopMargin[1] = {{ wxLua_wxRichTextObject_GetTopMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetTopMargin }};
//     virtual int GetTopMargin() const;
static int LUACALL wxLua_wxRichTextObject_GetTopMargin(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetTopMargin
    int returns = (self->GetTopMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetTotalMargin[] = { &wxluatype_wxDC, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAttr, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextObject_GetTotalMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetTotalMargin[1] = {{ wxLua_wxRichTextObject_GetTotalMargin, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 7, 7, s_wxluatypeArray_wxLua_wxRichTextObject_GetTotalMargin }};
//         int& topMargin, int& bottomMargin);
static int LUACALL wxLua_wxRichTextObject_GetTotalMargin(lua_State *L)
{
    // int bottomMargin
    int * bottomMargin = (int *)wxlua_touserdata(L, 7);
    // int topMargin
    int * topMargin = (int *)wxlua_touserdata(L, 6);
    // int rightMargin
    int * rightMargin = (int *)wxlua_touserdata(L, 5);
    // int leftMargin
    int * leftMargin = (int *)wxlua_touserdata(L, 4);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDC);
    // call GetTotalMargin
    bool returns = (wxRichTextObject::GetTotalMargin(*dc, buffer, *attr, *leftMargin, *rightMargin, *topMargin, *bottomMargin));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_GetXMLNodeName[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetXMLNodeName[1] = {{ wxLua_wxRichTextObject_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextObject_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_HandlesChildSelections[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_HandlesChildSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_HandlesChildSelections[1] = {{ wxLua_wxRichTextObject_HandlesChildSelections, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_HandlesChildSelections }};
//     virtual bool HandlesChildSelections() const;
static int LUACALL wxLua_wxRichTextObject_HandlesChildSelections(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call HandlesChildSelections
    bool returns = (self->HandlesChildSelections());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_HitTest[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_HitTest[1] = {{ wxLua_wxRichTextObject_HitTest, WXLUAMETHOD_METHOD, 7, 8, s_wxluatypeArray_wxLua_wxRichTextObject_HitTest }};
//     virtual int HitTest(wxDC& dc, wxRichTextDrawingContext& context, const wxPoint& pt, long& textPosition, wxRichTextObject** obj, wxRichTextObject** contextObj, int flags = 0);
static int LUACALL wxLua_wxRichTextObject_HitTest(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // wxRichTextObject contextObj
    wxRichTextObject ** contextObj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextObject);
    // wxRichTextObject obj
    wxRichTextObject ** obj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject);
    // long textPosition
    long * textPosition = (long *)wxlua_touserdata(L, 5);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call HitTest
    int returns = (self->HitTest(*dc, *context, *pt, *textPosition, obj, contextObj, flags));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_ImportFromXML[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextBuffer, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextObject_ImportFromXML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ImportFromXML[1] = {{ wxLua_wxRichTextObject_ImportFromXML, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextObject_ImportFromXML }};
//     virtual bool ImportFromXML(wxRichTextBuffer* buffer, wxXmlNode* node, wxRichTextXMLHandler* handler, bool* recurse);
static int LUACALL wxLua_wxRichTextObject_ImportFromXML(lua_State *L)
{
    // bool recurse
    bool * recurse = (bool *)wxlua_touserdata(L, 5);
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call ImportFromXML
    bool returns = (self->ImportFromXML(buffer, node, handler, recurse));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Invalidate[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextObject_Invalidate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Invalidate[1] = {{ wxLua_wxRichTextObject_Invalidate, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextObject_Invalidate }};
//     virtual void Invalidate(const wxRichTextRange& invalidRange = wxRICHTEXT_ALL);
static int LUACALL wxLua_wxRichTextObject_Invalidate(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextRange invalidRange = wxRICHTEXT_ALL
    const wxRichTextRange * invalidRange = (argCount >= 2 ? (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange) : &wxRICHTEXT_ALL);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Invalidate
    self->Invalidate(*invalidRange);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_IsAtomic[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_IsAtomic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_IsAtomic[1] = {{ wxLua_wxRichTextObject_IsAtomic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_IsAtomic }};
//     virtual bool IsAtomic() const;
static int LUACALL wxLua_wxRichTextObject_IsAtomic(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call IsAtomic
    bool returns = (self->IsAtomic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_IsComposite[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_IsComposite(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_IsComposite[1] = {{ wxLua_wxRichTextObject_IsComposite, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_IsComposite }};
//     virtual bool IsComposite() const;
static int LUACALL wxLua_wxRichTextObject_IsComposite(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call IsComposite
    bool returns = (self->IsComposite());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_IsEmpty[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_IsEmpty[1] = {{ wxLua_wxRichTextObject_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_IsEmpty }};
//     virtual bool IsEmpty() const;
static int LUACALL wxLua_wxRichTextObject_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_IsFloatable[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_IsFloatable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_IsFloatable[1] = {{ wxLua_wxRichTextObject_IsFloatable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_IsFloatable }};
//     virtual bool IsFloatable() const;
static int LUACALL wxLua_wxRichTextObject_IsFloatable(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call IsFloatable
    bool returns = (self->IsFloatable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_IsFloating[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_IsFloating(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_IsFloating[1] = {{ wxLua_wxRichTextObject_IsFloating, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_IsFloating }};
//     virtual bool IsFloating() const;
static int LUACALL wxLua_wxRichTextObject_IsFloating(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call IsFloating
    bool returns = (self->IsFloating());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_IsShown[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_IsShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_IsShown[1] = {{ wxLua_wxRichTextObject_IsShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_IsShown }};
//     bool IsShown() const;
static int LUACALL wxLua_wxRichTextObject_IsShown(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call IsShown
    bool returns = (self->IsShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_IsTopLevel[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_IsTopLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_IsTopLevel[1] = {{ wxLua_wxRichTextObject_IsTopLevel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_IsTopLevel }};
//     virtual bool IsTopLevel() const;
static int LUACALL wxLua_wxRichTextObject_IsTopLevel(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call IsTopLevel
    bool returns = (self->IsTopLevel());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Layout[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Layout[1] = {{ wxLua_wxRichTextObject_Layout, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextObject_Layout }};
//     virtual bool Layout(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextObject_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 6);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Layout
    bool returns = (self->Layout(*dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_LayoutToBestSize[] = { &wxluatype_wxRichTextObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_LayoutToBestSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_LayoutToBestSize[1] = {{ wxLua_wxRichTextObject_LayoutToBestSize, WXLUAMETHOD_METHOD, 9, 9, s_wxluatypeArray_wxLua_wxRichTextObject_LayoutToBestSize }};
//                     const wxRect& availableParentSpace, const wxRect& availableContainerSpace, int style);
static int LUACALL wxLua_wxRichTextObject_LayoutToBestSize(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 9);
    // const wxRect availableContainerSpace
    const wxRect * availableContainerSpace = (const wxRect *)wxluaT_getuserdatatype(L, 8, wxluatype_wxRect);
    // const wxRect availableParentSpace
    const wxRect * availableParentSpace = (const wxRect *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextAttr);
    // const wxRichTextAttr parentAttr
    const wxRichTextAttr * parentAttr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextAttr);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextBuffer);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call LayoutToBestSize
    bool returns = (self->LayoutToBestSize(*dc, *context, buffer, *parentAttr, *attr, *availableParentSpace, *availableContainerSpace, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Merge[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextObject_Merge(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Merge[1] = {{ wxLua_wxRichTextObject_Merge, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_Merge }};
//     virtual bool Merge(wxRichTextObject* object, wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextObject_Merge(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextObject object
    wxRichTextObject * object = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Merge
    bool returns = (self->Merge(object, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Move[] = { &wxluatype_wxRichTextObject, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextObject_Move(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Move[1] = {{ wxLua_wxRichTextObject_Move, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_Move }};
//     virtual void Move(const wxPoint& pt);
static int LUACALL wxLua_wxRichTextObject_Move(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Move
    self->Move(*pt);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Reference[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_Reference(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Reference[1] = {{ wxLua_wxRichTextObject_Reference, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_Reference }};
//     void Reference();
static int LUACALL wxLua_wxRichTextObject_Reference(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Reference
    self->Reference();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetAttributes[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextObject_SetAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetAttributes[1] = {{ wxLua_wxRichTextObject_SetAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetAttributes }};
//     void SetAttributes(const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextObject_SetAttributes(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetAttributes
    self->SetAttributes(*attr);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetCachedSize[] = { &wxluatype_wxRichTextObject, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextObject_SetCachedSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetCachedSize[1] = {{ wxLua_wxRichTextObject_SetCachedSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetCachedSize }};
//     virtual void SetCachedSize(const wxSize& sz);
static int LUACALL wxLua_wxRichTextObject_SetCachedSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetCachedSize
    self->SetCachedSize(*sz);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetDescent[] = { &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_SetDescent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetDescent[1] = {{ wxLua_wxRichTextObject_SetDescent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetDescent }};
//     void SetDescent(int descent);
static int LUACALL wxLua_wxRichTextObject_SetDescent(lua_State *L)
{
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetDescent
    self->SetDescent(descent);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetMargins1[] = { &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_SetMargins1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetMargins1[1] = {{ wxLua_wxRichTextObject_SetMargins1, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextObject_SetMargins1 }};
//     virtual void SetMargins(int leftMargin, int rightMargin, int topMargin, int bottomMargin);
static int LUACALL wxLua_wxRichTextObject_SetMargins1(lua_State *L)
{
    // int bottomMargin
    int bottomMargin = (int)wxlua_getnumbertype(L, 5);
    // int topMargin
    int topMargin = (int)wxlua_getnumbertype(L, 4);
    // int rightMargin
    int rightMargin = (int)wxlua_getnumbertype(L, 3);
    // int leftMargin
    int leftMargin = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetMargins
    self->SetMargins(leftMargin, rightMargin, topMargin, bottomMargin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetMargins[] = { &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObject_SetMargins(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetMargins[1] = {{ wxLua_wxRichTextObject_SetMargins, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetMargins }};
//     virtual void SetMargins(int margin);
static int LUACALL wxLua_wxRichTextObject_SetMargins(lua_State *L)
{
    // int margin
    int margin = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetMargins
    self->SetMargins(margin);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetMaxSize[] = { &wxluatype_wxRichTextObject, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextObject_SetMaxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetMaxSize[1] = {{ wxLua_wxRichTextObject_SetMaxSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetMaxSize }};
//     virtual void SetMaxSize(const wxSize& sz);
static int LUACALL wxLua_wxRichTextObject_SetMaxSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetMaxSize
    self->SetMaxSize(*sz);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetMinSize[] = { &wxluatype_wxRichTextObject, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextObject_SetMinSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetMinSize[1] = {{ wxLua_wxRichTextObject_SetMinSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetMinSize }};
//     virtual void SetMinSize(const wxSize& sz);
static int LUACALL wxLua_wxRichTextObject_SetMinSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetMinSize
    self->SetMinSize(*sz);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetName[] = { &wxluatype_wxRichTextObject, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextObject_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetName[1] = {{ wxLua_wxRichTextObject_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetName }};
//     void SetName(const wxString& name);
static int LUACALL wxLua_wxRichTextObject_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetName
    self->SetName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetOwnRange[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextObject_SetOwnRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetOwnRange[1] = {{ wxLua_wxRichTextObject_SetOwnRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetOwnRange }};
//     void SetOwnRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextObject_SetOwnRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetOwnRange
    self->SetOwnRange(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetParent[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_SetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetParent[1] = {{ wxLua_wxRichTextObject_SetParent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetParent }};
//     virtual void SetParent(wxRichTextObject* parent);
static int LUACALL wxLua_wxRichTextObject_SetParent(lua_State *L)
{
    // wxRichTextObject parent
    wxRichTextObject * parent = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetParent
    self->SetParent(parent);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetPosition[] = { &wxluatype_wxRichTextObject, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextObject_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetPosition[1] = {{ wxLua_wxRichTextObject_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetPosition }};
//     virtual void SetPosition(const wxPoint& pos);
static int LUACALL wxLua_wxRichTextObject_SetPosition(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetPosition
    self->SetPosition(*pos);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetProperties[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextObject_SetProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetProperties[1] = {{ wxLua_wxRichTextObject_SetProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetProperties }};
//     void SetProperties(const wxRichTextProperties& props);
static int LUACALL wxLua_wxRichTextObject_SetProperties(lua_State *L)
{
    // const wxRichTextProperties props
    const wxRichTextProperties * props = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetProperties
    self->SetProperties(*props);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_SetRange[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextObject_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetRange[1] = {{ wxLua_wxRichTextObject_SetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetRange }};
//     void SetRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextObject_SetRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call SetRange
    self->SetRange(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Show[] = { &wxluatype_wxRichTextObject, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextObject_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Show[1] = {{ wxLua_wxRichTextObject_Show, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_Show }};
//     virtual void Show(bool show);
static int LUACALL wxLua_wxRichTextObject_Show(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Show
    self->Show(show);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_Split[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextObject_Split(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_Split[1] = {{ wxLua_wxRichTextObject_Split, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_Split }};
//     virtual wxRichTextObject* Split(wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextObject_Split(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextDrawingContext);
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call Split
    wxRichTextObject* returns = (wxRichTextObject*)self->Split(*context);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_UsesParagraphAttributes[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObject_UsesParagraphAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_UsesParagraphAttributes[1] = {{ wxLua_wxRichTextObject_UsesParagraphAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_UsesParagraphAttributes }};
//     virtual bool UsesParagraphAttributes() const;
static int LUACALL wxLua_wxRichTextObject_UsesParagraphAttributes(lua_State *L)
{
    // get this
    wxRichTextObject * self = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call UsesParagraphAttributes
    bool returns = (self->UsesParagraphAttributes());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObject_delete[] = { &wxluatype_wxRichTextObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_delete }};




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM_overload[] =
{
    { wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM1 },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObject_ConvertPixelsToTenthsMM, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ConvertTenthsMMToPixels_overload[] =
{
    { wxLua_wxRichTextObject_ConvertTenthsMMToPixels1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertTenthsMMToPixels1 },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObject_ConvertTenthsMMToPixels, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ConvertTenthsMMToPixels },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextObject_ConvertTenthsMMToPixels_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_ConvertTenthsMMToPixels_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_DrawBorder_overload[] =
{

#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObject_DrawBorder1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 5, 6, s_wxluatypeArray_wxLua_wxRichTextObject_DrawBorder1 },
#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObject_DrawBorder, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 5, s_wxluatypeArray_wxLua_wxRichTextObject_DrawBorder },
#endif // ((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextObject_DrawBorder_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_DrawBorder_overload)/sizeof(wxLuaBindCFunc);

#endif // (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_ExportXML_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextObject_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObject_ExportXML1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
    { wxLua_wxRichTextObject_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextObject_ExportXML },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextObject_ExportXML_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_ExportXML_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetAttributes_overload[] =
{
    { wxLua_wxRichTextObject_GetAttributes1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetAttributes1 },
    { wxLua_wxRichTextObject_GetAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetAttributes },
};
static int s_wxluafunc_wxLua_wxRichTextObject_GetAttributes_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_GetAttributes_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetOwnRange_overload[] =
{
    { wxLua_wxRichTextObject_GetOwnRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRange1 },
    { wxLua_wxRichTextObject_GetOwnRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetOwnRange },
};
static int s_wxluafunc_wxLua_wxRichTextObject_GetOwnRange_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_GetOwnRange_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetProperties_overload[] =
{
    { wxLua_wxRichTextObject_GetProperties1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetProperties1 },
    { wxLua_wxRichTextObject_GetProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetProperties },
};
static int s_wxluafunc_wxLua_wxRichTextObject_GetProperties_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_GetProperties_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_GetRange_overload[] =
{
    { wxLua_wxRichTextObject_GetRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetRange1 },
    { wxLua_wxRichTextObject_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObject_GetRange },
};
static int s_wxluafunc_wxLua_wxRichTextObject_GetRange_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_GetRange_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObject_SetMargins_overload[] =
{
    { wxLua_wxRichTextObject_SetMargins1, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextObject_SetMargins1 },
    { wxLua_wxRichTextObject_SetMargins, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObject_SetMargins },
};
static int s_wxluafunc_wxLua_wxRichTextObject_SetMargins_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObject_SetMargins_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextObject_delete_function(void** p)
{
    wxRichTextObject* o = (wxRichTextObject*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextObject_methods[] = {
    { "AcceptsFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_AcceptsFocus, 1, NULL },
    { "AdjustAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_AdjustAttributes, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "AdjustAvailableSpace", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObject_AdjustAvailableSpace, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "CalculateRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_CalculateRange, 1, NULL },
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_CanEditProperties, 1, NULL },
    { "CanMerge", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_CanMerge, 1, NULL },
    { "CanSplit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_CanSplit, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Clone, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "ConvertPixelsToTenthsMM", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM_overload, s_wxluafunc_wxLua_wxRichTextObject_ConvertPixelsToTenthsMM_overload_count, 0 },
    { "ConvertTenthsMMToPixels", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObject_ConvertTenthsMMToPixels_overload, s_wxluafunc_wxLua_wxRichTextObject_ConvertTenthsMMToPixels_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Copy, 1, NULL },
    { "DeleteRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_DeleteRange, 1, NULL },
    { "Dereference", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Dereference, 1, NULL },
    { "DoSplit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_DoSplit, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "DrawBorder", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObject_DrawBorder_overload, s_wxluafunc_wxLua_wxRichTextObject_DrawBorder_overload_count, 0 },
#endif // (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "DrawBoxAttributes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObject_DrawBoxAttributes, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { "Dump", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Dump, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_EditProperties, 1, NULL },

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
    { "ExportXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_ExportXML_overload, s_wxluafunc_wxLua_wxRichTextObject_ExportXML_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_FindPosition, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetAbsolutePosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetAbsolutePosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetAttributes_overload, s_wxluafunc_wxLua_wxRichTextObject_GetAttributes_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetAvailableContentArea", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetAvailableContentArea, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetBestSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetBottomMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetBottomMargin, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBoxRects", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObject_GetBoxRects, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetBuffer, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetCachedSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetCachedSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetContainer, 1, NULL },
    { "GetDescent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetDescent, 1, NULL },
    { "GetFloatDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetFloatDirection, 1, NULL },
    { "GetLeftMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetLeftMargin, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetMaxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetMaxSize, 1, NULL },
    { "GetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetMinSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetName, 1, NULL },
    { "GetNaturalSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetNaturalSize, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetOwnRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetOwnRange_overload, s_wxluafunc_wxLua_wxRichTextObject_GetOwnRange_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetOwnRangeIfTopLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetOwnRangeIfTopLevel, 1, NULL },
    { "GetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetParent, 1, NULL },
    { "GetParentContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetParentContainer, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetProperties_overload, s_wxluafunc_wxLua_wxRichTextObject_GetProperties_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetPropertiesMenuLabel, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetRange_overload, s_wxluafunc_wxLua_wxRichTextObject_GetRange_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRightMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetRightMargin, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetSelection, 1, NULL },
    { "GetTextForRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetTextForRange, 1, NULL },
    { "GetTopMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetTopMargin, 1, NULL },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetTotalMargin", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObject_GetTotalMargin, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_GetXMLNodeName, 1, NULL },
    { "HandlesChildSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_HandlesChildSelections, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_HitTest, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "ImportFromXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_ImportFromXML, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

    { "Invalidate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Invalidate, 1, NULL },
    { "IsAtomic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_IsAtomic, 1, NULL },
    { "IsComposite", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_IsComposite, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_IsEmpty, 1, NULL },
    { "IsFloatable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_IsFloatable, 1, NULL },
    { "IsFloating", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_IsFloating, 1, NULL },
    { "IsShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_IsShown, 1, NULL },
    { "IsTopLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_IsTopLevel, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Layout, 1, NULL },
    { "LayoutToBestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_LayoutToBestSize, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Merge", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Merge, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Move", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Move, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Reference", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Reference, 1, NULL },
    { "SetAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetAttributes, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetCachedSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetCachedSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetDescent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetDescent, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetMargins_overload, s_wxluafunc_wxLua_wxRichTextObject_SetMargins_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetMaxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetMaxSize, 1, NULL },
    { "SetMinSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetMinSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetName, 1, NULL },
    { "SetOwnRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetOwnRange, 1, NULL },
    { "SetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetParent, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetPosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetProperties, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_SetRange, 1, NULL },
    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Show, 1, NULL },
    { "Split", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_Split, 1, NULL },
    { "UsesParagraphAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObject_UsesParagraphAttributes, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextObject_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextObject_methodCount = sizeof(wxRichTextObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextObjectList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextObjectList'
int wxluatype_wxRichTextObjectList = WXLUA_TUNKNOWN;



void wxLua_wxRichTextObjectList_delete_function(void** p)
{
    wxRichTextObjectList* o = (wxRichTextObjectList*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextObjectList_methods[] = {
    { 0, 0, 0, 0 },
};

int wxRichTextObjectList_methodCount = sizeof(wxRichTextObjectList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextCompositeObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextCompositeObject'
int wxluatype_wxRichTextCompositeObject = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_AppendChild[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_AppendChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_AppendChild[1] = {{ wxLua_wxRichTextCompositeObject_AppendChild, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_AppendChild }};
//     size_t AppendChild(wxRichTextObject* child) ;
static int LUACALL wxLua_wxRichTextCompositeObject_AppendChild(lua_State *L)
{
    // wxRichTextObject child
    wxRichTextObject * child = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call AppendChild
    size_t returns = (self->AppendChild(child));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_CalculateRange[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_CalculateRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_CalculateRange[1] = {{ wxLua_wxRichTextCompositeObject_CalculateRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_CalculateRange }};
//     virtual void CalculateRange(long start, long& end);
static int LUACALL wxLua_wxRichTextCompositeObject_CalculateRange(lua_State *L)
{
    // long end
    long * end = (long *)wxlua_touserdata(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call CalculateRange
    self->CalculateRange(start, *end);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Copy[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_Copy[1] = {{ wxLua_wxRichTextCompositeObject_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Copy }};
//     void Copy(const wxRichTextCompositeObject& obj);
static int LUACALL wxLua_wxRichTextCompositeObject_Copy(lua_State *L)
{
    // const wxRichTextCompositeObject obj
    const wxRichTextCompositeObject * obj = (const wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCompositeObject);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call Copy
    self->Copy(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Defragment[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_Defragment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_Defragment[1] = {{ wxLua_wxRichTextCompositeObject_Defragment, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Defragment }};
//     bool Defragment(wxRichTextDrawingContext& context, const wxRichTextRange& range = wxRICHTEXT_ALL);
static int LUACALL wxLua_wxRichTextCompositeObject_Defragment(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextRange range = wxRICHTEXT_ALL
    const wxRichTextRange * range = (argCount >= 3 ? (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange) : &wxRICHTEXT_ALL);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextDrawingContext);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call Defragment
    bool returns = (self->Defragment(*context, *range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_DeleteChildren[] = { &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_DeleteChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_DeleteChildren[1] = {{ wxLua_wxRichTextCompositeObject_DeleteChildren, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_DeleteChildren }};
//     bool DeleteChildren() ;
static int LUACALL wxLua_wxRichTextCompositeObject_DeleteChildren(lua_State *L)
{
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call DeleteChildren
    bool returns = (self->DeleteChildren());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_DeleteRange[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_DeleteRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_DeleteRange[1] = {{ wxLua_wxRichTextCompositeObject_DeleteRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_DeleteRange }};
//     virtual bool DeleteRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextCompositeObject_DeleteRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call DeleteRange
    bool returns = (self->DeleteRange(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Dump[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxTextOutputStream, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_Dump(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_Dump[1] = {{ wxLua_wxRichTextCompositeObject_Dump, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Dump }};
//     virtual void Dump(wxTextOutputStream& stream);
static int LUACALL wxLua_wxRichTextCompositeObject_Dump(lua_State *L)
{
    // wxTextOutputStream stream
    wxTextOutputStream * stream = (wxTextOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextOutputStream);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call Dump
    self->Dump(*stream);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_FindPosition[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_FindPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_FindPosition[1] = {{ wxLua_wxRichTextCompositeObject_FindPosition, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_FindPosition }};
//     virtual bool FindPosition(wxDC& dc, wxRichTextDrawingContext& context, long index, wxPoint& pt, int* height, bool forceLineStart);
static int LUACALL wxLua_wxRichTextCompositeObject_FindPosition(lua_State *L)
{
    // bool forceLineStart
    bool forceLineStart = wxlua_getbooleantype(L, 7);
    // int height
    int * height = (int *)wxlua_touserdata(L, 6);
    // wxPoint pt
    wxPoint * pt = (wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint);
    // long index
    long index = (long)wxlua_getnumbertype(L, 4);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call FindPosition
    bool returns = (self->FindPosition(*dc, *context, index, *pt, height, forceLineStart));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChild[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_GetChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChild[1] = {{ wxLua_wxRichTextCompositeObject_GetChild, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChild }};
//     wxRichTextObject* GetChild(size_t n) const ;
static int LUACALL wxLua_wxRichTextCompositeObject_GetChild(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call GetChild
    wxRichTextObject* returns = (wxRichTextObject*)self->GetChild(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChildAtPosition[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_GetChildAtPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChildAtPosition[1] = {{ wxLua_wxRichTextCompositeObject_GetChildAtPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChildAtPosition }};
//     virtual wxRichTextObject* GetChildAtPosition(long pos) const;
static int LUACALL wxLua_wxRichTextCompositeObject_GetChildAtPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call GetChildAtPosition
    wxRichTextObject* returns = (wxRichTextObject*)self->GetChildAtPosition(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChildCount[] = { &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_GetChildCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChildCount[1] = {{ wxLua_wxRichTextCompositeObject_GetChildCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChildCount }};
//     size_t GetChildCount() const ;
static int LUACALL wxLua_wxRichTextCompositeObject_GetChildCount(lua_State *L)
{
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call GetChildCount
    size_t returns = (self->GetChildCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChildren[] = { &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_GetChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChildren[1] = {{ wxLua_wxRichTextCompositeObject_GetChildren, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetChildren }};
//     wxRichTextObjectList& GetChildren();
static int LUACALL wxLua_wxRichTextCompositeObject_GetChildren(lua_State *L)
{
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call GetChildren
    wxRichTextObjectList* returns = (wxRichTextObjectList*)&self->GetChildren();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectList);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetRangeSize[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_GetRangeSize[1] = {{ wxLua_wxRichTextCompositeObject_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextCompositeObject_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetTextForRange[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_GetTextForRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_GetTextForRange[1] = {{ wxLua_wxRichTextCompositeObject_GetTextForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_GetTextForRange }};
//     virtual wxString GetTextForRange(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextCompositeObject_GetTextForRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call GetTextForRange
    wxString returns = (self->GetTextForRange(*range));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_HitTest[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_HitTest[1] = {{ wxLua_wxRichTextCompositeObject_HitTest, WXLUAMETHOD_METHOD, 7, 8, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_HitTest }};
//     virtual int HitTest(wxDC& dc, wxRichTextDrawingContext& context, const wxPoint& pt, long& textPosition, wxRichTextObject** obj, wxRichTextObject** contextObj, int flags = 0);
static int LUACALL wxLua_wxRichTextCompositeObject_HitTest(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // wxRichTextObject contextObj
    wxRichTextObject ** contextObj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextObject);
    // wxRichTextObject obj
    wxRichTextObject ** obj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject);
    // long textPosition
    long * textPosition = (long *)wxlua_touserdata(L, 5);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call HitTest
    int returns = (self->HitTest(*dc, *context, *pt, *textPosition, obj, contextObj, flags));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_InsertChild[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_InsertChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_InsertChild[1] = {{ wxLua_wxRichTextCompositeObject_InsertChild, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_InsertChild }};
//     bool InsertChild(wxRichTextObject* child, wxRichTextObject* inFrontOf) ;
static int LUACALL wxLua_wxRichTextCompositeObject_InsertChild(lua_State *L)
{
    // wxRichTextObject inFrontOf
    wxRichTextObject * inFrontOf = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextObject child
    wxRichTextObject * child = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call InsertChild
    bool returns = (self->InsertChild(child, inFrontOf));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Invalidate[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_Invalidate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_Invalidate[1] = {{ wxLua_wxRichTextCompositeObject_Invalidate, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Invalidate }};
//     virtual void Invalidate(const wxRichTextRange& invalidRange = wxRICHTEXT_ALL);
static int LUACALL wxLua_wxRichTextCompositeObject_Invalidate(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextRange invalidRange = wxRICHTEXT_ALL
    const wxRichTextRange * invalidRange = (argCount >= 2 ? (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange) : &wxRICHTEXT_ALL);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call Invalidate
    self->Invalidate(*invalidRange);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_IsAtomic[] = { &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_IsAtomic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_IsAtomic[1] = {{ wxLua_wxRichTextCompositeObject_IsAtomic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_IsAtomic }};
//     virtual bool IsAtomic() const;
static int LUACALL wxLua_wxRichTextCompositeObject_IsAtomic(lua_State *L)
{
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call IsAtomic
    bool returns = (self->IsAtomic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_IsComposite[] = { &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_IsComposite(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_IsComposite[1] = {{ wxLua_wxRichTextCompositeObject_IsComposite, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_IsComposite }};
//     virtual bool IsComposite() const;
static int LUACALL wxLua_wxRichTextCompositeObject_IsComposite(lua_State *L)
{
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call IsComposite
    bool returns = (self->IsComposite());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_IsEmpty[] = { &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_IsEmpty[1] = {{ wxLua_wxRichTextCompositeObject_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_IsEmpty }};
//     virtual bool IsEmpty() const;
static int LUACALL wxLua_wxRichTextCompositeObject_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Move[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_Move(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_Move[1] = {{ wxLua_wxRichTextCompositeObject_Move, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_Move }};
//     virtual void Move(const wxPoint& pt);
static int LUACALL wxLua_wxRichTextCompositeObject_Move(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call Move
    self->Move(*pt);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_RemoveChild[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextObject, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_RemoveChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_RemoveChild[1] = {{ wxLua_wxRichTextCompositeObject_RemoveChild, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_RemoveChild }};
//     bool RemoveChild(wxRichTextObject* child, bool deleteChild = false) ;
static int LUACALL wxLua_wxRichTextCompositeObject_RemoveChild(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteChild = false
    bool deleteChild = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxRichTextObject child
    wxRichTextObject * child = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call RemoveChild
    bool returns = (self->RemoveChild(child, deleteChild));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_delete[] = { &wxluatype_wxRichTextCompositeObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCompositeObject_op_set[] = { &wxluatype_wxRichTextCompositeObject, &wxluatype_wxRichTextCompositeObject, NULL };
static int LUACALL wxLua_wxRichTextCompositeObject_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCompositeObject_op_set[1] = {{ wxLua_wxRichTextCompositeObject_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCompositeObject_op_set }};
//     void operator= (const wxRichTextCompositeObject& obj);
static int LUACALL wxLua_wxRichTextCompositeObject_op_set(lua_State *L)
{
    // const wxRichTextCompositeObject obj
    const wxRichTextCompositeObject * obj = (const wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCompositeObject);
    // get this
    wxRichTextCompositeObject * self = (wxRichTextCompositeObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCompositeObject);
    // call op_set
    (*self)=(*obj);

    return 0;
}




void wxLua_wxRichTextCompositeObject_delete_function(void** p)
{
    wxRichTextCompositeObject* o = (wxRichTextCompositeObject*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextCompositeObject_methods[] = {
    { "AppendChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_AppendChild, 1, NULL },
    { "CalculateRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_CalculateRange, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_Copy, 1, NULL },
    { "Defragment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_Defragment, 1, NULL },
    { "DeleteChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_DeleteChildren, 1, NULL },
    { "DeleteRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_DeleteRange, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { "Dump", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_Dump, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_FindPosition, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChild, 1, NULL },
    { "GetChildAtPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChildAtPosition, 1, NULL },
    { "GetChildCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChildCount, 1, NULL },
    { "GetChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_GetChildren, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetTextForRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_GetTextForRange, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_HitTest, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "InsertChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_InsertChild, 1, NULL },
    { "Invalidate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_Invalidate, 1, NULL },
    { "IsAtomic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_IsAtomic, 1, NULL },
    { "IsComposite", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_IsComposite, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_IsEmpty, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Move", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_Move, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "RemoveChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_RemoveChild, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextCompositeObject_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCompositeObject_op_set, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextCompositeObject_methodCount = sizeof(wxRichTextCompositeObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextParagraphLayoutBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextParagraphLayoutBox'
int wxluatype_wxRichTextParagraphLayoutBox = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AcceptsFocus[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AcceptsFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AcceptsFocus[1] = {{ wxLua_wxRichTextParagraphLayoutBox_AcceptsFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AcceptsFocus }};
//     virtual bool AcceptsFocus() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AcceptsFocus(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call AcceptsFocus
    bool returns = (self->AcceptsFocus());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AddImage[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxImage, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AddImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AddImage[1] = {{ wxLua_wxRichTextParagraphLayoutBox_AddImage, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AddImage }};
//     virtual wxRichTextRange AddImage(const wxImage& image, wxRichTextAttr* paraStyle = NULL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AddImage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr paraStyle = NULL
    wxRichTextAttr * paraStyle = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call AddImage
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->AddImage(*image, paraStyle));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AddParagraph[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TSTRING, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AddParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AddParagraph[1] = {{ wxLua_wxRichTextParagraphLayoutBox_AddParagraph, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AddParagraph }};
//     virtual wxRichTextRange AddParagraph(const wxString& text, wxRichTextAttr* paraStyle = NULL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AddParagraph(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr paraStyle = NULL
    wxRichTextAttr * paraStyle = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call AddParagraph
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->AddParagraph(text, paraStyle));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AddParagraphs[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TSTRING, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AddParagraphs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AddParagraphs[1] = {{ wxLua_wxRichTextParagraphLayoutBox_AddParagraphs, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_AddParagraphs }};
//     virtual wxRichTextRange AddParagraphs(const wxString& text, wxRichTextAttr* paraStyle = NULL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_AddParagraphs(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr paraStyle = NULL
    wxRichTextAttr * paraStyle = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call AddParagraphs
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->AddParagraphs(text, paraStyle));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ApplyStyleSheet[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ApplyStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ApplyStyleSheet[1] = {{ wxLua_wxRichTextParagraphLayoutBox_ApplyStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ApplyStyleSheet }};
//     virtual bool ApplyStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ApplyStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call ApplyStyleSheet
    bool returns = (self->ApplyStyleSheet(styleSheet));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Clear[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Clear[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Clear }};
//     virtual void Clear();
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Clear(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ClearListStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ClearListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ClearListStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_ClearListStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ClearListStyle }};
//     virtual bool ClearListStyle(const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ClearListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call ClearListStyle
    bool returns = (self->ClearListStyle(*range, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Clone[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Clone[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Clone(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_CollectStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_CollectStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_CollectStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_CollectStyle, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_CollectStyle }};
//     bool CollectStyle(wxRichTextAttr& currentStyle, const wxRichTextAttr& style, wxRichTextAttr& clashingAttr, wxRichTextAttr& absentAttr);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_CollectStyle(lua_State *L)
{
    // wxRichTextAttr absentAttr
    wxRichTextAttr * absentAttr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextAttr);
    // wxRichTextAttr clashingAttr
    wxRichTextAttr * clashingAttr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextAttr currentStyle
    wxRichTextAttr * currentStyle = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call CollectStyle
    bool returns = (self->CollectStyle(*currentStyle, *style, *clashingAttr, *absentAttr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Copy[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Copy[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Copy }};
//     void Copy(const wxRichTextParagraphLayoutBox& obj);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Copy(lua_State *L)
{
    // const wxRichTextParagraphLayoutBox obj
    const wxRichTextParagraphLayoutBox * obj = (const wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Copy
    self->Copy(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_CopyFragment[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_CopyFragment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_CopyFragment[1] = {{ wxLua_wxRichTextParagraphLayoutBox_CopyFragment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_CopyFragment }};
//     virtual bool CopyFragment(const wxRichTextRange& range, wxRichTextParagraphLayoutBox& fragment);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_CopyFragment(lua_State *L)
{
    // wxRichTextParagraphLayoutBox fragment
    wxRichTextParagraphLayoutBox * fragment = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call CopyFragment
    bool returns = (self->CopyFragment(*range, *fragment));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DeleteRange[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DeleteRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DeleteRange[1] = {{ wxLua_wxRichTextParagraphLayoutBox_DeleteRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DeleteRange }};
//     virtual bool DeleteRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DeleteRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call DeleteRange
    bool returns = (self->DeleteRange(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo }};
//     bool DeleteRangeWithUndo(const wxRichTextRange& range, wxRichTextCtrl* ctrl, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextBuffer);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextCtrl);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call DeleteRangeWithUndo
    bool returns = (self->DeleteRangeWithUndo(*range, ctrl, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DoGetStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DoGetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DoGetStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_DoGetStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DoGetStyle }};
//     virtual bool DoGetStyle(long position, wxRichTextAttr& style, bool combineStyles = true);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DoGetStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool combineStyles = true
    bool combineStyles = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // wxRichTextAttr style
    wxRichTextAttr * style = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call DoGetStyle
    bool returns = (self->DoGetStyle(position, *style, combineStyles));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DoInvalidate[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DoInvalidate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DoInvalidate[1] = {{ wxLua_wxRichTextParagraphLayoutBox_DoInvalidate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DoInvalidate }};
//     virtual void DoInvalidate(const wxRichTextRange& invalidRange);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DoInvalidate(lua_State *L)
{
    // const wxRichTextRange invalidRange
    const wxRichTextRange * invalidRange = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call DoInvalidate
    self->DoInvalidate(*invalidRange);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DoNumberList[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DoNumberList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DoNumberList[1] = {{ wxLua_wxRichTextParagraphLayoutBox_DoNumberList, WXLUAMETHOD_METHOD, 5, 8, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DoNumberList }};
//     virtual bool DoNumberList(const wxRichTextRange& range, const wxRichTextRange& promotionRange, int promoteBy, wxRichTextListStyleDefinition* def, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DoNumberList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextListStyleDefinition def
    wxRichTextListStyleDefinition * def = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextListStyleDefinition);
    // int promoteBy
    int promoteBy = (int)wxlua_getnumbertype(L, 4);
    // const wxRichTextRange promotionRange
    const wxRichTextRange * promotionRange = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call DoNumberList
    bool returns = (self->DoNumberList(*range, *promotionRange, promoteBy, def, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Draw[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Draw[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DrawFloats[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DrawFloats(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DrawFloats[1] = {{ wxLua_wxRichTextParagraphLayoutBox_DrawFloats, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_DrawFloats }};
//     void DrawFloats(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_DrawFloats(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call DrawFloats
    self->DrawFloats(*dc, *context, *range, *selection, *rect, descent, style);

    return 0;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ExportXML1[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ExportXML1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ExportXML1[1] = {{ wxLua_wxRichTextParagraphLayoutBox_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ExportXML1 }};
//     virtual bool ExportXML(wxXmlNode* parent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ExportXML1(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode parent
    wxXmlNode * parent = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call ExportXML
    bool returns = (self->ExportXML(parent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ExportXML[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxOutputStream, &wxluatype_TNUMBER, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ExportXML(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ExportXML[1] = {{ wxLua_wxRichTextParagraphLayoutBox_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ExportXML }};
//     virtual bool ExportXML(wxOutputStream& stream, int indent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ExportXML(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 3);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call ExportXML
    bool returns = (self->ExportXML(*stream, indent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_FindNextParagraphNumber[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_FindNextParagraphNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_FindNextParagraphNumber[1] = {{ wxLua_wxRichTextParagraphLayoutBox_FindNextParagraphNumber, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_FindNextParagraphNumber }};
//     virtual bool FindNextParagraphNumber(wxRichTextParagraph* previousParagraph, wxRichTextAttr& attr) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_FindNextParagraphNumber(lua_State *L)
{
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextParagraph previousParagraph
    wxRichTextParagraph * previousParagraph = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call FindNextParagraphNumber
    bool returns = (self->FindNextParagraphNumber(previousParagraph, *attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetBasicStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetBasicStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetBasicStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetBasicStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetBasicStyle }};
//     virtual const wxRichTextAttr& GetBasicStyle() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetBasicStyle(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetBasicStyle
    const wxRichTextAttr* returns = (const wxRichTextAttr*)&self->GetBasicStyle();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetDefaultStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetDefaultStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetDefaultStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetDefaultStyle }};
//     virtual const wxRichTextAttr& GetDefaultStyle() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetDefaultStyle(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetDefaultStyle
    const wxRichTextAttr* returns = (const wxRichTextAttr*)&self->GetDefaultStyle();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjectCount[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjectCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjectCount[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjectCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjectCount }};
//     int GetFloatingObjectCount() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjectCount(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetFloatingObjectCount
    int returns = (self->GetFloatingObjectCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextObjectList, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects }};
// %override wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects
// C++: bool GetFloatingObjects(wxRichTextObjectList& objects) const;
// Lua: %override [bool, wxRichTextObjectList]GetFloatingObjects();
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // allocate a new object
    wxRichTextObjectList *objects = new wxRichTextObjectList();
    // call GetFloatingObjects
    bool returns = (self->GetFloatingObjects(*objects));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, objects, wxluatype_wxRichTextObjectList);
    // push the result datatype
    wxluaT_pushuserdatatype(L, objects, wxluatype_wxRichTextObjectList);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetInvalidRange[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetInvalidRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetInvalidRange[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetInvalidRange, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetInvalidRange }};
//     wxRichTextRange GetInvalidRange(bool wholeParagraphs = false) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetInvalidRange(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool wholeParagraphs = false
    bool wholeParagraphs = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetInvalidRange
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->GetInvalidRange(wholeParagraphs));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition }};
//     virtual wxRichTextObject* GetLeafObjectAtPosition(long position) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetLeafObjectAtPosition
    wxRichTextObject* returns = (wxRichTextObject*)self->GetLeafObjectAtPosition(position);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineAtPosition[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineAtPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineAtPosition[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetLineAtPosition, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineAtPosition }};
//     virtual wxRichTextLine* GetLineAtPosition(long pos, bool caretPosition = false) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineAtPosition(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool caretPosition = false
    bool caretPosition = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetLineAtPosition
    wxRichTextLine* returns = (wxRichTextLine*)self->GetLineAtPosition(pos, caretPosition);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineAtYPosition[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineAtYPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineAtYPosition[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetLineAtYPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineAtYPosition }};
//     virtual wxRichTextLine* GetLineAtYPosition(int y) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineAtYPosition(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetLineAtYPosition
    wxRichTextLine* returns = (wxRichTextLine*)self->GetLineAtYPosition(y);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineCount[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineCount[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetLineCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineCount }};
//     virtual int GetLineCount() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineCount(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetLineCount
    int returns = (self->GetLineCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber }};
//     virtual wxRichTextLine* GetLineForVisibleLineNumber(long lineNumber) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber(lua_State *L)
{
    // long lineNumber
    long lineNumber = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetLineForVisibleLineNumber
    wxRichTextLine* returns = (wxRichTextLine*)self->GetLineForVisibleLineNumber(lineNumber);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition }};
//     virtual wxSize GetLineSizeAtPosition(long pos, bool caretPosition = false) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool caretPosition = false
    bool caretPosition = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetLineSizeAtPosition
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetLineSizeAtPosition(pos, caretPosition));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtLine[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtLine[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtLine, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtLine }};
//     virtual wxRichTextParagraph* GetParagraphAtLine(long paragraphNumber) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtLine(lua_State *L)
{
    // long paragraphNumber
    long paragraphNumber = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetParagraphAtLine
    wxRichTextParagraph* returns = (wxRichTextParagraph*)self->GetParagraphAtLine(paragraphNumber);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraph);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtPosition[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtPosition[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtPosition, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtPosition }};
//     virtual wxRichTextParagraph* GetParagraphAtPosition(long pos, bool caretPosition = false) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtPosition(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool caretPosition = false
    bool caretPosition = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetParagraphAtPosition
    wxRichTextParagraph* returns = (wxRichTextParagraph*)self->GetParagraphAtPosition(pos, caretPosition);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraph);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphCount[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphCount[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetParagraphCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphCount }};
//     virtual int GetParagraphCount() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphCount(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetParagraphCount
    int returns = (self->GetParagraphCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphForLine[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphForLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphForLine[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetParagraphForLine, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphForLine }};
//     virtual wxRichTextParagraph* GetParagraphForLine(wxRichTextLine* line) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphForLine(lua_State *L)
{
    // wxRichTextLine line
    wxRichTextLine * line = (wxRichTextLine *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextLine);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetParagraphForLine
    wxRichTextParagraph* returns = (wxRichTextParagraph*)self->GetParagraphForLine(line);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraph);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphLength[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphLength[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetParagraphLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphLength }};
//     virtual int GetParagraphLength(long paragraphNumber) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphLength(lua_State *L)
{
    // long paragraphNumber
    long paragraphNumber = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetParagraphLength
    int returns = (self->GetParagraphLength(paragraphNumber));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphText[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphText[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetParagraphText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetParagraphText }};
//     virtual wxString GetParagraphText(long paragraphNumber) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetParagraphText(lua_State *L)
{
    // long paragraphNumber
    long paragraphNumber = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetParagraphText
    wxString returns = (self->GetParagraphText(paragraphNumber));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetPartialParagraph[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetPartialParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetPartialParagraph[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetPartialParagraph, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetPartialParagraph }};
//     bool GetPartialParagraph() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetPartialParagraph(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetPartialParagraph
    bool returns = (self->GetPartialParagraph());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetRangeSize[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetRangeSize[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetRichTextCtrl[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetRichTextCtrl[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetRichTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetRichTextCtrl }};
//     wxRichTextCtrl* GetRichTextCtrl() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetRichTextCtrl(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetRichTextCtrl
    wxRichTextCtrl* returns = (wxRichTextCtrl*)self->GetRichTextCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCtrl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyle }};
// %override wxLua_wxRichTextParagraphLayoutBox_GetStyle
// C++: bool GetStyle(long position, wxRichTextAttr& style);
// Lua: %override [bool, wxRichTextAttr] GetStyle(long position)
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyle(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    // call GetStyle
    bool returns = (self->GetStyle(position, *stylep));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph }};
//     wxRichTextAttr GetStyleForNewParagraph(wxRichTextBuffer* buffer, long pos, bool caretPosition = false, bool lookUpNewParaStyle=false) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool lookUpNewParaStyle = false
    bool lookUpNewParaStyle = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // bool caretPosition = false
    bool caretPosition = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetStyleForNewParagraph
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->GetStyleForNewParagraph(buffer, pos, caretPosition, lookUpNewParaStyle));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange }};
// %override wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange
// C++: bool GetStyleForRange(const wxRichTextRange& range, wxRichTextAttr& style);
// Lua: %override [bool, wxRichTextAttr] GetStyleForRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    // call GetStyleForRange
    bool returns = (self->GetStyleForRange(*range, *stylep));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyleSheet[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyleSheet[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetStyleSheet }};
//     virtual wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetText[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetText[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetText }};
//     virtual wxString GetText() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetText(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetTextForRange[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetTextForRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetTextForRange[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetTextForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetTextForRange }};
//     virtual wxString GetTextForRange(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetTextForRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetTextForRange
    wxString returns = (self->GetTextForRange(*range));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle }};
// %override wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle
// C++: bool GetUncombinedStyle(long position, wxRichTextAttr& style);
// Lua: %override [bool, wxRichTextAttr] GetUncombinedStyle(long position);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    // call GetUncombinedStyle
    bool returns = (self->GetUncombinedStyle(position, *stylep));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetVisibleLineNumber[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetVisibleLineNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetVisibleLineNumber[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetVisibleLineNumber, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetVisibleLineNumber }};
//     virtual long GetVisibleLineNumber(long pos, bool caretPosition = false, bool startOfLine = false) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetVisibleLineNumber(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool startOfLine = false
    bool startOfLine = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // bool caretPosition = false
    bool caretPosition = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetVisibleLineNumber
    long returns = (self->GetVisibleLineNumber(pos, caretPosition, startOfLine));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetXMLNodeName[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetXMLNodeName[1] = {{ wxLua_wxRichTextParagraphLayoutBox_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_HasCharacterAttributes[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_HasCharacterAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_HasCharacterAttributes[1] = {{ wxLua_wxRichTextParagraphLayoutBox_HasCharacterAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_HasCharacterAttributes }};
//     virtual bool HasCharacterAttributes(const wxRichTextRange& range, const wxRichTextAttr& style) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_HasCharacterAttributes(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call HasCharacterAttributes
    bool returns = (self->HasCharacterAttributes(*range, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_HasParagraphAttributes[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_HasParagraphAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_HasParagraphAttributes[1] = {{ wxLua_wxRichTextParagraphLayoutBox_HasParagraphAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_HasParagraphAttributes }};
//     virtual bool HasParagraphAttributes(const wxRichTextRange& range, const wxRichTextAttr& style) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_HasParagraphAttributes(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call HasParagraphAttributes
    bool returns = (self->HasParagraphAttributes(*range, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_HitTest[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_HitTest[1] = {{ wxLua_wxRichTextParagraphLayoutBox_HitTest, WXLUAMETHOD_METHOD, 7, 8, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_HitTest }};
//     virtual int HitTest(wxDC& dc, wxRichTextDrawingContext& context, const wxPoint& pt, long& textPosition, wxRichTextObject** obj, wxRichTextObject** contextObj, int flags = 0);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_HitTest(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // wxRichTextObject contextObj
    wxRichTextObject ** contextObj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextObject);
    // wxRichTextObject obj
    wxRichTextObject ** obj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject);
    // long textPosition
    long * textPosition = (long *)wxlua_touserdata(L, 5);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call HitTest
    int returns = (self->HitTest(*dc, *context, *pt, *textPosition, obj, contextObj, flags));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ImportFromXML[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ImportFromXML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ImportFromXML[1] = {{ wxLua_wxRichTextParagraphLayoutBox_ImportFromXML, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ImportFromXML }};
//     virtual bool ImportFromXML(wxRichTextBuffer* buffer, wxXmlNode* node, wxRichTextXMLHandler* handler, bool* recurse);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_ImportFromXML(lua_State *L)
{
    // bool recurse
    bool * recurse = (bool *)wxlua_touserdata(L, 5);
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call ImportFromXML
    bool returns = (self->ImportFromXML(buffer, node, handler, recurse));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Init[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Init[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Init(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertFieldWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertFieldWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertFieldWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InsertFieldWithUndo, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertFieldWithUndo }};
//                                                         const wxRichTextAttr& textAttr);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertFieldWithUndo(lua_State *L)
{
    // const wxRichTextAttr textAttr
    const wxRichTextAttr * textAttr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 8, wxluatype_wxRichTextAttr);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextCtrl);
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextProperties);
    // const wxString fieldType
    const wxString fieldType = wxlua_getwxStringtype(L, 4);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InsertFieldWithUndo
    wxRichTextField* returns = (wxRichTextField*)self->InsertFieldWithUndo(buffer, pos, fieldType, *properties, ctrl, flags, *textAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextField);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertFragment[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertFragment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertFragment[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InsertFragment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertFragment }};
//     virtual bool InsertFragment(long position, wxRichTextParagraphLayoutBox& fragment);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertFragment(lua_State *L)
{
    // wxRichTextParagraphLayoutBox fragment
    wxRichTextParagraphLayoutBox * fragment = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InsertFragment
    bool returns = (self->InsertFragment(position, *fragment));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertImageWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextImageBlock, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertImageWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertImageWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InsertImageWithUndo, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertImageWithUndo }};
//                                                         wxRichTextCtrl* ctrl, int flags, const wxRichTextAttr& textAttr);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertImageWithUndo(lua_State *L)
{
    // const wxRichTextAttr textAttr
    const wxRichTextAttr * textAttr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextAttr);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 6);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextCtrl);
    // const wxRichTextImageBlock imageBlock
    const wxRichTextImageBlock * imageBlock = (const wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextImageBlock);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InsertImageWithUndo
    bool returns = (self->InsertImageWithUndo(buffer, pos, *imageBlock, ctrl, flags, *textAttr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo }};
//     bool InsertNewlineWithUndo(wxRichTextBuffer* buffer, long pos, wxRichTextCtrl* ctrl, int flags = 0);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextCtrl);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InsertNewlineWithUndo
    bool returns = (self->InsertNewlineWithUndo(buffer, pos, ctrl, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertObjectWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertObjectWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertObjectWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InsertObjectWithUndo, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertObjectWithUndo }};
//     wxRichTextObject* InsertObjectWithUndo(wxRichTextBuffer* buffer, long pos, wxRichTextObject *object, wxRichTextCtrl* ctrl, int flags = 0);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertObjectWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextCtrl);
    // wxRichTextObject object
    wxRichTextObject * object = (wxRichTextObject *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextObject);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InsertObjectWithUndo
    wxRichTextObject* returns = (wxRichTextObject*)self->InsertObjectWithUndo(buffer, pos, object, ctrl, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo }};
//     bool InsertParagraphsWithUndo(wxRichTextBuffer* buffer, long pos, const wxRichTextParagraphLayoutBox& paragraphs, wxRichTextCtrl* ctrl, int flags = 0);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextCtrl);
    // const wxRichTextParagraphLayoutBox paragraphs
    const wxRichTextParagraphLayoutBox * paragraphs = (const wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextParagraphLayoutBox);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InsertParagraphsWithUndo
    bool returns = (self->InsertParagraphsWithUndo(buffer, pos, *paragraphs, ctrl, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertTextWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertTextWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertTextWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InsertTextWithUndo, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InsertTextWithUndo }};
//     bool InsertTextWithUndo(wxRichTextBuffer* buffer, long pos, const wxString& text, wxRichTextCtrl* ctrl, int flags = 0);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InsertTextWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextCtrl);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InsertTextWithUndo
    bool returns = (self->InsertTextWithUndo(buffer, pos, text, ctrl, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Invalidate[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Invalidate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Invalidate[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Invalidate, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Invalidate }};
//     virtual void Invalidate(const wxRichTextRange& invalidRange = wxRICHTEXT_ALL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Invalidate(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextRange invalidRange = wxRICHTEXT_ALL
    const wxRichTextRange * invalidRange = (argCount >= 2 ? (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange) : &wxRICHTEXT_ALL);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Invalidate
    self->Invalidate(*invalidRange);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InvalidateHierarchy[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InvalidateHierarchy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InvalidateHierarchy[1] = {{ wxLua_wxRichTextParagraphLayoutBox_InvalidateHierarchy, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_InvalidateHierarchy }};
//     virtual void InvalidateHierarchy(const wxRichTextRange& invalidRange = wxRICHTEXT_ALL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_InvalidateHierarchy(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextRange invalidRange = wxRICHTEXT_ALL
    const wxRichTextRange * invalidRange = (argCount >= 2 ? (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange) : &wxRICHTEXT_ALL);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call InvalidateHierarchy
    self->InvalidateHierarchy(*invalidRange);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_IsDirty[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_IsDirty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_IsDirty[1] = {{ wxLua_wxRichTextParagraphLayoutBox_IsDirty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_IsDirty }};
//     bool IsDirty() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_IsDirty(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call IsDirty
    bool returns = (self->IsDirty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_IsTopLevel[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_IsTopLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_IsTopLevel[1] = {{ wxLua_wxRichTextParagraphLayoutBox_IsTopLevel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_IsTopLevel }};
//     virtual bool IsTopLevel() const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_IsTopLevel(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call IsTopLevel
    bool returns = (self->IsTopLevel());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Layout[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Layout[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Layout, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Layout }};
//     virtual bool Layout(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 6);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Layout
    bool returns = (self->Layout(*dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph[1] = {{ wxLua_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph }};
//     void MoveAnchoredObjectToParagraph(wxRichTextParagraph* from, wxRichTextParagraph* to, wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextObject);
    // wxRichTextParagraph to
    wxRichTextParagraph * to = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraph);
    // wxRichTextParagraph from
    wxRichTextParagraph * from = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call MoveAnchoredObjectToParagraph
    self->MoveAnchoredObjectToParagraph(from, to, obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_NumberList1[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_NumberList1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_NumberList1[1] = {{ wxLua_wxRichTextParagraphLayoutBox_NumberList1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_NumberList1 }};
//     virtual bool NumberList(const wxRichTextRange& range, const wxString& defName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_NumberList1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxString defName
    const wxString defName = wxlua_getwxStringtype(L, 3);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call NumberList
    bool returns = (self->NumberList(*range, defName, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_NumberList[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_NumberList(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_NumberList[1] = {{ wxLua_wxRichTextParagraphLayoutBox_NumberList, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_NumberList }};
//     virtual bool NumberList(const wxRichTextRange& range, wxRichTextListStyleDefinition* def = NULL, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_NumberList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextListStyleDefinition def = NULL
    wxRichTextListStyleDefinition * def = (argCount >= 3 ? (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextListStyleDefinition) : NULL);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call NumberList
    bool returns = (self->NumberList(*range, def, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PositionToXY[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PositionToXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PositionToXY[1] = {{ wxLua_wxRichTextParagraphLayoutBox_PositionToXY, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PositionToXY }};
//     virtual bool PositionToXY(long pos, long* x, long* y) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PositionToXY(lua_State *L)
{
    // long y
    long * y = (long *)wxlua_touserdata(L, 4);
    // long x
    long * x = (long *)wxlua_touserdata(L, 3);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call PositionToXY
    bool returns = (self->PositionToXY(pos, x, y));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PrepareContent[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PrepareContent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PrepareContent[1] = {{ wxLua_wxRichTextParagraphLayoutBox_PrepareContent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PrepareContent }};
//     virtual void PrepareContent(wxRichTextParagraphLayoutBox& container);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PrepareContent(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call PrepareContent
    self->PrepareContent(*container);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PromoteList1[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_wxRichTextRange, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PromoteList1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PromoteList1[1] = {{ wxLua_wxRichTextParagraphLayoutBox_PromoteList1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PromoteList1 }};
//     virtual bool PromoteList(int promoteBy, const wxRichTextRange& range, const wxString& defName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PromoteList1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxString defName
    const wxString defName = wxlua_getwxStringtype(L, 4);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // int promoteBy
    int promoteBy = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call PromoteList
    bool returns = (self->PromoteList(promoteBy, *range, defName, flags, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PromoteList[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PromoteList(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PromoteList[1] = {{ wxLua_wxRichTextParagraphLayoutBox_PromoteList, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PromoteList }};
//     virtual bool PromoteList(int promoteBy, const wxRichTextRange& range, wxRichTextListStyleDefinition* def = NULL, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_PromoteList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextListStyleDefinition def = NULL
    wxRichTextListStyleDefinition * def = (argCount >= 4 ? (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextListStyleDefinition) : NULL);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // int promoteBy
    int promoteBy = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call PromoteList
    bool returns = (self->PromoteList(promoteBy, *range, def, flags, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Reset[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Reset[1] = {{ wxLua_wxRichTextParagraphLayoutBox_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_Reset }};
//     virtual void Reset();
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_Reset(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetBasicStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetBasicStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetBasicStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetBasicStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetBasicStyle }};
//     virtual void SetBasicStyle(const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetBasicStyle(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetBasicStyle
    self->SetBasicStyle(*style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetDefaultStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetDefaultStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetDefaultStyle }};
//     virtual bool SetDefaultStyle(const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetDefaultStyle(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetDefaultStyle
    bool returns = (self->SetDefaultStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetListStyle1[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetListStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetListStyle1[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetListStyle1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetListStyle1 }};
//     virtual bool SetListStyle(const wxRichTextRange& range, const wxString& defName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetListStyle1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxString defName
    const wxString defName = wxlua_getwxStringtype(L, 3);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetListStyle
    bool returns = (self->SetListStyle(*range, defName, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetListStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetListStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetListStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetListStyle, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetListStyle }};
//     virtual bool SetListStyle(const wxRichTextRange& range, wxRichTextListStyleDefinition* def, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextListStyleDefinition def
    wxRichTextListStyleDefinition * def = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextListStyleDefinition);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetListStyle
    bool returns = (self->SetListStyle(*range, def, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo }};
//     virtual bool SetObjectPropertiesWithUndo(wxRichTextObject& obj, const wxRichTextProperties& properties, wxRichTextObject* objToSet = NULL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject objToSet = NULL
    wxRichTextObject * objToSet = (argCount >= 4 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextObject) : NULL);
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextProperties);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetObjectPropertiesWithUndo
    bool returns = (self->SetObjectPropertiesWithUndo(*obj, *properties, objToSet));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetPartialParagraph[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetPartialParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetPartialParagraph[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetPartialParagraph, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetPartialParagraph }};
//     void SetPartialParagraph(bool partialPara);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetPartialParagraph(lua_State *L)
{
    // bool partialPara
    bool partialPara = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetPartialParagraph
    self->SetPartialParagraph(partialPara);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetProperties[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextProperties, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetProperties[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetProperties, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetProperties }};
//     virtual bool SetProperties(const wxRichTextRange& range, const wxRichTextProperties& properties, int flags = wxRICHTEXT_SETPROPERTIES_WITH_UNDO);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetProperties(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETPROPERTIES_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETPROPERTIES_WITH_UNDO);
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextProperties);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetProperties
    bool returns = (self->SetProperties(*range, *properties, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetRichTextCtrl[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetRichTextCtrl[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetRichTextCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetRichTextCtrl }};
//     void SetRichTextCtrl(wxRichTextCtrl* ctrl);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetRichTextCtrl(lua_State *L)
{
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetRichTextCtrl
    self->SetRichTextCtrl(ctrl);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetStyle1[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetStyle1[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetStyle1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetStyle1 }};
//     virtual void SetStyle(wxRichTextObject *obj, const wxRichTextAttr& textAttr, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetStyle1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxRichTextAttr textAttr
    const wxRichTextAttr * textAttr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetStyle
    self->SetStyle(obj, *textAttr, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetStyle[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetStyle[1] = {{ wxLua_wxRichTextParagraphLayoutBox_SetStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetStyle }};
//     virtual bool SetStyle(const wxRichTextRange& range, const wxRichTextAttr& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_SetStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call SetStyle
    bool returns = (self->SetStyle(*range, *style, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_UpdateFloatingObjects[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRect, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_UpdateFloatingObjects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_UpdateFloatingObjects[1] = {{ wxLua_wxRichTextParagraphLayoutBox_UpdateFloatingObjects, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_UpdateFloatingObjects }};
//     virtual bool UpdateFloatingObjects(const wxRect& availableRect, wxRichTextObject* untilObj = NULL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_UpdateFloatingObjects(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject untilObj = NULL
    wxRichTextObject * untilObj = (argCount >= 3 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject) : NULL);
    // const wxRect availableRect
    const wxRect * availableRect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call UpdateFloatingObjects
    bool returns = (self->UpdateFloatingObjects(*availableRect, untilObj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_UpdateRanges[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_UpdateRanges(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_UpdateRanges[1] = {{ wxLua_wxRichTextParagraphLayoutBox_UpdateRanges, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_UpdateRanges }};
//     virtual void UpdateRanges();
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_UpdateRanges(lua_State *L)
{
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call UpdateRanges
    self->UpdateRanges();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_XYToPosition[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_XYToPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_XYToPosition[1] = {{ wxLua_wxRichTextParagraphLayoutBox_XYToPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_XYToPosition }};
//     virtual long XYToPosition(long x, long y) const;
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_XYToPosition(lua_State *L)
{
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call XYToPosition
    long returns = (self->XYToPosition(x, y));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_delete[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_op_set[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_op_set[1] = {{ wxLua_wxRichTextParagraphLayoutBox_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_op_set }};
//     void operator= (const wxRichTextParagraphLayoutBox& obj);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_op_set(lua_State *L)
{
    // const wxRichTextParagraphLayoutBox obj
    const wxRichTextParagraphLayoutBox * obj = (const wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextParagraphLayoutBox * self = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call op_set
    (*self)=(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_constructor1[] = { &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_constructor1[1] = {{ wxLua_wxRichTextParagraphLayoutBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_constructor1 }};
//     wxRichTextParagraphLayoutBox(const wxRichTextParagraphLayoutBox& obj);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_constructor1(lua_State *L)
{
    // const wxRichTextParagraphLayoutBox obj
    const wxRichTextParagraphLayoutBox * obj = (const wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call constructor
    wxRichTextParagraphLayoutBox* returns = new wxRichTextParagraphLayoutBox(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextParagraphLayoutBox);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_constructor[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_constructor[1] = {{ wxLua_wxRichTextParagraphLayoutBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_constructor }};
//     wxRichTextParagraphLayoutBox(wxRichTextObject* parent = NULL);
static int LUACALL wxLua_wxRichTextParagraphLayoutBox_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 1 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject) : NULL);
    // call constructor
    wxRichTextParagraphLayoutBox* returns = new wxRichTextParagraphLayoutBox(parent);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextParagraphLayoutBox);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}




#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ExportXML_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextParagraphLayoutBox_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ExportXML1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
    { wxLua_wxRichTextParagraphLayoutBox_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_ExportXML },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ExportXML_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ExportXML_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_NumberList_overload[] =
{
    { wxLua_wxRichTextParagraphLayoutBox_NumberList1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_NumberList1 },
    { wxLua_wxRichTextParagraphLayoutBox_NumberList, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_NumberList },
};
static int s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_NumberList_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_NumberList_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PromoteList_overload[] =
{
    { wxLua_wxRichTextParagraphLayoutBox_PromoteList1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PromoteList1 },
    { wxLua_wxRichTextParagraphLayoutBox_PromoteList, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_PromoteList },
};
static int s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PromoteList_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PromoteList_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetListStyle_overload[] =
{
    { wxLua_wxRichTextParagraphLayoutBox_SetListStyle1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetListStyle1 },
    { wxLua_wxRichTextParagraphLayoutBox_SetListStyle, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetListStyle },
};
static int s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetListStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetListStyle_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetStyle_overload[] =
{
    { wxLua_wxRichTextParagraphLayoutBox_SetStyle1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetStyle1 },
    { wxLua_wxRichTextParagraphLayoutBox_SetStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_SetStyle },
};
static int s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetStyle_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_constructor_overload[] =
{
    { wxLua_wxRichTextParagraphLayoutBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_constructor1 },
    { wxLua_wxRichTextParagraphLayoutBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphLayoutBox_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextParagraphLayoutBox_delete_function(void** p)
{
    wxRichTextParagraphLayoutBox* o = (wxRichTextParagraphLayoutBox*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextParagraphLayoutBox_methods[] = {
    { "AcceptsFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AcceptsFocus, 1, NULL },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "AddImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AddImage, 1, NULL },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "AddParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AddParagraph, 1, NULL },
    { "AddParagraphs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_AddParagraphs, 1, NULL },
    { "ApplyStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ApplyStyleSheet, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Clear, 1, NULL },
    { "ClearListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ClearListStyle, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Clone, 1, NULL },
    { "CollectStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_CollectStyle, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Copy, 1, NULL },
    { "CopyFragment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_CopyFragment, 1, NULL },
    { "DeleteRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DeleteRange, 1, NULL },
    { "DeleteRangeWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo, 1, NULL },
    { "DoGetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DoGetStyle, 1, NULL },
    { "DoInvalidate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DoInvalidate, 1, NULL },
    { "DoNumberList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DoNumberList, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Draw, 1, NULL },
    { "DrawFloats", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_DrawFloats, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
    { "ExportXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ExportXML_overload, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ExportXML_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

    { "FindNextParagraphNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_FindNextParagraphNumber, 1, NULL },
    { "GetBasicStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetBasicStyle, 1, NULL },
    { "GetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetDefaultStyle, 1, NULL },
    { "GetFloatingObjectCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjectCount, 1, NULL },
    { "GetFloatingObjects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetFloatingObjects, 1, NULL },
    { "GetInvalidRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetInvalidRange, 1, NULL },
    { "GetLeafObjectAtPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition, 1, NULL },
    { "GetLineAtPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineAtPosition, 1, NULL },
    { "GetLineAtYPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineAtYPosition, 1, NULL },
    { "GetLineCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineCount, 1, NULL },
    { "GetLineForVisibleLineNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetLineSizeAtPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetParagraphAtLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtLine, 1, NULL },
    { "GetParagraphAtPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphAtPosition, 1, NULL },
    { "GetParagraphCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphCount, 1, NULL },
    { "GetParagraphForLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphForLine, 1, NULL },
    { "GetParagraphLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphLength, 1, NULL },
    { "GetParagraphText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetParagraphText, 1, NULL },
    { "GetPartialParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetPartialParagraph, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetRichTextCtrl, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyle, 1, NULL },
    { "GetStyleForNewParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph, 1, NULL },
    { "GetStyleForRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyleForRange, 1, NULL },
    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetStyleSheet, 1, NULL },
    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetText, 1, NULL },
    { "GetTextForRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetTextForRange, 1, NULL },
    { "GetUncombinedStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetUncombinedStyle, 1, NULL },
    { "GetVisibleLineNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetVisibleLineNumber, 1, NULL },
    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_GetXMLNodeName, 1, NULL },
    { "HasCharacterAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_HasCharacterAttributes, 1, NULL },
    { "HasParagraphAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_HasParagraphAttributes, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_HitTest, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "ImportFromXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_ImportFromXML, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Init, 1, NULL },
    { "InsertFieldWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertFieldWithUndo, 1, NULL },
    { "InsertFragment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertFragment, 1, NULL },
    { "InsertImageWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertImageWithUndo, 1, NULL },
    { "InsertNewlineWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo, 1, NULL },
    { "InsertObjectWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertObjectWithUndo, 1, NULL },
    { "InsertParagraphsWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo, 1, NULL },
    { "InsertTextWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InsertTextWithUndo, 1, NULL },
    { "Invalidate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Invalidate, 1, NULL },
    { "InvalidateHierarchy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_InvalidateHierarchy, 1, NULL },
    { "IsDirty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_IsDirty, 1, NULL },
    { "IsTopLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_IsTopLevel, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "MoveAnchoredObjectToParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "NumberList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_NumberList_overload, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_NumberList_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "PositionToXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PositionToXY, 1, NULL },
    { "PrepareContent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PrepareContent, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "PromoteList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PromoteList_overload, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_PromoteList_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_Reset, 1, NULL },
    { "SetBasicStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetBasicStyle, 1, NULL },
    { "SetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetDefaultStyle, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetListStyle_overload, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetListStyle_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetObjectPropertiesWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo, 1, NULL },
    { "SetPartialParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetPartialParagraph, 1, NULL },
    { "SetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetProperties, 1, NULL },
    { "SetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetRichTextCtrl, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetStyle_overload, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_SetStyle_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "UpdateFloatingObjects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_UpdateFloatingObjects, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "UpdateRanges", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_UpdateRanges, 1, NULL },
    { "XYToPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_XYToPosition, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextParagraphLayoutBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_constructor_overload, s_wxluafunc_wxLua_wxRichTextParagraphLayoutBox_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextParagraphLayoutBox_methodCount = sizeof(wxRichTextParagraphLayoutBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextBox'
int wxluatype_wxRichTextBox = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_CanEditProperties[] = { &wxluatype_wxRichTextBox, NULL };
static int LUACALL wxLua_wxRichTextBox_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_CanEditProperties[1] = {{ wxLua_wxRichTextBox_CanEditProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBox_CanEditProperties }};
//     virtual bool CanEditProperties() const;
static int LUACALL wxLua_wxRichTextBox_CanEditProperties(lua_State *L)
{
    // get this
    wxRichTextBox * self = (wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call CanEditProperties
    bool returns = (self->CanEditProperties());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_Clone[] = { &wxluatype_wxRichTextBox, NULL };
static int LUACALL wxLua_wxRichTextBox_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_Clone[1] = {{ wxLua_wxRichTextBox_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBox_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextBox_Clone(lua_State *L)
{
    // get this
    wxRichTextBox * self = (wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_Copy[] = { &wxluatype_wxRichTextBox, &wxluatype_wxRichTextBox, NULL };
static int LUACALL wxLua_wxRichTextBox_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_Copy[1] = {{ wxLua_wxRichTextBox_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBox_Copy }};
//     void Copy(const wxRichTextBox& obj);
static int LUACALL wxLua_wxRichTextBox_Copy(lua_State *L)
{
    // const wxRichTextBox obj
    const wxRichTextBox * obj = (const wxRichTextBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBox);
    // get this
    wxRichTextBox * self = (wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call Copy
    self->Copy(*obj);

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_Draw[] = { &wxluatype_wxRichTextBox, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBox_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_Draw[1] = {{ wxLua_wxRichTextBox_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextBox_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextBox_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextBox * self = (wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_EditProperties[] = { &wxluatype_wxRichTextBox, &wxluatype_wxWindow, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBox_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_EditProperties[1] = {{ wxLua_wxRichTextBox_EditProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextBox_EditProperties }};
//     virtual bool EditProperties(wxWindow* parent, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextBox_EditProperties(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextBuffer);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextBox * self = (wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call EditProperties
    bool returns = (self->EditProperties(parent, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextBox, NULL };
static int LUACALL wxLua_wxRichTextBox_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextBox_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBox_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel() const;
static int LUACALL wxLua_wxRichTextBox_GetPropertiesMenuLabel(lua_State *L)
{
    // get this
    wxRichTextBox * self = (wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_GetXMLNodeName[] = { &wxluatype_wxRichTextBox, NULL };
static int LUACALL wxLua_wxRichTextBox_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_GetXMLNodeName[1] = {{ wxLua_wxRichTextBox_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBox_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextBox_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextBox * self = (wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_delete[] = { &wxluatype_wxRichTextBox, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBox_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_constructor1[] = { &wxluatype_wxRichTextBox, NULL };
static int LUACALL wxLua_wxRichTextBox_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_constructor1[1] = {{ wxLua_wxRichTextBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBox_constructor1 }};
//     wxRichTextBox(const wxRichTextBox& obj);
static int LUACALL wxLua_wxRichTextBox_constructor1(lua_State *L)
{
    // const wxRichTextBox obj
    const wxRichTextBox * obj = (const wxRichTextBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBox);
    // call constructor
    wxRichTextBox* returns = new wxRichTextBox(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextBox);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBox_constructor[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextBox_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_constructor[1] = {{ wxLua_wxRichTextBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextBox_constructor }};
//     wxRichTextBox(wxRichTextObject* parent = NULL);
static int LUACALL wxLua_wxRichTextBox_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 1 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject) : NULL);
    // call constructor
    wxRichTextBox* returns = new wxRichTextBox(parent);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextBox);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBox);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBox_constructor_overload[] =
{
    { wxLua_wxRichTextBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBox_constructor1 },
    { wxLua_wxRichTextBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextBox_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextBox_delete_function(void** p)
{
    wxRichTextBox* o = (wxRichTextBox*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextBox_methods[] = {
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBox_CanEditProperties, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBox_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBox_Copy, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBox_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBox_EditProperties, 1, NULL },
    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBox_GetPropertiesMenuLabel, 1, NULL },
    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBox_GetXMLNodeName, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextBox_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextBox_constructor_overload, s_wxluafunc_wxLua_wxRichTextBox_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextBox_methodCount = sizeof(wxRichTextBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextField
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextField'
int wxluatype_wxRichTextField = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_AcceptsFocus[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_AcceptsFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_AcceptsFocus[1] = {{ wxLua_wxRichTextField_AcceptsFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_AcceptsFocus }};
//     virtual bool AcceptsFocus() const;
static int LUACALL wxLua_wxRichTextField_AcceptsFocus(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call AcceptsFocus
    bool returns = (self->AcceptsFocus());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_CalculateRange[] = { &wxluatype_wxRichTextField, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextField_CalculateRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_CalculateRange[1] = {{ wxLua_wxRichTextField_CalculateRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextField_CalculateRange }};
//     virtual void CalculateRange(long start, long& end);
static int LUACALL wxLua_wxRichTextField_CalculateRange(lua_State *L)
{
    // long end
    long * end = (long *)wxlua_touserdata(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call CalculateRange
    self->CalculateRange(start, *end);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_CanEditProperties[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_CanEditProperties[1] = {{ wxLua_wxRichTextField_CanEditProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_CanEditProperties }};
//     virtual bool CanEditProperties() const;
static int LUACALL wxLua_wxRichTextField_CanEditProperties(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call CanEditProperties
    bool returns = (self->CanEditProperties());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_Clone[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_Clone[1] = {{ wxLua_wxRichTextField_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextField_Clone(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_Copy[] = { &wxluatype_wxRichTextField, &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_Copy[1] = {{ wxLua_wxRichTextField_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextField_Copy }};
//     void Copy(const wxRichTextField& obj);
static int LUACALL wxLua_wxRichTextField_Copy(lua_State *L)
{
    // const wxRichTextField obj
    const wxRichTextField * obj = (const wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call Copy
    self->Copy(*obj);

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_Draw[] = { &wxluatype_wxRichTextField, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextField_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_Draw[1] = {{ wxLua_wxRichTextField_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextField_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextField_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_EditProperties[] = { &wxluatype_wxRichTextField, &wxluatype_wxWindow, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextField_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_EditProperties[1] = {{ wxLua_wxRichTextField_EditProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextField_EditProperties }};
//     virtual bool EditProperties(wxWindow* parent, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextField_EditProperties(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextBuffer);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call EditProperties
    bool returns = (self->EditProperties(parent, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_GetFieldType[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_GetFieldType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_GetFieldType[1] = {{ wxLua_wxRichTextField_GetFieldType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_GetFieldType }};
//     wxString GetFieldType() const;
static int LUACALL wxLua_wxRichTextField_GetFieldType(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call GetFieldType
    wxString returns = (self->GetFieldType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextField_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel() const;
static int LUACALL wxLua_wxRichTextField_GetPropertiesMenuLabel(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_GetRangeSize[] = { &wxluatype_wxRichTextField, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextField_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_GetRangeSize[1] = {{ wxLua_wxRichTextField_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextField_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextField_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_GetXMLNodeName[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_GetXMLNodeName[1] = {{ wxLua_wxRichTextField_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextField_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_IsAtomic[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_IsAtomic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_IsAtomic[1] = {{ wxLua_wxRichTextField_IsAtomic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_IsAtomic }};
//     virtual bool IsAtomic() const;
static int LUACALL wxLua_wxRichTextField_IsAtomic(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call IsAtomic
    bool returns = (self->IsAtomic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_IsEmpty[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_IsEmpty[1] = {{ wxLua_wxRichTextField_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_IsEmpty }};
//     virtual bool IsEmpty() const;
static int LUACALL wxLua_wxRichTextField_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_IsTopLevel[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_IsTopLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_IsTopLevel[1] = {{ wxLua_wxRichTextField_IsTopLevel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_IsTopLevel }};
//     virtual bool IsTopLevel() const;
static int LUACALL wxLua_wxRichTextField_IsTopLevel(lua_State *L)
{
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call IsTopLevel
    bool returns = (self->IsTopLevel());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_Layout[] = { &wxluatype_wxRichTextField, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextField_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_Layout[1] = {{ wxLua_wxRichTextField_Layout, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextField_Layout }};
//     virtual bool Layout(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextField_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 6);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call Layout
    bool returns = (self->Layout(*dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_SetFieldType[] = { &wxluatype_wxRichTextField, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextField_SetFieldType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_SetFieldType[1] = {{ wxLua_wxRichTextField_SetFieldType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextField_SetFieldType }};
//     void SetFieldType(const wxString& fieldType);
static int LUACALL wxLua_wxRichTextField_SetFieldType(lua_State *L)
{
    // const wxString fieldType
    const wxString fieldType = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call SetFieldType
    self->SetFieldType(fieldType);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_UpdateField[] = { &wxluatype_wxRichTextField, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextField_UpdateField(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_UpdateField[1] = {{ wxLua_wxRichTextField_UpdateField, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextField_UpdateField }};
//     virtual bool UpdateField(wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextField_UpdateField(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextField * self = (wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call UpdateField
    bool returns = (self->UpdateField(buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_delete[] = { &wxluatype_wxRichTextField, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_constructor1[] = { &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextField_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_constructor1[1] = {{ wxLua_wxRichTextField_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_constructor1 }};
//     wxRichTextField(const wxRichTextField& obj);
static int LUACALL wxLua_wxRichTextField_constructor1(lua_State *L)
{
    // const wxRichTextField obj
    const wxRichTextField * obj = (const wxRichTextField *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextField);
    // call constructor
    wxRichTextField* returns = new wxRichTextField(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextField);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextField);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextField_constructor[] = { &wxluatype_TSTRING, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextField_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_constructor[1] = {{ wxLua_wxRichTextField_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxRichTextField_constructor }};
//     wxRichTextField(const wxString& fieldType = wxEmptyString, wxRichTextObject* parent = NULL);
static int LUACALL wxLua_wxRichTextField_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 2 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject) : NULL);
    // const wxString fieldType = wxEmptyString
    const wxString fieldType = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxRichTextField* returns = new wxRichTextField(fieldType, parent);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextField);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextField);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextField_constructor_overload[] =
{
    { wxLua_wxRichTextField_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextField_constructor1 },
    { wxLua_wxRichTextField_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxRichTextField_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextField_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextField_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextField_delete_function(void** p)
{
    wxRichTextField* o = (wxRichTextField*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextField_methods[] = {
    { "AcceptsFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_AcceptsFocus, 1, NULL },
    { "CalculateRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_CalculateRange, 1, NULL },
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_CanEditProperties, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_Copy, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_EditProperties, 1, NULL },
    { "GetFieldType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_GetFieldType, 1, NULL },
    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_GetPropertiesMenuLabel, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_GetXMLNodeName, 1, NULL },
    { "IsAtomic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_IsAtomic, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_IsEmpty, 1, NULL },
    { "IsTopLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_IsTopLevel, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetFieldType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_SetFieldType, 1, NULL },
    { "UpdateField", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextField_UpdateField, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextField_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextField", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextField_constructor_overload, s_wxluafunc_wxLua_wxRichTextField_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextField_methodCount = sizeof(wxRichTextField_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextFieldType
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFieldType'
int wxluatype_wxRichTextFieldType = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_CanEditProperties[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextFieldType_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_CanEditProperties[1] = {{ wxLua_wxRichTextFieldType_CanEditProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldType_CanEditProperties }};
//     virtual bool CanEditProperties(wxRichTextField* obj) const;
static int LUACALL wxLua_wxRichTextFieldType_CanEditProperties(lua_State *L)
{
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call CanEditProperties
    bool returns = (self->CanEditProperties(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_Copy[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextFieldType, NULL };
static int LUACALL wxLua_wxRichTextFieldType_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_Copy[1] = {{ wxLua_wxRichTextFieldType_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldType_Copy }};
//     void Copy(const wxRichTextFieldType& fieldType);
static int LUACALL wxLua_wxRichTextFieldType_Copy(lua_State *L)
{
    // const wxRichTextFieldType fieldType
    const wxRichTextFieldType * fieldType = (const wxRichTextFieldType *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFieldType);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call Copy
    self->Copy(*fieldType);

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_Draw[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextField, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldType_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_Draw[1] = {{ wxLua_wxRichTextFieldType_Draw, WXLUAMETHOD_METHOD, 9, 9, s_wxluatypeArray_wxLua_wxRichTextFieldType_Draw }};
//     virtual bool Draw(wxRichTextField* obj, wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextFieldType_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 9);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 8);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call Draw
    bool returns = (self->Draw(obj, *dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_EditProperties[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextField, &wxluatype_wxWindow, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextFieldType_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_EditProperties[1] = {{ wxLua_wxRichTextFieldType_EditProperties, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextFieldType_EditProperties }};
//     virtual bool EditProperties(wxRichTextField* obj, wxWindow* parent, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextFieldType_EditProperties(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextBuffer);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call EditProperties
    bool returns = (self->EditProperties(obj, parent, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_GetName[] = { &wxluatype_wxRichTextFieldType, NULL };
static int LUACALL wxLua_wxRichTextFieldType_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_GetName[1] = {{ wxLua_wxRichTextFieldType_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldType_GetName }};
//     wxString GetName() const;
static int LUACALL wxLua_wxRichTextFieldType_GetName(lua_State *L)
{
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextFieldType_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextFieldType_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldType_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel(wxRichTextField* obj) const;
static int LUACALL wxLua_wxRichTextFieldType_GetPropertiesMenuLabel(lua_State *L)
{
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel(obj));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_GetRangeSize[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextField, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextFieldType_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_GetRangeSize[1] = {{ wxLua_wxRichTextFieldType_GetRangeSize, WXLUAMETHOD_METHOD, 8, 11, s_wxluatypeArray_wxLua_wxRichTextFieldType_GetRangeSize }};
//     virtual bool GetRangeSize(wxRichTextField* obj, const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextFieldType_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 11 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 11, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 10 ? (const wxSize *)wxluaT_getuserdatatype(L, 10, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 9 ? (const wxPoint *)wxluaT_getuserdatatype(L, 9, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 8);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 6, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 5);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(obj, *range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_IsTopLevel[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextFieldType_IsTopLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_IsTopLevel[1] = {{ wxLua_wxRichTextFieldType_IsTopLevel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldType_IsTopLevel }};
//     virtual bool IsTopLevel(wxRichTextField* obj) const;
static int LUACALL wxLua_wxRichTextFieldType_IsTopLevel(lua_State *L)
{
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call IsTopLevel
    bool returns = (self->IsTopLevel(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_Layout[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextField, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldType_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_Layout[1] = {{ wxLua_wxRichTextFieldType_Layout, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextFieldType_Layout }};
//     virtual bool Layout(wxRichTextField* obj, wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextFieldType_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 7);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call Layout
    bool returns = (self->Layout(obj, *dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_SetName[] = { &wxluatype_wxRichTextFieldType, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFieldType_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_SetName[1] = {{ wxLua_wxRichTextFieldType_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldType_SetName }};
//     void SetName(const wxString& name);
static int LUACALL wxLua_wxRichTextFieldType_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call SetName
    self->SetName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_UpdateField[] = { &wxluatype_wxRichTextFieldType, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextFieldType_UpdateField(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_UpdateField[1] = {{ wxLua_wxRichTextFieldType_UpdateField, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFieldType_UpdateField }};
//     virtual bool UpdateField(wxRichTextBuffer* buffer, wxRichTextField* obj);
static int LUACALL wxLua_wxRichTextFieldType_UpdateField(lua_State *L)
{
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextField);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextFieldType * self = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call UpdateField
    bool returns = (self->UpdateField(buffer, obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldType_delete[] = { &wxluatype_wxRichTextFieldType, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldType_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldType_delete }};




void wxLua_wxRichTextFieldType_delete_function(void** p)
{
    wxRichTextFieldType* o = (wxRichTextFieldType*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFieldType_methods[] = {
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_CanEditProperties, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_Copy, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_EditProperties, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_GetName, 1, NULL },
    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_GetPropertiesMenuLabel, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "IsTopLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_IsTopLevel, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_SetName, 1, NULL },
    { "UpdateField", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldType_UpdateField, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFieldType_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextFieldType_methodCount = sizeof(wxRichTextFieldType_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextFieldTypeHashMap::iterator
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFieldTypeHashMap::iterator'
int wxluatype_wxRichTextFieldTypeHashMap_iterator = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first[] = { &wxluatype_wxRichTextFieldTypeHashMap_iterator, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first[1] = {{ wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first }};
// %override wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first
//  For implementation of HashMap related methods, see wxImageHistogram in wxcore_override.hpp.i
//     wxString first;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap::iterator *self = (wxRichTextFieldTypeHashMap::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // push the result string
    wxlua_pushwxString(L, (*self)->first); // *** need to cast self to object from pointer
    // return the number of values
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second[] = { &wxluatype_wxRichTextFieldTypeHashMap_iterator, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second[1] = {{ wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second }};
// %override wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second
//     wxRichTextFieldType *second;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap::iterator *self = (wxRichTextFieldTypeHashMap::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // push the result datatype
    wxluaT_pushuserdatatype(L, (*self)->second, wxluatype_wxRichTextFieldType); // *** need to cast self to object from pointer
    // return the number of values
    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first[] = { &wxluatype_wxRichTextFieldTypeHashMap_iterator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first[1] = {{ wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first }};
// %override wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first
//     wxString first;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first(lua_State *L)
{
    wxlua_argerrormsg(L, wxT("You cannot set the first element of a wxHashMap. do not use wxRichTextFieldTypeHashMap::iterator::SetFirst()."));
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second[] = { &wxluatype_wxRichTextFieldTypeHashMap_iterator, &wxluatype_wxRichTextFieldType, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second[1] = {{ wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second }};
// %override wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second
//     wxRichTextFieldType *second;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second(lua_State *L)
{
    // get the data type value
    wxRichTextFieldType* val = (wxRichTextFieldType*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFieldType);
    // get this
    wxRichTextFieldTypeHashMap::iterator *self = (wxRichTextFieldTypeHashMap::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    (*self)->second = val; // *** need to cast self to object from pointer
    // return the number of values
    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_delete[] = { &wxluatype_wxRichTextFieldTypeHashMap_iterator, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_op_eq[] = { &wxluatype_wxRichTextFieldTypeHashMap_iterator, &wxluatype_wxRichTextFieldTypeHashMap_iterator, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_op_eq[1] = {{ wxLua_wxRichTextFieldTypeHashMap_iterator_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_op_eq }};
//     bool operator==(const wxRichTextFieldTypeHashMap::iterator& other) const;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_op_eq(lua_State *L)
{
    // const wxRichTextFieldTypeHashMap::iterator other
    const wxRichTextFieldTypeHashMap::iterator * other = (const wxRichTextFieldTypeHashMap::iterator *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // get this
    wxRichTextFieldTypeHashMap::iterator * self = (wxRichTextFieldTypeHashMap::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // call op_eq
    bool returns = ((*self)==(*other));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_op_inc[] = { &wxluatype_wxRichTextFieldTypeHashMap_iterator, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_op_inc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_op_inc[1] = {{ wxLua_wxRichTextFieldTypeHashMap_iterator_op_inc, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_iterator_op_inc }};
//     void operator++(); // it's best if we don't return the iterator
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_iterator_op_inc(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap::iterator * self = (wxRichTextFieldTypeHashMap::iterator *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // call op_inc
    (*self)++;

    return 0;
}




void wxLua_wxRichTextFieldTypeHashMap_iterator_delete_function(void** p)
{
    wxRichTextFieldTypeHashMap::iterator* o = (wxRichTextFieldTypeHashMap::iterator*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFieldTypeHashMap_iterator_methods[] = {
    // %member    { "Get_first", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first, 1, NULL },
    // %member    { "Get_second", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second, 1, NULL },
    // %member    { "Set_first", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first, 1, NULL },
    // %member    { "Set_second", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_delete, 1, NULL },
    { "first", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_first, 1, NULL },
    { "first", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_first, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_op_eq, 1, NULL },
    { "op_inc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_op_inc, 1, NULL },
    { "second", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Set_second, 1, NULL },
    { "second", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_iterator_Get_second, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextFieldTypeHashMap_iterator_methodCount = sizeof(wxRichTextFieldTypeHashMap_iterator_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextFieldTypeHashMap
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFieldTypeHashMap'
int wxluatype_wxRichTextFieldTypeHashMap = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Begin[] = { &wxluatype_wxRichTextFieldTypeHashMap, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Begin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Begin[1] = {{ wxLua_wxRichTextFieldTypeHashMap_Begin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Begin }};
//     %rename Begin wxRichTextFieldTypeHashMap::iterator begin() const; // not const iterator
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Begin(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call begin
    // allocate a new object using the copy constructor
    wxRichTextFieldTypeHashMap::iterator* returns = new wxRichTextFieldTypeHashMap::iterator(self->begin());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeHashMap_iterator);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Clear[] = { &wxluatype_wxRichTextFieldTypeHashMap, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Clear[1] = {{ wxLua_wxRichTextFieldTypeHashMap_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Clear }};
//     %rename Clear void clear();
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Clear(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call clear
    self->clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Count[] = { &wxluatype_wxRichTextFieldTypeHashMap, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Count(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Count[1] = {{ wxLua_wxRichTextFieldTypeHashMap_Count, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Count }};
//     %rename Count size_t count(wxString &key) const;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Count(lua_State *L)
{
    // wxString key
    wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call count
    size_t returns = (self->count(key));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Empty[] = { &wxluatype_wxRichTextFieldTypeHashMap, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Empty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Empty[1] = {{ wxLua_wxRichTextFieldTypeHashMap_Empty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Empty }};
//     %rename Empty bool empty() const;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Empty(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call empty
    bool returns = (self->empty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_End[] = { &wxluatype_wxRichTextFieldTypeHashMap, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_End(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_End[1] = {{ wxLua_wxRichTextFieldTypeHashMap_End, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_End }};
//     %rename End wxRichTextFieldTypeHashMap::iterator end() const; // not const iterator
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_End(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call end
    // allocate a new object using the copy constructor
    wxRichTextFieldTypeHashMap::iterator* returns = new wxRichTextFieldTypeHashMap::iterator(self->end());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeHashMap_iterator);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Erase[] = { &wxluatype_wxRichTextFieldTypeHashMap, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Erase(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Erase[1] = {{ wxLua_wxRichTextFieldTypeHashMap_Erase, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Erase }};
//     %rename Erase size_t erase(wxString &key);
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Erase(lua_State *L)
{
    // wxString key
    wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call erase
    size_t returns = (self->erase(key));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Find[] = { &wxluatype_wxRichTextFieldTypeHashMap, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Find(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Find[1] = {{ wxLua_wxRichTextFieldTypeHashMap_Find, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Find }};
//     %rename Find wxRichTextFieldTypeHashMap::iterator find(wxString &key);
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Find(lua_State *L)
{
    // wxString key
    wxString key = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call find
    // allocate a new object using the copy constructor
    wxRichTextFieldTypeHashMap::iterator* returns = new wxRichTextFieldTypeHashMap::iterator(self->find(key));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFieldTypeHashMap_iterator);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeHashMap_iterator);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Size[] = { &wxluatype_wxRichTextFieldTypeHashMap, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Size(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Size[1] = {{ wxLua_wxRichTextFieldTypeHashMap_Size, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_Size }};
//     %rename Size size_t size() const;
static int LUACALL wxLua_wxRichTextFieldTypeHashMap_Size(lua_State *L)
{
    // get this
    wxRichTextFieldTypeHashMap * self = (wxRichTextFieldTypeHashMap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeHashMap);
    // call size
    size_t returns = (self->size());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_delete[] = { &wxluatype_wxRichTextFieldTypeHashMap, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeHashMap_delete }};




void wxLua_wxRichTextFieldTypeHashMap_delete_function(void** p)
{
    wxRichTextFieldTypeHashMap* o = (wxRichTextFieldTypeHashMap*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFieldTypeHashMap_methods[] = {
    { "Begin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Begin, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Clear, 1, NULL },
    { "Count", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Count, 1, NULL },
    { "Empty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Empty, 1, NULL },
    { "End", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_End, 1, NULL },
    { "Erase", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Erase, 1, NULL },
    { "Find", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Find, 1, NULL },
    { "Size", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_Size, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFieldTypeHashMap_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextFieldTypeHashMap_methodCount = sizeof(wxRichTextFieldTypeHashMap_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextFieldTypeStandard
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFieldTypeStandard'
int wxluatype_wxRichTextFieldTypeStandard = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Copy[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Copy[1] = {{ wxLua_wxRichTextFieldTypeStandard_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Copy }};
//     void Copy(const wxRichTextFieldTypeStandard& field);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Copy(lua_State *L)
{
    // const wxRichTextFieldTypeStandard field
    const wxRichTextFieldTypeStandard * field = (const wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFieldTypeStandard);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call Copy
    self->Copy(*field);

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Draw[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxRichTextField, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Draw[1] = {{ wxLua_wxRichTextFieldTypeStandard_Draw, WXLUAMETHOD_METHOD, 9, 9, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Draw }};
//     virtual bool Draw(wxRichTextField* obj, wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 9);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 8);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call Draw
    bool returns = (self->Draw(obj, *dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetBackgroundColour[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetBackgroundColour[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetBackgroundColour }};
//     const wxColour& GetBackgroundColour() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetBackgroundColour(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetBackgroundColour
    const wxColour* returns = (const wxColour*)&self->GetBackgroundColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetBitmap[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetBitmap[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetBitmap }};
//     const wxBitmap& GetBitmap() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetBitmap(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetBitmap
    const wxBitmap* returns = (const wxBitmap*)&self->GetBitmap();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetBorderColour[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetBorderColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetBorderColour[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetBorderColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetBorderColour }};
//     const wxColour& GetBorderColour() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetBorderColour(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetBorderColour
    const wxColour* returns = (const wxColour*)&self->GetBorderColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetDisplayStyle[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetDisplayStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetDisplayStyle[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetDisplayStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetDisplayStyle }};
//     int GetDisplayStyle() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetDisplayStyle(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetDisplayStyle
    int returns = (self->GetDisplayStyle());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetFont[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetFont[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetFont }};
//     const wxFont& GetFont() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetFont(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetFont
    const wxFont* returns = (const wxFont*)&self->GetFont();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetHorizontalMargin[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetHorizontalMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetHorizontalMargin[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetHorizontalMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetHorizontalMargin }};
//     int GetHorizontalMargin() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetHorizontalMargin(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetHorizontalMargin
    int returns = (self->GetHorizontalMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetHorizontalPadding[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetHorizontalPadding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetHorizontalPadding[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetHorizontalPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetHorizontalPadding }};
//     int GetHorizontalPadding() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetHorizontalPadding(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetHorizontalPadding
    int returns = (self->GetHorizontalPadding());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetLabel[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetLabel[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetLabel }};
//     const wxString& GetLabel() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetLabel(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetLabel
    wxString returns = (self->GetLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetRangeSize[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxRichTextField, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetRangeSize[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetRangeSize, WXLUAMETHOD_METHOD, 8, 11, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetRangeSize }};
//     virtual bool GetRangeSize(wxRichTextField* obj, const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 11 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 11, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 10 ? (const wxSize *)wxluaT_getuserdatatype(L, 10, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 9 ? (const wxPoint *)wxluaT_getuserdatatype(L, 9, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 8);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 6, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 5);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(obj, *range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetSize[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxRichTextField, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetSize[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetSize, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetSize }};
//     wxSize GetSize(wxRichTextField* obj, wxDC& dc, wxRichTextDrawingContext& context, int style) const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetSize(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 5);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize(obj, *dc, *context, style));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetTextColour[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetTextColour[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetTextColour }};
//     const wxColour& GetTextColour() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetTextColour(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetTextColour
    const wxColour* returns = (const wxColour*)&self->GetTextColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetVerticalMargin[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetVerticalMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetVerticalMargin[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetVerticalMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetVerticalMargin }};
//     int GetVerticalMargin() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetVerticalMargin(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetVerticalMargin
    int returns = (self->GetVerticalMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetVerticalPadding[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetVerticalPadding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetVerticalPadding[1] = {{ wxLua_wxRichTextFieldTypeStandard_GetVerticalPadding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_GetVerticalPadding }};
//     int GetVerticalPadding() const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_GetVerticalPadding(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call GetVerticalPadding
    int returns = (self->GetVerticalPadding());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Init[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Init[1] = {{ wxLua_wxRichTextFieldTypeStandard_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Init(lua_State *L)
{
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_IsTopLevel[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxRichTextField, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_IsTopLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_IsTopLevel[1] = {{ wxLua_wxRichTextFieldTypeStandard_IsTopLevel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_IsTopLevel }};
//     virtual bool IsTopLevel(wxRichTextField* obj) const;
static int LUACALL wxLua_wxRichTextFieldTypeStandard_IsTopLevel(lua_State *L)
{
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call IsTopLevel
    bool returns = (self->IsTopLevel(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Layout[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxRichTextField, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Layout[1] = {{ wxLua_wxRichTextFieldTypeStandard_Layout, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_Layout }};
//     virtual bool Layout(wxRichTextField* obj, wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 7);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextField obj
    wxRichTextField * obj = (wxRichTextField *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextField);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call Layout
    bool returns = (self->Layout(obj, *dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetBackgroundColour[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetBackgroundColour[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& colour);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetBackgroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetBitmap[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetBitmap[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetBitmap }};
//     void SetBitmap(const wxBitmap& bitmap);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetBitmap(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetBitmap
    self->SetBitmap(*bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetBorderColour[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetBorderColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetBorderColour[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetBorderColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetBorderColour }};
//     void SetBorderColour(const wxColour& colour);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetBorderColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetBorderColour
    self->SetBorderColour(*colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetDisplayStyle[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetDisplayStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetDisplayStyle[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetDisplayStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetDisplayStyle }};
//     void SetDisplayStyle(int displayStyle);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetDisplayStyle(lua_State *L)
{
    // int displayStyle
    int displayStyle = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetDisplayStyle
    self->SetDisplayStyle(displayStyle);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetFont[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetFont[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetFont }};
//     void SetFont(const wxFont& font);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetHorizontalMargin[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetHorizontalMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetHorizontalMargin[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetHorizontalMargin, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetHorizontalMargin }};
//     void SetHorizontalMargin(int margin);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetHorizontalMargin(lua_State *L)
{
    // int margin
    int margin = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetHorizontalMargin
    self->SetHorizontalMargin(margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetHorizontalPadding[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetHorizontalPadding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetHorizontalPadding[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetHorizontalPadding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetHorizontalPadding }};
//     void SetHorizontalPadding(int padding);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetHorizontalPadding(lua_State *L)
{
    // int padding
    int padding = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetHorizontalPadding
    self->SetHorizontalPadding(padding);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetLabel[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetLabel[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetLabel }};
//     void SetLabel(const wxString& label);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetLabel(lua_State *L)
{
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetLabel
    self->SetLabel(label);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetTextColour[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetTextColour[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetTextColour }};
//     void SetTextColour(const wxColour& colour);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetTextColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetTextColour
    self->SetTextColour(*colour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetVerticalMargin[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetVerticalMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetVerticalMargin[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetVerticalMargin, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetVerticalMargin }};
//     void SetVerticalMargin(int margin);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetVerticalMargin(lua_State *L)
{
    // int margin
    int margin = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetVerticalMargin
    self->SetVerticalMargin(margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetVerticalPadding[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetVerticalPadding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetVerticalPadding[1] = {{ wxLua_wxRichTextFieldTypeStandard_SetVerticalPadding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_SetVerticalPadding }};
//     void SetVerticalPadding(int padding);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_SetVerticalPadding(lua_State *L)
{
    // int padding
    int padding = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call SetVerticalPadding
    self->SetVerticalPadding(padding);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_delete[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_op_set[] = { &wxluatype_wxRichTextFieldTypeStandard, &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_op_set[1] = {{ wxLua_wxRichTextFieldTypeStandard_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_op_set }};
//     void operator=(const wxRichTextFieldTypeStandard& field);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_op_set(lua_State *L)
{
    // const wxRichTextFieldTypeStandard field
    const wxRichTextFieldTypeStandard * field = (const wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFieldTypeStandard);
    // get this
    wxRichTextFieldTypeStandard * self = (wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call op_set
    (*self)=(*field);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor3[] = { &wxluatype_wxRichTextFieldTypeStandard, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor3(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor3[1] = {{ wxLua_wxRichTextFieldTypeStandard_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor3 }};
//     wxRichTextFieldTypeStandard(const wxRichTextFieldTypeStandard& field);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor3(lua_State *L)
{
    // const wxRichTextFieldTypeStandard field
    const wxRichTextFieldTypeStandard * field = (const wxRichTextFieldTypeStandard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldTypeStandard);
    // call constructor
    wxRichTextFieldTypeStandard* returns = new wxRichTextFieldTypeStandard(*field);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFieldTypeStandard);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeStandard);

    return 1;
}

static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor2[1] = {{ wxLua_wxRichTextFieldTypeStandard_constructor2, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextFieldTypeStandard();
static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor2(lua_State *L)
{
    // call constructor
    wxRichTextFieldTypeStandard* returns = new wxRichTextFieldTypeStandard();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFieldTypeStandard);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeStandard);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor1[] = { &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor1[1] = {{ wxLua_wxRichTextFieldTypeStandard_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor1 }};
//     wxRichTextFieldTypeStandard(const wxString& name, const wxBitmap& bitmap, int displayStyle = wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_NO_BORDER);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int displayStyle = wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_NO_BORDER
    int displayStyle = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_NO_BORDER);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextFieldTypeStandard* returns = new wxRichTextFieldTypeStandard(name, *bitmap, displayStyle);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFieldTypeStandard);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeStandard);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor[1] = {{ wxLua_wxRichTextFieldTypeStandard_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor }};
//     wxRichTextFieldTypeStandard(const wxString& name, const wxString& label, int displayStyle = wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_RECTANGLE);
static int LUACALL wxLua_wxRichTextFieldTypeStandard_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int displayStyle = wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_RECTANGLE
    int displayStyle = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_RECTANGLE);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextFieldTypeStandard* returns = new wxRichTextFieldTypeStandard(name, label, displayStyle);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFieldTypeStandard);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeStandard);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor_overload[] =
{
    { wxLua_wxRichTextFieldTypeStandard_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor3 },
    { wxLua_wxRichTextFieldTypeStandard_constructor2, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFieldTypeStandard_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor1 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFieldTypeStandard_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxRichTextFieldTypeStandard_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

void wxLua_wxRichTextFieldTypeStandard_delete_function(void** p)
{
    wxRichTextFieldTypeStandard* o = (wxRichTextFieldTypeStandard*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFieldTypeStandard_methods[] = {
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Copy, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBorderColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetBorderColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetDisplayStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetDisplayStyle, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetHorizontalMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetHorizontalMargin, 1, NULL },
    { "GetHorizontalPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetHorizontalPadding, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetLabel, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetSize, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetVerticalMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetVerticalMargin, 1, NULL },
    { "GetVerticalPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_GetVerticalPadding, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Init, 1, NULL },
    { "IsTopLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_IsTopLevel, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetBorderColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetBorderColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetDisplayStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetDisplayStyle, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetHorizontalMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetHorizontalMargin, 1, NULL },
    { "SetHorizontalPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetHorizontalPadding, 1, NULL },
    { "SetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetLabel, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetVerticalMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetVerticalMargin, 1, NULL },
    { "SetVerticalPadding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_SetVerticalPadding, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "wxRichTextFieldTypeStandard", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor_overload, s_wxluafunc_wxLua_wxRichTextFieldTypeStandard_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { 0, 0, 0, 0 },
};

int wxRichTextFieldTypeStandard_methodCount = sizeof(wxRichTextFieldTypeStandard_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxRichTextFieldTypeStandard_enums[] = {
#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxRICHTEXT_FIELD_STYLE_COMPOSITE", wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_COMPOSITE },
        { "wxRICHTEXT_FIELD_STYLE_END_TAG", wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_END_TAG },
        { "wxRICHTEXT_FIELD_STYLE_NO_BORDER", wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_NO_BORDER },
        { "wxRICHTEXT_FIELD_STYLE_RECTANGLE", wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_RECTANGLE },
        { "wxRICHTEXT_FIELD_STYLE_START_TAG", wxRichTextFieldTypeStandard::wxRICHTEXT_FIELD_STYLE_START_TAG },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

    { NULL, 0, },
};
int wxRichTextFieldTypeStandard_enumCount = sizeof(wxRichTextFieldTypeStandard_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextLine
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextLine'
int wxluatype_wxRichTextLine = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_Clone[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_Clone[1] = {{ wxLua_wxRichTextLine_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_Clone }};
//     virtual wxRichTextLine* Clone() const;
static int LUACALL wxLua_wxRichTextLine_Clone(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call Clone
    wxRichTextLine* returns = (wxRichTextLine*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_Copy[] = { &wxluatype_wxRichTextLine, &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_Copy[1] = {{ wxLua_wxRichTextLine_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextLine_Copy }};
//     void Copy(const wxRichTextLine& obj);
static int LUACALL wxLua_wxRichTextLine_Copy(lua_State *L)
{
    // const wxRichTextLine obj
    const wxRichTextLine * obj = (const wxRichTextLine *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextLine);
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call Copy
    self->Copy(*obj);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetAbsolutePosition[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetAbsolutePosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetAbsolutePosition[1] = {{ wxLua_wxRichTextLine_GetAbsolutePosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetAbsolutePosition }};
//     virtual wxPoint GetAbsolutePosition() const;
static int LUACALL wxLua_wxRichTextLine_GetAbsolutePosition(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetAbsolutePosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetAbsolutePosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetAbsoluteRange[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetAbsoluteRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetAbsoluteRange[1] = {{ wxLua_wxRichTextLine_GetAbsoluteRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetAbsoluteRange }};
//     wxRichTextRange GetAbsoluteRange() const;
static int LUACALL wxLua_wxRichTextLine_GetAbsoluteRange(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetAbsoluteRange
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->GetAbsoluteRange());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetDescent[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetDescent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetDescent[1] = {{ wxLua_wxRichTextLine_GetDescent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetDescent }};
//     int GetDescent() const;
static int LUACALL wxLua_wxRichTextLine_GetDescent(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetDescent
    int returns = (self->GetDescent());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetObjectSizes1[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetObjectSizes1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetObjectSizes1[1] = {{ wxLua_wxRichTextLine_GetObjectSizes1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetObjectSizes1 }};
//     const wxArrayInt& GetObjectSizes() const;
static int LUACALL wxLua_wxRichTextLine_GetObjectSizes1(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetObjectSizes
    const wxArrayInt* returns = (const wxArrayInt*)&self->GetObjectSizes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetObjectSizes[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetObjectSizes(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetObjectSizes[1] = {{ wxLua_wxRichTextLine_GetObjectSizes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetObjectSizes }};
//     wxArrayInt& GetObjectSizes();
static int LUACALL wxLua_wxRichTextLine_GetObjectSizes(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetObjectSizes
    wxArrayInt* returns = (wxArrayInt*)&self->GetObjectSizes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetParent[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetParent[1] = {{ wxLua_wxRichTextLine_GetParent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetParent }};
//     wxRichTextParagraph* GetParent();
static int LUACALL wxLua_wxRichTextLine_GetParent(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetParent
    wxRichTextParagraph* returns = (wxRichTextParagraph*)self->GetParent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraph);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetPosition[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetPosition[1] = {{ wxLua_wxRichTextLine_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetPosition }};
//     virtual wxPoint GetPosition() const;
static int LUACALL wxLua_wxRichTextLine_GetPosition(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetRange1[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetRange1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetRange1[1] = {{ wxLua_wxRichTextLine_GetRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetRange1 }};
//     wxRichTextRange& GetRange();
static int LUACALL wxLua_wxRichTextLine_GetRange1(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetRange
    wxRichTextRange* returns = (wxRichTextRange*)&self->GetRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetRange[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetRange(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetRange[1] = {{ wxLua_wxRichTextLine_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetRange }};
//     const wxRichTextRange& GetRange() const;
static int LUACALL wxLua_wxRichTextLine_GetRange(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetRange
    const wxRichTextRange* returns = (const wxRichTextRange*)&self->GetRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetRect[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetRect[1] = {{ wxLua_wxRichTextLine_GetRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetRect }};
//     virtual wxRect GetRect() const;
static int LUACALL wxLua_wxRichTextLine_GetRect(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_GetSize[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetSize[1] = {{ wxLua_wxRichTextLine_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetSize }};
//     virtual wxSize GetSize() const;
static int LUACALL wxLua_wxRichTextLine_GetSize(lua_State *L)
{
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_Init[] = { &wxluatype_wxRichTextLine, &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextLine_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_Init[1] = {{ wxLua_wxRichTextLine_Init, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextLine_Init }};
//     void Init(wxRichTextParagraph* parent);
static int LUACALL wxLua_wxRichTextLine_Init(lua_State *L)
{
    // wxRichTextParagraph parent
    wxRichTextParagraph * parent = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call Init
    self->Init(parent);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_SetDescent[] = { &wxluatype_wxRichTextLine, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextLine_SetDescent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_SetDescent[1] = {{ wxLua_wxRichTextLine_SetDescent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextLine_SetDescent }};
//     void SetDescent(int descent);
static int LUACALL wxLua_wxRichTextLine_SetDescent(lua_State *L)
{
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call SetDescent
    self->SetDescent(descent);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_SetPosition[] = { &wxluatype_wxRichTextLine, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextLine_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_SetPosition[1] = {{ wxLua_wxRichTextLine_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextLine_SetPosition }};
//     virtual void SetPosition(const wxPoint& pos);
static int LUACALL wxLua_wxRichTextLine_SetPosition(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call SetPosition
    self->SetPosition(*pos);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_SetRange1[] = { &wxluatype_wxRichTextLine, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextLine_SetRange1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_SetRange1[1] = {{ wxLua_wxRichTextLine_SetRange1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextLine_SetRange1 }};
//     void SetRange(long from, long to);
static int LUACALL wxLua_wxRichTextLine_SetRange1(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call SetRange
    self->SetRange(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_SetRange[] = { &wxluatype_wxRichTextLine, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextLine_SetRange(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_SetRange[1] = {{ wxLua_wxRichTextLine_SetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextLine_SetRange }};
//     void SetRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextLine_SetRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call SetRange
    self->SetRange(*range);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_SetSize[] = { &wxluatype_wxRichTextLine, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextLine_SetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_SetSize[1] = {{ wxLua_wxRichTextLine_SetSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextLine_SetSize }};
//     virtual void SetSize(const wxSize& sz);
static int LUACALL wxLua_wxRichTextLine_SetSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRichTextLine * self = (wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call SetSize
    self->SetSize(*sz);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_delete[] = { &wxluatype_wxRichTextLine, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_constructor1[] = { &wxluatype_wxRichTextLine, NULL };
static int LUACALL wxLua_wxRichTextLine_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_constructor1[1] = {{ wxLua_wxRichTextLine_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_constructor1 }};
//     wxRichTextLine(const wxRichTextLine& obj);
static int LUACALL wxLua_wxRichTextLine_constructor1(lua_State *L)
{
    // const wxRichTextLine obj
    const wxRichTextLine * obj = (const wxRichTextLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextLine);
    // call constructor
    wxRichTextLine* returns = new wxRichTextLine(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextLine);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextLine_constructor[] = { &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextLine_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_constructor[1] = {{ wxLua_wxRichTextLine_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_constructor }};
//     wxRichTextLine(wxRichTextParagraph* parent);
static int LUACALL wxLua_wxRichTextLine_constructor(lua_State *L)
{
    // wxRichTextParagraph parent
    wxRichTextParagraph * parent = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call constructor
    wxRichTextLine* returns = new wxRichTextLine(parent);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextLine);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}




#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetObjectSizes_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt)
    { wxLua_wxRichTextLine_GetObjectSizes1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetObjectSizes1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt)
    { wxLua_wxRichTextLine_GetObjectSizes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetObjectSizes },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt)
};
static int s_wxluafunc_wxLua_wxRichTextLine_GetObjectSizes_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextLine_GetObjectSizes_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_GetRange_overload[] =
{
    { wxLua_wxRichTextLine_GetRange1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetRange1 },
    { wxLua_wxRichTextLine_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_GetRange },
};
static int s_wxluafunc_wxLua_wxRichTextLine_GetRange_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextLine_GetRange_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_SetRange_overload[] =
{
    { wxLua_wxRichTextLine_SetRange1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextLine_SetRange1 },
    { wxLua_wxRichTextLine_SetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextLine_SetRange },
};
static int s_wxluafunc_wxLua_wxRichTextLine_SetRange_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextLine_SetRange_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextLine_constructor_overload[] =
{
    { wxLua_wxRichTextLine_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_constructor1 },
    { wxLua_wxRichTextLine_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextLine_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextLine_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextLine_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextLine_delete_function(void** p)
{
    wxRichTextLine* o = (wxRichTextLine*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextLine_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_Copy, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetAbsolutePosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetAbsolutePosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetAbsoluteRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetAbsoluteRange, 1, NULL },
    { "GetDescent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetDescent, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt))
    { "GetObjectSizes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetObjectSizes_overload, s_wxluafunc_wxLua_wxRichTextLine_GetObjectSizes_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)) && (wxLUA_USE_wxArrayInt))

    { "GetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetParent, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetRange_overload, s_wxluafunc_wxLua_wxRichTextLine_GetRange_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetRect, 1, NULL },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_GetSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_Init, 1, NULL },
    { "SetDescent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_SetDescent, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_SetPosition, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_SetRange_overload, s_wxluafunc_wxLua_wxRichTextLine_SetRange_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextLine_SetSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextLine_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextLine", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextLine_constructor_overload, s_wxluafunc_wxLua_wxRichTextLine_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextLine_methodCount = sizeof(wxRichTextLine_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)
// ---------------------------------------------------------------------------
// Bind class wxRichTextLineList
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextLineList'
int wxluatype_wxRichTextLineList = WXLUA_TUNKNOWN;



void wxLua_wxRichTextLineList_delete_function(void** p)
{
    wxRichTextLineList* o = (wxRichTextLineList*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextLineList_methods[] = {
    { 0, 0, 0, 0 },
};

int wxRichTextLineList_methodCount = sizeof(wxRichTextLineList_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextParagraph
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextParagraph'
int wxluatype_wxRichTextParagraph = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_AllocateLine[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraph_AllocateLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_AllocateLine[1] = {{ wxLua_wxRichTextParagraph_AllocateLine, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_AllocateLine }};
//     wxRichTextLine* AllocateLine(int pos);
static int LUACALL wxLua_wxRichTextParagraph_AllocateLine(lua_State *L)
{
    // int pos
    int pos = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call AllocateLine
    wxRichTextLine* returns = (wxRichTextLine*)self->AllocateLine(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_ApplyParagraphStyle[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextLine, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxRichTextParagraph_ApplyParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_ApplyParagraphStyle[1] = {{ wxLua_wxRichTextParagraph_ApplyParagraphStyle, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextParagraph_ApplyParagraphStyle }};
//     virtual void ApplyParagraphStyle(wxRichTextLine* line, const wxRichTextAttr& attr, const wxRect& rect, wxDC& dc);
static int LUACALL wxLua_wxRichTextParagraph_ApplyParagraphStyle(lua_State *L)
{
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextLine line
    wxRichTextLine * line = (wxRichTextLine *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextLine);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call ApplyParagraphStyle
    self->ApplyParagraphStyle(line, *attr, *rect, *dc);

    return 0;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_CalculateRange[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextParagraph_CalculateRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_CalculateRange[1] = {{ wxLua_wxRichTextParagraph_CalculateRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraph_CalculateRange }};
//     virtual void CalculateRange(long start, long& end);
static int LUACALL wxLua_wxRichTextParagraph_CalculateRange(lua_State *L)
{
    // long end
    long * end = (long *)wxlua_touserdata(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call CalculateRange
    self->CalculateRange(start, *end);

    return 0;
}

static int LUACALL wxLua_wxRichTextParagraph_ClearDefaultTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_ClearDefaultTabs[1] = {{ wxLua_wxRichTextParagraph_ClearDefaultTabs, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void ClearDefaultTabs();
static int LUACALL wxLua_wxRichTextParagraph_ClearDefaultTabs(lua_State *L)
{
    // call ClearDefaultTabs
    wxRichTextParagraph::ClearDefaultTabs();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_ClearLines[] = { &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextParagraph_ClearLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_ClearLines[1] = {{ wxLua_wxRichTextParagraph_ClearLines, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_ClearLines }};
//     void ClearLines();
static int LUACALL wxLua_wxRichTextParagraph_ClearLines(lua_State *L)
{
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call ClearLines
    self->ClearLines();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_ClearUnusedLines[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraph_ClearUnusedLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_ClearUnusedLines[1] = {{ wxLua_wxRichTextParagraph_ClearUnusedLines, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_ClearUnusedLines }};
//     bool ClearUnusedLines(int lineCount);
static int LUACALL wxLua_wxRichTextParagraph_ClearUnusedLines(lua_State *L)
{
    // int lineCount
    int lineCount = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call ClearUnusedLines
    bool returns = (self->ClearUnusedLines(lineCount));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_Clone[] = { &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextParagraph_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_Clone[1] = {{ wxLua_wxRichTextParagraph_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextParagraph_Clone(lua_State *L)
{
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_Copy[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextParagraph_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_Copy[1] = {{ wxLua_wxRichTextParagraph_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_Copy }};
//     void Copy(const wxRichTextParagraph& obj);
static int LUACALL wxLua_wxRichTextParagraph_Copy(lua_State *L)
{
    // const wxRichTextParagraph obj
    const wxRichTextParagraph * obj = (const wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call Copy
    self->Copy(*obj);

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_Draw[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraph_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_Draw[1] = {{ wxLua_wxRichTextParagraph_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextParagraph_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextParagraph_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_FindObjectAtPosition[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraph_FindObjectAtPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_FindObjectAtPosition[1] = {{ wxLua_wxRichTextParagraph_FindObjectAtPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_FindObjectAtPosition }};
//     wxRichTextObject* FindObjectAtPosition(long position);
static int LUACALL wxLua_wxRichTextParagraph_FindObjectAtPosition(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call FindObjectAtPosition
    wxRichTextObject* returns = (wxRichTextObject*)self->FindObjectAtPosition(position);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_FindPosition[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraph_FindPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_FindPosition[1] = {{ wxLua_wxRichTextParagraph_FindPosition, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextParagraph_FindPosition }};
//     virtual bool FindPosition(wxDC& dc, wxRichTextDrawingContext& context, long index, wxPoint& pt, int* height, bool forceLineStart);
static int LUACALL wxLua_wxRichTextParagraph_FindPosition(lua_State *L)
{
    // bool forceLineStart
    bool forceLineStart = wxlua_getbooleantype(L, 7);
    // int height
    int * height = (int *)wxlua_touserdata(L, 6);
    // wxPoint pt
    wxPoint * pt = (wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint);
    // long index
    long index = (long)wxlua_getnumbertype(L, 4);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call FindPosition
    bool returns = (self->FindPosition(*dc, *context, index, *pt, height, forceLineStart));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_FindWrapPosition[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextRange, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextParagraph_FindWrapPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_FindWrapPosition[1] = {{ wxLua_wxRichTextParagraph_FindWrapPosition, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextParagraph_FindWrapPosition }};
//     bool FindWrapPosition(const wxRichTextRange& range, wxDC& dc, wxRichTextDrawingContext& context, int availableSpace, long& wrapPosition, wxArrayInt* partialExtents);
static int LUACALL wxLua_wxRichTextParagraph_FindWrapPosition(lua_State *L)
{
    // wxArrayInt partialExtents
    wxArrayInt * partialExtents = (wxArrayInt *)wxluaT_getuserdatatype(L, 7, wxluatype_wxArrayInt);
    // long wrapPosition
    long * wrapPosition = (long *)wxlua_touserdata(L, 6);
    // int availableSpace
    int availableSpace = (int)wxlua_getnumbertype(L, 5);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call FindWrapPosition
    bool returns = (self->FindWrapPosition(*range, *dc, *context, availableSpace, *wrapPosition, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetBulletText[] = { &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetBulletText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetBulletText[1] = {{ wxLua_wxRichTextParagraph_GetBulletText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetBulletText }};
//     wxString GetBulletText();
static int LUACALL wxLua_wxRichTextParagraph_GetBulletText(lua_State *L)
{
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetBulletText
    wxString returns = (self->GetBulletText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetCombinedAttributes1[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetCombinedAttributes1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetCombinedAttributes1[1] = {{ wxLua_wxRichTextParagraph_GetCombinedAttributes1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetCombinedAttributes1 }};
//     wxRichTextAttr GetCombinedAttributes(bool includingBoxAttr = false) const;
static int LUACALL wxLua_wxRichTextParagraph_GetCombinedAttributes1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool includingBoxAttr = false
    bool includingBoxAttr = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetCombinedAttributes
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->GetCombinedAttributes(includingBoxAttr));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetCombinedAttributes[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetCombinedAttributes(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetCombinedAttributes[1] = {{ wxLua_wxRichTextParagraph_GetCombinedAttributes, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetCombinedAttributes }};
//     wxRichTextAttr GetCombinedAttributes(const wxRichTextAttr& contentStyle, bool includingBoxAttr = false) const;
static int LUACALL wxLua_wxRichTextParagraph_GetCombinedAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool includingBoxAttr = false
    bool includingBoxAttr = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxRichTextAttr contentStyle
    const wxRichTextAttr * contentStyle = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetCombinedAttributes
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->GetCombinedAttributes(*contentStyle, includingBoxAttr));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetContiguousPlainText[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TSTRING, &wxluatype_wxRichTextRange, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetContiguousPlainText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetContiguousPlainText[1] = {{ wxLua_wxRichTextParagraph_GetContiguousPlainText, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetContiguousPlainText }};
//     bool GetContiguousPlainText(wxString& text, const wxRichTextRange& range, bool fromStart = true);
static int LUACALL wxLua_wxRichTextParagraph_GetContiguousPlainText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool fromStart = true
    bool fromStart = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // wxString text
    wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetContiguousPlainText
    bool returns = (self->GetContiguousPlainText(text, *range, fromStart));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static int LUACALL wxLua_wxRichTextParagraph_GetDefaultTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetDefaultTabs[1] = {{ wxLua_wxRichTextParagraph_GetDefaultTabs, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static const wxArrayInt& GetDefaultTabs();
static int LUACALL wxLua_wxRichTextParagraph_GetDefaultTabs(lua_State *L)
{
    // call GetDefaultTabs
    const wxArrayInt* returns = (const wxArrayInt*)&wxRichTextParagraph::GetDefaultTabs();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetFirstLineBreakPosition[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetFirstLineBreakPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetFirstLineBreakPosition[1] = {{ wxLua_wxRichTextParagraph_GetFirstLineBreakPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetFirstLineBreakPosition }};
//     long GetFirstLineBreakPosition(long pos);
static int LUACALL wxLua_wxRichTextParagraph_GetFirstLineBreakPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetFirstLineBreakPosition
    long returns = (self->GetFirstLineBreakPosition(pos));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetLines[] = { &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetLines[1] = {{ wxLua_wxRichTextParagraph_GetLines, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetLines }};
//     wxRichTextLineList& GetLines();
static int LUACALL wxLua_wxRichTextParagraph_GetLines(lua_State *L)
{
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetLines
    wxRichTextLineList* returns = (wxRichTextLineList*)&self->GetLines();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLineList);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetRangeSize[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetRangeSize[1] = {{ wxLua_wxRichTextParagraph_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextParagraph_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_GetXMLNodeName[] = { &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextParagraph_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetXMLNodeName[1] = {{ wxLua_wxRichTextParagraph_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextParagraph_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_HitTest[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraph_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_HitTest[1] = {{ wxLua_wxRichTextParagraph_HitTest, WXLUAMETHOD_METHOD, 7, 8, s_wxluatypeArray_wxLua_wxRichTextParagraph_HitTest }};
//     virtual int HitTest(wxDC& dc, wxRichTextDrawingContext& context, const wxPoint& pt, long& textPosition, wxRichTextObject** obj, wxRichTextObject** contextObj, int flags = 0);
static int LUACALL wxLua_wxRichTextParagraph_HitTest(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // wxRichTextObject contextObj
    wxRichTextObject ** contextObj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextObject);
    // wxRichTextObject obj
    wxRichTextObject ** obj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject);
    // long textPosition
    long * textPosition = (long *)wxlua_touserdata(L, 5);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call HitTest
    int returns = (self->HitTest(*dc, *context, *pt, *textPosition, obj, contextObj, flags));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextParagraph_InitDefaultTabs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_InitDefaultTabs[1] = {{ wxLua_wxRichTextParagraph_InitDefaultTabs, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void InitDefaultTabs();
static int LUACALL wxLua_wxRichTextParagraph_InitDefaultTabs(lua_State *L)
{
    // call InitDefaultTabs
    wxRichTextParagraph::InitDefaultTabs();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_InsertText[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextParagraph_InsertText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_InsertText[1] = {{ wxLua_wxRichTextParagraph_InsertText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraph_InsertText }};
//     virtual bool InsertText(long pos, const wxString& text);
static int LUACALL wxLua_wxRichTextParagraph_InsertText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call InsertText
    bool returns = (self->InsertText(pos, text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_Layout[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextParagraph_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_Layout[1] = {{ wxLua_wxRichTextParagraph_Layout, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextParagraph_Layout }};
//     virtual bool Layout(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextParagraph_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 6);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call Layout
    bool returns = (self->Layout(*dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_MoveFromList[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxList, NULL };
static int LUACALL wxLua_wxRichTextParagraph_MoveFromList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_MoveFromList[1] = {{ wxLua_wxRichTextParagraph_MoveFromList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_MoveFromList }};
//     virtual void MoveFromList(wxList& list);
static int LUACALL wxLua_wxRichTextParagraph_MoveFromList(lua_State *L)
{
    // wxList list
    wxList * list = (wxList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxList);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call MoveFromList
    self->MoveFromList(*list);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_MoveToList[] = { &wxluatype_wxRichTextParagraph, &wxluatype_wxRichTextObject, &wxluatype_wxList, NULL };
static int LUACALL wxLua_wxRichTextParagraph_MoveToList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_MoveToList[1] = {{ wxLua_wxRichTextParagraph_MoveToList, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextParagraph_MoveToList }};
//     virtual void MoveToList(wxRichTextObject* obj, wxList& list);
static int LUACALL wxLua_wxRichTextParagraph_MoveToList(lua_State *L)
{
    // wxList list
    wxList * list = (wxList *)wxluaT_getuserdatatype(L, 3, wxluatype_wxList);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call MoveToList
    self->MoveToList(obj, *list);

    return 0;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_SplitAt[] = { &wxluatype_wxRichTextParagraph, &wxluatype_TNUMBER, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextParagraph_SplitAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_SplitAt[1] = {{ wxLua_wxRichTextParagraph_SplitAt, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraph_SplitAt }};
//     virtual wxRichTextObject* SplitAt(long pos, wxRichTextObject** previousObject = NULL);
static int LUACALL wxLua_wxRichTextParagraph_SplitAt(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject previousObject = NULL
    wxRichTextObject ** previousObject = (argCount >= 3 ? (wxRichTextObject **)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject) : NULL);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextParagraph * self = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call SplitAt
    wxRichTextObject* returns = (wxRichTextObject*)self->SplitAt(pos, previousObject);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_delete[] = { &wxluatype_wxRichTextParagraph, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor2[] = { &wxluatype_wxRichTextParagraph, NULL };
static int LUACALL wxLua_wxRichTextParagraph_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_constructor2[1] = {{ wxLua_wxRichTextParagraph_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor2 }};
//     wxRichTextParagraph(const wxRichTextParagraph& obj);
static int LUACALL wxLua_wxRichTextParagraph_constructor2(lua_State *L)
{
    // const wxRichTextParagraph obj
    const wxRichTextParagraph * obj = (const wxRichTextParagraph *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraph);
    // call constructor
    wxRichTextParagraph* returns = new wxRichTextParagraph(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextParagraph);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraph);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor1[] = { &wxluatype_TSTRING, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraph_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_constructor1[1] = {{ wxLua_wxRichTextParagraph_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 4, s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor1 }};
//     wxRichTextParagraph(const wxString& text, wxRichTextObject* parent = NULL, wxRichTextAttr* paraStyle = NULL, wxRichTextAttr* charStyle = NULL);
static int LUACALL wxLua_wxRichTextParagraph_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr charStyle = NULL
    wxRichTextAttr * charStyle = (argCount >= 4 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : NULL);
    // wxRichTextAttr paraStyle = NULL
    wxRichTextAttr * paraStyle = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 2 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject) : NULL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextParagraph* returns = new wxRichTextParagraph(text, parent, paraStyle, charStyle);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextParagraph);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraph);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor[] = { &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextParagraph_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_constructor[1] = {{ wxLua_wxRichTextParagraph_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor }};
//     wxRichTextParagraph(wxRichTextObject* parent = NULL, wxRichTextAttr* style = NULL);
static int LUACALL wxLua_wxRichTextParagraph_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr style = NULL
    wxRichTextAttr * style = (argCount >= 2 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr) : NULL);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 1 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject) : NULL);
    // call constructor
    wxRichTextParagraph* returns = new wxRichTextParagraph(parent, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextParagraph);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraph);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_GetCombinedAttributes_overload[] =
{
    { wxLua_wxRichTextParagraph_GetCombinedAttributes1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetCombinedAttributes1 },
    { wxLua_wxRichTextParagraph_GetCombinedAttributes, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextParagraph_GetCombinedAttributes },
};
static int s_wxluafunc_wxLua_wxRichTextParagraph_GetCombinedAttributes_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraph_GetCombinedAttributes_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraph_constructor_overload[] =
{
    { wxLua_wxRichTextParagraph_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor2 },
    { wxLua_wxRichTextParagraph_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 4, s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor1 },
    { wxLua_wxRichTextParagraph_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxRichTextParagraph_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextParagraph_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraph_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextParagraph_delete_function(void** p)
{
    wxRichTextParagraph* o = (wxRichTextParagraph*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextParagraph_methods[] = {
    { "AllocateLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_AllocateLine, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "ApplyParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_ApplyParagraphStyle, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "CalculateRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_CalculateRange, 1, NULL },
    { "ClearDefaultTabs", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextParagraph_ClearDefaultTabs, 1, NULL },
    { "ClearLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_ClearLines, 1, NULL },
    { "ClearUnusedLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_ClearUnusedLines, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_Copy, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "FindObjectAtPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_FindObjectAtPosition, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_FindPosition, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindWrapPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_FindWrapPosition, 1, NULL },
#endif // ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetBulletText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_GetBulletText, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetCombinedAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_GetCombinedAttributes_overload, s_wxluafunc_wxLua_wxRichTextParagraph_GetCombinedAttributes_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetContiguousPlainText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_GetContiguousPlainText, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetDefaultTabs", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextParagraph_GetDefaultTabs, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetFirstLineBreakPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_GetFirstLineBreakPosition, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)
    { "GetLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_GetLines, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_GetXMLNodeName, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_HitTest, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "InitDefaultTabs", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextParagraph_InitDefaultTabs, 1, NULL },
    { "InsertText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_InsertText, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "MoveFromList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_MoveFromList, 1, NULL },
    { "MoveToList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_MoveToList, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SplitAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraph_SplitAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextParagraph_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextParagraph", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextParagraph_constructor_overload, s_wxluafunc_wxLua_wxRichTextParagraph_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextParagraph_methodCount = sizeof(wxRichTextParagraph_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextPlainText
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextPlainText'
int wxluatype_wxRichTextPlainText = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_AdjustAttributes[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextPlainText_AdjustAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_AdjustAttributes[1] = {{ wxLua_wxRichTextPlainText_AdjustAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_AdjustAttributes }};
//     virtual bool AdjustAttributes(wxRichTextAttr& attr, wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextPlainText_AdjustAttributes(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call AdjustAttributes
    bool returns = (self->AdjustAttributes(*attr, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_CalculateRange[] = { &wxluatype_wxRichTextPlainText, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextPlainText_CalculateRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_CalculateRange[1] = {{ wxLua_wxRichTextPlainText_CalculateRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_CalculateRange }};
//     virtual void CalculateRange(long start, long& end);
static int LUACALL wxLua_wxRichTextPlainText_CalculateRange(lua_State *L)
{
    // long end
    long * end = (long *)wxlua_touserdata(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call CalculateRange
    self->CalculateRange(start, *end);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_CanMerge[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextPlainText_CanMerge(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_CanMerge[1] = {{ wxLua_wxRichTextPlainText_CanMerge, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_CanMerge }};
//     virtual bool CanMerge(wxRichTextObject* object, wxRichTextDrawingContext& context) const;
static int LUACALL wxLua_wxRichTextPlainText_CanMerge(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextObject object
    wxRichTextObject * object = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call CanMerge
    bool returns = (self->CanMerge(object, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_CanSplit[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextPlainText_CanSplit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_CanSplit[1] = {{ wxLua_wxRichTextPlainText_CanSplit, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_CanSplit }};
//     virtual bool CanSplit(wxRichTextDrawingContext& context) const;
static int LUACALL wxLua_wxRichTextPlainText_CanSplit(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextDrawingContext);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call CanSplit
    bool returns = (self->CanSplit(*context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_Clone[] = { &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextPlainText_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_Clone[1] = {{ wxLua_wxRichTextPlainText_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextPlainText_Clone(lua_State *L)
{
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_Copy[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextPlainText_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_Copy[1] = {{ wxLua_wxRichTextPlainText_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_Copy }};
//     void Copy(const wxRichTextPlainText& obj);
static int LUACALL wxLua_wxRichTextPlainText_Copy(lua_State *L)
{
    // const wxRichTextPlainText obj
    const wxRichTextPlainText * obj = (const wxRichTextPlainText *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextPlainText);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call Copy
    self->Copy(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_DeleteRange[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextPlainText_DeleteRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_DeleteRange[1] = {{ wxLua_wxRichTextPlainText_DeleteRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_DeleteRange }};
//     virtual bool DeleteRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextPlainText_DeleteRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call DeleteRange
    bool returns = (self->DeleteRange(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_DoSplit[] = { &wxluatype_wxRichTextPlainText, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPlainText_DoSplit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_DoSplit[1] = {{ wxLua_wxRichTextPlainText_DoSplit, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_DoSplit }};
//     virtual wxRichTextObject* DoSplit(long pos);
static int LUACALL wxLua_wxRichTextPlainText_DoSplit(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call DoSplit
    wxRichTextObject* returns = (wxRichTextObject*)self->DoSplit(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_Draw[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPlainText_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_Draw[1] = {{ wxLua_wxRichTextPlainText_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextPlainText_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextPlainText_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_Dump[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxTextOutputStream, NULL };
static int LUACALL wxLua_wxRichTextPlainText_Dump(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_Dump[1] = {{ wxLua_wxRichTextPlainText_Dump, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_Dump }};
//     virtual void Dump(wxTextOutputStream& stream);
static int LUACALL wxLua_wxRichTextPlainText_Dump(lua_State *L)
{
    // wxTextOutputStream stream
    wxTextOutputStream * stream = (wxTextOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextOutputStream);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call Dump
    self->Dump(*stream);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_ExportXML1[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextPlainText_ExportXML1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_ExportXML1[1] = {{ wxLua_wxRichTextPlainText_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_ExportXML1 }};
//     virtual bool ExportXML(wxXmlNode* parent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextPlainText_ExportXML1(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode parent
    wxXmlNode * parent = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call ExportXML
    bool returns = (self->ExportXML(parent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_ExportXML[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxOutputStream, &wxluatype_TNUMBER, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextPlainText_ExportXML(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_ExportXML[1] = {{ wxLua_wxRichTextPlainText_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextPlainText_ExportXML }};
//     virtual bool ExportXML(wxOutputStream& stream, int indent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextPlainText_ExportXML(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 3);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call ExportXML
    bool returns = (self->ExportXML(*stream, indent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_GetFirstLineBreakPosition[] = { &wxluatype_wxRichTextPlainText, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPlainText_GetFirstLineBreakPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_GetFirstLineBreakPosition[1] = {{ wxLua_wxRichTextPlainText_GetFirstLineBreakPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_GetFirstLineBreakPosition }};
//     long GetFirstLineBreakPosition(long pos);
static int LUACALL wxLua_wxRichTextPlainText_GetFirstLineBreakPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call GetFirstLineBreakPosition
    long returns = (self->GetFirstLineBreakPosition(pos));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_GetRangeSize[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextPlainText_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_GetRangeSize[1] = {{ wxLua_wxRichTextPlainText_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextPlainText_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextPlainText_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_GetText[] = { &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextPlainText_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_GetText[1] = {{ wxLua_wxRichTextPlainText_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_GetText }};
//     const wxString& GetText() const;
static int LUACALL wxLua_wxRichTextPlainText_GetText(lua_State *L)
{
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_GetTextForRange[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextPlainText_GetTextForRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_GetTextForRange[1] = {{ wxLua_wxRichTextPlainText_GetTextForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_GetTextForRange }};
//     virtual wxString GetTextForRange(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextPlainText_GetTextForRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call GetTextForRange
    wxString returns = (self->GetTextForRange(*range));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_GetXMLNodeName[] = { &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextPlainText_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_GetXMLNodeName[1] = {{ wxLua_wxRichTextPlainText_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextPlainText_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_ImportFromXML[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextBuffer, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextPlainText_ImportFromXML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_ImportFromXML[1] = {{ wxLua_wxRichTextPlainText_ImportFromXML, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextPlainText_ImportFromXML }};
//     virtual bool ImportFromXML(wxRichTextBuffer* buffer, wxXmlNode* node, wxRichTextXMLHandler* handler, bool* recurse);
static int LUACALL wxLua_wxRichTextPlainText_ImportFromXML(lua_State *L)
{
    // bool recurse
    bool * recurse = (bool *)wxlua_touserdata(L, 5);
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call ImportFromXML
    bool returns = (self->ImportFromXML(buffer, node, handler, recurse));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_IsEmpty[] = { &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextPlainText_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_IsEmpty[1] = {{ wxLua_wxRichTextPlainText_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_IsEmpty }};
//     virtual bool IsEmpty() const;
static int LUACALL wxLua_wxRichTextPlainText_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_Layout[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPlainText_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_Layout[1] = {{ wxLua_wxRichTextPlainText_Layout, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextPlainText_Layout }};
//     virtual bool Layout(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextPlainText_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 6);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call Layout
    bool returns = (self->Layout(*dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_Merge[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextPlainText_Merge(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_Merge[1] = {{ wxLua_wxRichTextPlainText_Merge, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_Merge }};
//     virtual bool Merge(wxRichTextObject* object, wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextPlainText_Merge(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextObject object
    wxRichTextObject * object = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call Merge
    bool returns = (self->Merge(object, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_SetText[] = { &wxluatype_wxRichTextPlainText, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextPlainText_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_SetText[1] = {{ wxLua_wxRichTextPlainText_SetText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_SetText }};
//     void SetText(const wxString& text);
static int LUACALL wxLua_wxRichTextPlainText_SetText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call SetText
    self->SetText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_Split[] = { &wxluatype_wxRichTextPlainText, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextPlainText_Split(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_Split[1] = {{ wxLua_wxRichTextPlainText_Split, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPlainText_Split }};
//     virtual wxRichTextObject* Split(wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextPlainText_Split(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextDrawingContext);
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call Split
    wxRichTextObject* returns = (wxRichTextObject*)self->Split(*context);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_UsesParagraphAttributes[] = { &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextPlainText_UsesParagraphAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_UsesParagraphAttributes[1] = {{ wxLua_wxRichTextPlainText_UsesParagraphAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_UsesParagraphAttributes }};
//     virtual bool UsesParagraphAttributes() const;
static int LUACALL wxLua_wxRichTextPlainText_UsesParagraphAttributes(lua_State *L)
{
    // get this
    wxRichTextPlainText * self = (wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call UsesParagraphAttributes
    bool returns = (self->UsesParagraphAttributes());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_delete[] = { &wxluatype_wxRichTextPlainText, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_constructor1[] = { &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextPlainText_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_constructor1[1] = {{ wxLua_wxRichTextPlainText_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_constructor1 }};
//     wxRichTextPlainText(const wxRichTextPlainText& obj);
static int LUACALL wxLua_wxRichTextPlainText_constructor1(lua_State *L)
{
    // const wxRichTextPlainText obj
    const wxRichTextPlainText * obj = (const wxRichTextPlainText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainText);
    // call constructor
    wxRichTextPlainText* returns = new wxRichTextPlainText(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextPlainText);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextPlainText);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainText_constructor[] = { &wxluatype_TSTRING, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextPlainText_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_constructor[1] = {{ wxLua_wxRichTextPlainText_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_constructor }};
//     wxRichTextPlainText(const wxString& text = wxEmptyString, wxRichTextObject* parent = NULL, wxRichTextAttr* style = NULL);
static int LUACALL wxLua_wxRichTextPlainText_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr style = NULL
    wxRichTextAttr * style = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 2 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject) : NULL);
    // const wxString text = wxEmptyString
    const wxString text = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxRichTextPlainText* returns = new wxRichTextPlainText(text, parent, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextPlainText);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextPlainText);

    return 1;
}




#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_ExportXML_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextPlainText_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_ExportXML1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
    { wxLua_wxRichTextPlainText_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextPlainText_ExportXML },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextPlainText_ExportXML_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextPlainText_ExportXML_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainText_constructor_overload[] =
{
    { wxLua_wxRichTextPlainText_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainText_constructor1 },
    { wxLua_wxRichTextPlainText_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxRichTextPlainText_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextPlainText_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextPlainText_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextPlainText_delete_function(void** p)
{
    wxRichTextPlainText* o = (wxRichTextPlainText*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextPlainText_methods[] = {
    { "AdjustAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_AdjustAttributes, 1, NULL },
    { "CalculateRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_CalculateRange, 1, NULL },
    { "CanMerge", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_CanMerge, 1, NULL },
    { "CanSplit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_CanSplit, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_Copy, 1, NULL },
    { "DeleteRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_DeleteRange, 1, NULL },
    { "DoSplit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_DoSplit, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { "Dump", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_Dump, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
    { "ExportXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_ExportXML_overload, s_wxluafunc_wxLua_wxRichTextPlainText_ExportXML_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

    { "GetFirstLineBreakPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_GetFirstLineBreakPosition, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_GetText, 1, NULL },
    { "GetTextForRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_GetTextForRange, 1, NULL },
    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_GetXMLNodeName, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "ImportFromXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_ImportFromXML, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_IsEmpty, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Merge", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_Merge, 1, NULL },
    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_SetText, 1, NULL },
    { "Split", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_Split, 1, NULL },
    { "UsesParagraphAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainText_UsesParagraphAttributes, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextPlainText_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextPlainText", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextPlainText_constructor_overload, s_wxluafunc_wxLua_wxRichTextPlainText_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextPlainText_methodCount = sizeof(wxRichTextPlainText_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextImageBlock
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextImageBlock'
int wxluatype_wxRichTextImageBlock = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_Clear[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_Clear[1] = {{ wxLua_wxRichTextImageBlock_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextImageBlock_Clear(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_Copy[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_Copy[1] = {{ wxLua_wxRichTextImageBlock_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_Copy }};
//     void Copy(const wxRichTextImageBlock& block);
static int LUACALL wxLua_wxRichTextImageBlock_Copy(lua_State *L)
{
    // const wxRichTextImageBlock block
    const wxRichTextImageBlock * block = (const wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextImageBlock);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call Copy
    self->Copy(*block);

    return 0;
}


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_DoMakeImageBlock[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxImage, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_DoMakeImageBlock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_DoMakeImageBlock[1] = {{ wxLua_wxRichTextImageBlock_DoMakeImageBlock, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImageBlock_DoMakeImageBlock }};
//     virtual bool DoMakeImageBlock(const wxImage& image, wxBitmapType imageType);
static int LUACALL wxLua_wxRichTextImageBlock_DoMakeImageBlock(lua_State *L)
{
    // wxBitmapType imageType
    wxBitmapType imageType = (wxBitmapType)wxlua_getenumtype(L, 3);
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call DoMakeImageBlock
    bool returns = (self->DoMakeImageBlock(*image, imageType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetData[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_GetData[1] = {{ wxLua_wxRichTextImageBlock_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetData }};
//     unsigned char* GetData() const;
static int LUACALL wxLua_wxRichTextImageBlock_GetData(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call GetData
    unsigned char* returns = (unsigned char*)self->GetData();
    // push the result string
    lua_pushstring(L, (const char *)returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetDataSize[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_GetDataSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_GetDataSize[1] = {{ wxLua_wxRichTextImageBlock_GetDataSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetDataSize }};
//     size_t GetDataSize() const;
static int LUACALL wxLua_wxRichTextImageBlock_GetDataSize(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call GetDataSize
    size_t returns = (self->GetDataSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetExtension[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_GetExtension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_GetExtension[1] = {{ wxLua_wxRichTextImageBlock_GetExtension, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetExtension }};
//     wxString GetExtension() const;
static int LUACALL wxLua_wxRichTextImageBlock_GetExtension(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call GetExtension
    wxString returns = (self->GetExtension());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetImageType[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_GetImageType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_GetImageType[1] = {{ wxLua_wxRichTextImageBlock_GetImageType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_GetImageType }};
//     wxBitmapType GetImageType() const;
static int LUACALL wxLua_wxRichTextImageBlock_GetImageType(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call GetImageType
    wxBitmapType returns = (self->GetImageType());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_Init[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_Init[1] = {{ wxLua_wxRichTextImageBlock_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextImageBlock_Init(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_IsOk[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_IsOk[1] = {{ wxLua_wxRichTextImageBlock_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_IsOk }};
//     bool IsOk() const;
static int LUACALL wxLua_wxRichTextImageBlock_IsOk(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_Load[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_Load(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_Load[1] = {{ wxLua_wxRichTextImageBlock_Load, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_Load }};
//     bool Load(wxImage& image);
static int LUACALL wxLua_wxRichTextImageBlock_Load(lua_State *L)
{
    // wxImage image
    wxImage * image = (wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call Load
    bool returns = (self->Load(*image));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlock1[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxImage, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_MakeImageBlock1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlock1[1] = {{ wxLua_wxRichTextImageBlock_MakeImageBlock1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlock1 }};
//     virtual bool MakeImageBlock(wxImage& image, wxBitmapType imageType, int quality = 80);
static int LUACALL wxLua_wxRichTextImageBlock_MakeImageBlock1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int quality = 80
    int quality = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 80);
    // wxBitmapType imageType
    wxBitmapType imageType = (wxBitmapType)wxlua_getenumtype(L, 3);
    // wxImage image
    wxImage * image = (wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call MakeImageBlock
    bool returns = (self->MakeImageBlock(*image, imageType, quality));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlock[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_wxImage, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_MakeImageBlock(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlock[1] = {{ wxLua_wxRichTextImageBlock_MakeImageBlock, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlock }};
//                                 wxImage& image, bool convertToJPEG = true);
static int LUACALL wxLua_wxRichTextImageBlock_MakeImageBlock(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool convertToJPEG = true
    bool convertToJPEG = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : true);
    // wxImage image
    wxImage * image = (wxImage *)wxluaT_getuserdatatype(L, 4, wxluatype_wxImage);
    // wxBitmapType imageType
    wxBitmapType imageType = (wxBitmapType)wxlua_getenumtype(L, 3);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call MakeImageBlock
    bool returns = (self->MakeImageBlock(filename, imageType, *image, convertToJPEG));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlockDefaultQuality[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxImage, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_MakeImageBlockDefaultQuality(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlockDefaultQuality[1] = {{ wxLua_wxRichTextImageBlock_MakeImageBlockDefaultQuality, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlockDefaultQuality }};
//     virtual bool MakeImageBlockDefaultQuality(const wxImage& image, wxBitmapType imageType);
static int LUACALL wxLua_wxRichTextImageBlock_MakeImageBlockDefaultQuality(lua_State *L)
{
    // wxBitmapType imageType
    wxBitmapType imageType = (wxBitmapType)wxlua_getenumtype(L, 3);
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call MakeImageBlockDefaultQuality
    bool returns = (self->MakeImageBlockDefaultQuality(*image, imageType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_Ok[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_Ok(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_Ok[1] = {{ wxLua_wxRichTextImageBlock_Ok, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_Ok }};
//     bool Ok() const;
static int LUACALL wxLua_wxRichTextImageBlock_Ok(lua_State *L)
{
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call Ok
    bool returns = (self->Ok());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadBlock1[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_ReadBlock1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_ReadBlock1[1] = {{ wxLua_wxRichTextImageBlock_ReadBlock1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadBlock1 }};
//     static unsigned char* ReadBlock(const wxString& filename, size_t size);
static int LUACALL wxLua_wxRichTextImageBlock_ReadBlock1(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getuintegertype(L, 2);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call ReadBlock
    unsigned char* returns = (unsigned char*)wxRichTextImageBlock::ReadBlock(filename, size);
    // push the result string
    lua_pushstring(L, (const char *)returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadBlock[] = { &wxluatype_wxInputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_ReadBlock(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_ReadBlock[1] = {{ wxLua_wxRichTextImageBlock_ReadBlock, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadBlock }};
//     static unsigned char* ReadBlock(wxInputStream& stream, size_t size);
static int LUACALL wxLua_wxRichTextImageBlock_ReadBlock(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getuintegertype(L, 2);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxInputStream);
    // call ReadBlock
    unsigned char* returns = (unsigned char*)wxRichTextImageBlock::ReadBlock(*stream, size);
    // push the result string
    lua_pushstring(L, (const char *)returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadHex[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxInputStream, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_ReadHex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_ReadHex[1] = {{ wxLua_wxRichTextImageBlock_ReadHex, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadHex }};
//     bool ReadHex(wxInputStream& stream, int length, wxBitmapType imageType);
static int LUACALL wxLua_wxRichTextImageBlock_ReadHex(lua_State *L)
{
    // wxBitmapType imageType
    wxBitmapType imageType = (wxBitmapType)wxlua_getenumtype(L, 4);
    // int length
    int length = (int)wxlua_getnumbertype(L, 3);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call ReadHex
    bool returns = (self->ReadHex(*stream, length, imageType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_SetData[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_SetData[1] = {{ wxLua_wxRichTextImageBlock_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_SetData }};
//     void SetData(unsigned char* image);
static int LUACALL wxLua_wxRichTextImageBlock_SetData(lua_State *L)
{
    // unsigned char image
    unsigned char * image = (unsigned char *)wxlua_getstringtype(L, 2);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call SetData
    self->SetData(image);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_SetDataSize[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_SetDataSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_SetDataSize[1] = {{ wxLua_wxRichTextImageBlock_SetDataSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_SetDataSize }};
//     void SetDataSize(size_t size);
static int LUACALL wxLua_wxRichTextImageBlock_SetDataSize(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call SetDataSize
    self->SetDataSize(size);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_SetImageType[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_SetImageType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_SetImageType[1] = {{ wxLua_wxRichTextImageBlock_SetImageType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_SetImageType }};
//     void SetImageType(wxBitmapType imageType);
static int LUACALL wxLua_wxRichTextImageBlock_SetImageType(lua_State *L)
{
    // wxBitmapType imageType
    wxBitmapType imageType = (wxBitmapType)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call SetImageType
    self->SetImageType(imageType);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_Write[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_Write(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_Write[1] = {{ wxLua_wxRichTextImageBlock_Write, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_Write }};
//     bool Write(const wxString& filename);
static int LUACALL wxLua_wxRichTextImageBlock_Write(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call Write
    bool returns = (self->Write(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteBlock1[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_WriteBlock1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_WriteBlock1[1] = {{ wxLua_wxRichTextImageBlock_WriteBlock1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteBlock1 }};
//     static bool WriteBlock(const wxString& filename, unsigned char* block, size_t size);
static int LUACALL wxLua_wxRichTextImageBlock_WriteBlock1(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getuintegertype(L, 3);
    // unsigned char block
    unsigned char * block = (unsigned char *)wxlua_getstringtype(L, 2);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call WriteBlock
    bool returns = (wxRichTextImageBlock::WriteBlock(filename, block, size));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteBlock[] = { &wxluatype_wxOutputStream, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_WriteBlock(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_WriteBlock[1] = {{ wxLua_wxRichTextImageBlock_WriteBlock, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteBlock }};
//     static bool WriteBlock(wxOutputStream& stream, unsigned char* block, size_t size);
static int LUACALL wxLua_wxRichTextImageBlock_WriteBlock(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getuintegertype(L, 3);
    // unsigned char block
    unsigned char * block = (unsigned char *)wxlua_getstringtype(L, 2);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call WriteBlock
    bool returns = (wxRichTextImageBlock::WriteBlock(*stream, block, size));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteHex[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_WriteHex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_WriteHex[1] = {{ wxLua_wxRichTextImageBlock_WriteHex, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteHex }};
//     bool WriteHex(wxOutputStream& stream);
static int LUACALL wxLua_wxRichTextImageBlock_WriteHex(lua_State *L)
{
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call WriteHex
    bool returns = (self->WriteHex(*stream));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_delete[] = { &wxluatype_wxRichTextImageBlock, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_op_set[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_op_set[1] = {{ wxLua_wxRichTextImageBlock_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_op_set }};
//     void operator=(const wxRichTextImageBlock& block);
static int LUACALL wxLua_wxRichTextImageBlock_op_set(lua_State *L)
{
    // const wxRichTextImageBlock block
    const wxRichTextImageBlock * block = (const wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextImageBlock);
    // get this
    wxRichTextImageBlock * self = (wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call op_set
    (*self)=(*block);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImageBlock_constructor1[] = { &wxluatype_wxRichTextImageBlock, NULL };
static int LUACALL wxLua_wxRichTextImageBlock_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_constructor1[1] = {{ wxLua_wxRichTextImageBlock_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_constructor1 }};
//     wxRichTextImageBlock(const wxRichTextImageBlock& block);
static int LUACALL wxLua_wxRichTextImageBlock_constructor1(lua_State *L)
{
    // const wxRichTextImageBlock block
    const wxRichTextImageBlock * block = (const wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call constructor
    wxRichTextImageBlock* returns = new wxRichTextImageBlock(*block);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextImageBlock);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextImageBlock);

    return 1;
}

static int LUACALL wxLua_wxRichTextImageBlock_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_constructor[1] = {{ wxLua_wxRichTextImageBlock_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextImageBlock();
static int LUACALL wxLua_wxRichTextImageBlock_constructor(lua_State *L)
{
    // call constructor
    wxRichTextImageBlock* returns = new wxRichTextImageBlock();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextImageBlock);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextImageBlock);

    return 1;
}




#if ((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlock_overload[] =
{

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextImageBlock_MakeImageBlock1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlock1 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextImageBlock_MakeImageBlock, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextImageBlock_MakeImageBlock },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlock_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlock_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_ReadBlock_overload[] =
{
    { wxLua_wxRichTextImageBlock_ReadBlock1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadBlock1 },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { wxLua_wxRichTextImageBlock_ReadBlock, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImageBlock_ReadBlock },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextImageBlock_ReadBlock_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextImageBlock_ReadBlock_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_WriteBlock_overload[] =
{
    { wxLua_wxRichTextImageBlock_WriteBlock1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteBlock1 },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { wxLua_wxRichTextImageBlock_WriteBlock, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImageBlock_WriteBlock },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextImageBlock_WriteBlock_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextImageBlock_WriteBlock_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImageBlock_constructor_overload[] =
{
    { wxLua_wxRichTextImageBlock_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImageBlock_constructor1 },
    { wxLua_wxRichTextImageBlock_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextImageBlock_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextImageBlock_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextImageBlock_delete_function(void** p)
{
    wxRichTextImageBlock* o = (wxRichTextImageBlock*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextImageBlock_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_Clear, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_Copy, 1, NULL },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "DoMakeImageBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_DoMakeImageBlock, 1, NULL },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_GetData, 1, NULL },
    { "GetDataSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_GetDataSize, 1, NULL },
    { "GetExtension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_GetExtension, 1, NULL },
    { "GetImageType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_GetImageType, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_Init, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_IsOk, 1, NULL },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Load", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_Load, 1, NULL },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "MakeImageBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlock_overload, s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlock_overload_count, 0 },
#endif // ((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "MakeImageBlockDefaultQuality", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_MakeImageBlockDefaultQuality, 1, NULL },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Ok", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_Ok, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))
    { "ReadBlock", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextImageBlock_ReadBlock_overload, s_wxluafunc_wxLua_wxRichTextImageBlock_ReadBlock_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { "ReadHex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_ReadHex, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_SetData, 1, NULL },
    { "SetDataSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_SetDataSize, 1, NULL },
    { "SetImageType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_SetImageType, 1, NULL },
    { "Write", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_Write, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))
    { "WriteBlock", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextImageBlock_WriteBlock_overload, s_wxluafunc_wxLua_wxRichTextImageBlock_WriteBlock_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { "WriteHex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_WriteHex, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextImageBlock_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImageBlock_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextImageBlock", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextImageBlock_constructor_overload, s_wxluafunc_wxLua_wxRichTextImageBlock_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextImageBlock_methodCount = sizeof(wxRichTextImageBlock_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextImage
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextImage'
int wxluatype_wxRichTextImage = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_CanEditProperties[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_CanEditProperties[1] = {{ wxLua_wxRichTextImage_CanEditProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_CanEditProperties }};
//     virtual bool CanEditProperties() const;
static int LUACALL wxLua_wxRichTextImage_CanEditProperties(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call CanEditProperties
    bool returns = (self->CanEditProperties());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_Clone[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_Clone[1] = {{ wxLua_wxRichTextImage_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextImage_Clone(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_Copy[] = { &wxluatype_wxRichTextImage, &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_Copy[1] = {{ wxLua_wxRichTextImage_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImage_Copy }};
//     void Copy(const wxRichTextImage& obj);
static int LUACALL wxLua_wxRichTextImage_Copy(lua_State *L)
{
    // const wxRichTextImage obj
    const wxRichTextImage * obj = (const wxRichTextImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextImage);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call Copy
    self->Copy(*obj);

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_Draw[] = { &wxluatype_wxRichTextImage, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextImage_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_Draw[1] = {{ wxLua_wxRichTextImage_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextImage_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextImage_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_EditProperties[] = { &wxluatype_wxRichTextImage, &wxluatype_wxWindow, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextImage_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_EditProperties[1] = {{ wxLua_wxRichTextImage_EditProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImage_EditProperties }};
//     virtual bool EditProperties(wxWindow* parent, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextImage_EditProperties(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextBuffer);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call EditProperties
    bool returns = (self->EditProperties(parent, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_ExportXML1[] = { &wxluatype_wxRichTextImage, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextImage_ExportXML1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_ExportXML1[1] = {{ wxLua_wxRichTextImage_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImage_ExportXML1 }};
//     virtual bool ExportXML(wxXmlNode* parent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextImage_ExportXML1(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode parent
    wxXmlNode * parent = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call ExportXML
    bool returns = (self->ExportXML(parent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_ExportXML[] = { &wxluatype_wxRichTextImage, &wxluatype_wxOutputStream, &wxluatype_TNUMBER, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextImage_ExportXML(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_ExportXML[1] = {{ wxLua_wxRichTextImage_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextImage_ExportXML }};
//     virtual bool ExportXML(wxOutputStream& stream, int indent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextImage_ExportXML(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 3);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call ExportXML
    bool returns = (self->ExportXML(*stream, indent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_GetImageBlock[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_GetImageBlock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_GetImageBlock[1] = {{ wxLua_wxRichTextImage_GetImageBlock, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_GetImageBlock }};
//     wxRichTextImageBlock& GetImageBlock();
static int LUACALL wxLua_wxRichTextImage_GetImageBlock(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call GetImageBlock
    wxRichTextImageBlock* returns = (wxRichTextImageBlock*)&self->GetImageBlock();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextImageBlock);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_GetImageCache[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_GetImageCache(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_GetImageCache[1] = {{ wxLua_wxRichTextImage_GetImageCache, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_GetImageCache }};
//     const wxBitmap& GetImageCache() const;
static int LUACALL wxLua_wxRichTextImage_GetImageCache(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call GetImageCache
    const wxBitmap* returns = (const wxBitmap*)&self->GetImageCache();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_GetNaturalSize[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_GetNaturalSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_GetNaturalSize[1] = {{ wxLua_wxRichTextImage_GetNaturalSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_GetNaturalSize }};
//     virtual wxTextAttrSize GetNaturalSize() const;
static int LUACALL wxLua_wxRichTextImage_GetNaturalSize(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call GetNaturalSize
    // allocate a new object using the copy constructor
    wxTextAttrSize* returns = new wxTextAttrSize(self->GetNaturalSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrSize);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_GetOriginalImageSize[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_GetOriginalImageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_GetOriginalImageSize[1] = {{ wxLua_wxRichTextImage_GetOriginalImageSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_GetOriginalImageSize }};
//     wxSize GetOriginalImageSize() const;
static int LUACALL wxLua_wxRichTextImage_GetOriginalImageSize(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call GetOriginalImageSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetOriginalImageSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextImage_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel() const;
static int LUACALL wxLua_wxRichTextImage_GetPropertiesMenuLabel(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_GetRangeSize[] = { &wxluatype_wxRichTextImage, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextImage_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_GetRangeSize[1] = {{ wxLua_wxRichTextImage_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextImage_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextImage_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_GetXMLNodeName[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_GetXMLNodeName[1] = {{ wxLua_wxRichTextImage_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextImage_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_ImportFromXML[] = { &wxluatype_wxRichTextImage, &wxluatype_wxRichTextBuffer, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextImage_ImportFromXML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_ImportFromXML[1] = {{ wxLua_wxRichTextImage_ImportFromXML, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextImage_ImportFromXML }};
//     virtual bool ImportFromXML(wxRichTextBuffer* buffer, wxXmlNode* node, wxRichTextXMLHandler* handler, bool* recurse);
static int LUACALL wxLua_wxRichTextImage_ImportFromXML(lua_State *L)
{
    // bool recurse
    bool * recurse = (bool *)wxlua_touserdata(L, 5);
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call ImportFromXML
    bool returns = (self->ImportFromXML(buffer, node, handler, recurse));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_Init[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_Init[1] = {{ wxLua_wxRichTextImage_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextImage_Init(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_IsEmpty[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_IsEmpty[1] = {{ wxLua_wxRichTextImage_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_IsEmpty }};
//     virtual bool IsEmpty() const;
static int LUACALL wxLua_wxRichTextImage_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_IsFloatable[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_IsFloatable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_IsFloatable[1] = {{ wxLua_wxRichTextImage_IsFloatable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_IsFloatable }};
//     virtual bool IsFloatable() const;
static int LUACALL wxLua_wxRichTextImage_IsFloatable(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call IsFloatable
    bool returns = (self->IsFloatable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_Layout[] = { &wxluatype_wxRichTextImage, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextImage_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_Layout[1] = {{ wxLua_wxRichTextImage_Layout, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextImage_Layout }};
//     virtual bool Layout(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextImage_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 6);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call Layout
    bool returns = (self->Layout(*dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_LoadImageCache1[] = { &wxluatype_wxRichTextImage, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxSize, &wxluatype_TBOOLEAN, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextImage_LoadImageCache1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_LoadImageCache1[1] = {{ wxLua_wxRichTextImage_LoadImageCache1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxRichTextImage_LoadImageCache1 }};
//     %wxchkver_3_1_0 virtual bool LoadImageCache(wxDC& dc, wxRichTextDrawingContext& context, wxSize& retImageSize, bool resetCache = false, const wxSize& parentSize = wxDefaultSize);
static int LUACALL wxLua_wxRichTextImage_LoadImageCache1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // bool resetCache = false
    bool resetCache = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // wxSize retImageSize
    wxSize * retImageSize = (wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call LoadImageCache
    bool returns = (self->LoadImageCache(*dc, *context, *retImageSize, resetCache, *parentSize));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_LoadImageCache[] = { &wxluatype_wxRichTextImage, &wxluatype_wxDC, &wxluatype_TBOOLEAN, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextImage_LoadImageCache(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_LoadImageCache[1] = {{ wxLua_wxRichTextImage_LoadImageCache, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextImage_LoadImageCache }};
//     !%wxchkver_3_1_0 virtual bool LoadImageCache(wxDC& dc, bool resetCache = false, const wxSize& parentSize = wxDefaultSize);
static int LUACALL wxLua_wxRichTextImage_LoadImageCache(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // bool resetCache = false
    bool resetCache = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call LoadImageCache
    bool returns = (self->LoadImageCache(*dc, resetCache, *parentSize));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_ResetImageCache[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_ResetImageCache(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_ResetImageCache[1] = {{ wxLua_wxRichTextImage_ResetImageCache, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_ResetImageCache }};
//     void ResetImageCache();
static int LUACALL wxLua_wxRichTextImage_ResetImageCache(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call ResetImageCache
    self->ResetImageCache();

    return 0;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_SetImageCache[] = { &wxluatype_wxRichTextImage, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxRichTextImage_SetImageCache(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_SetImageCache[1] = {{ wxLua_wxRichTextImage_SetImageCache, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImage_SetImageCache }};
//     void SetImageCache(const wxBitmap& bitmap);
static int LUACALL wxLua_wxRichTextImage_SetImageCache(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call SetImageCache
    self->SetImageCache(*bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_SetOriginalImageSize[] = { &wxluatype_wxRichTextImage, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextImage_SetOriginalImageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_SetOriginalImageSize[1] = {{ wxLua_wxRichTextImage_SetOriginalImageSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextImage_SetOriginalImageSize }};
//     void SetOriginalImageSize(const wxSize& sz);
static int LUACALL wxLua_wxRichTextImage_SetOriginalImageSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call SetOriginalImageSize
    self->SetOriginalImageSize(*sz);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_UsesParagraphAttributes[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_UsesParagraphAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_UsesParagraphAttributes[1] = {{ wxLua_wxRichTextImage_UsesParagraphAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_UsesParagraphAttributes }};
//     virtual bool UsesParagraphAttributes() const;
static int LUACALL wxLua_wxRichTextImage_UsesParagraphAttributes(lua_State *L)
{
    // get this
    wxRichTextImage * self = (wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call UsesParagraphAttributes
    bool returns = (self->UsesParagraphAttributes());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_delete[] = { &wxluatype_wxRichTextImage, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_constructor3[] = { &wxluatype_wxRichTextImage, NULL };
static int LUACALL wxLua_wxRichTextImage_constructor3(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_constructor3[1] = {{ wxLua_wxRichTextImage_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_constructor3 }};
//     wxRichTextImage(const wxRichTextImage& obj);
static int LUACALL wxLua_wxRichTextImage_constructor3(lua_State *L)
{
    // const wxRichTextImage obj
    const wxRichTextImage * obj = (const wxRichTextImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImage);
    // call constructor
    wxRichTextImage* returns = new wxRichTextImage(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextImage);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextImage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_constructor2[] = { &wxluatype_wxRichTextImageBlock, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextImage_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_constructor2[1] = {{ wxLua_wxRichTextImage_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxRichTextImage_constructor2 }};
//     wxRichTextImage(const wxRichTextImageBlock& imageBlock, wxRichTextObject* parent = NULL, wxRichTextAttr* charStyle = NULL);
static int LUACALL wxLua_wxRichTextImage_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr charStyle = NULL
    wxRichTextAttr * charStyle = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 2 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject) : NULL);
    // const wxRichTextImageBlock imageBlock
    const wxRichTextImageBlock * imageBlock = (const wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextImageBlock);
    // call constructor
    wxRichTextImage* returns = new wxRichTextImage(*imageBlock, parent, charStyle);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextImage);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextImage);

    return 1;
}


#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_constructor1[] = { &wxluatype_wxImage, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextImage_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_constructor1[1] = {{ wxLua_wxRichTextImage_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxRichTextImage_constructor1 }};
//     wxRichTextImage(const wxImage& image, wxRichTextObject* parent = NULL, wxRichTextAttr* charStyle = NULL);
static int LUACALL wxLua_wxRichTextImage_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr charStyle = NULL
    wxRichTextAttr * charStyle = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 2 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject) : NULL);
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxImage);
    // call constructor
    wxRichTextImage* returns = new wxRichTextImage(*image, parent, charStyle);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextImage);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextImage);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextImage_constructor[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextImage_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_constructor[1] = {{ wxLua_wxRichTextImage_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextImage_constructor }};
//     wxRichTextImage(wxRichTextObject* parent = NULL);
static int LUACALL wxLua_wxRichTextImage_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 1 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject) : NULL);
    // call constructor
    wxRichTextImage* returns = new wxRichTextImage(parent);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextImage);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextImage);

    return 1;
}




#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_ExportXML_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextImage_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextImage_ExportXML1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
    { wxLua_wxRichTextImage_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextImage_ExportXML },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextImage_ExportXML_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextImage_ExportXML_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

#if (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_LoadImageCache_overload[] =
{

#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextImage_LoadImageCache1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxRichTextImage_LoadImageCache1 },
#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextImage_LoadImageCache, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextImage_LoadImageCache },
#endif // (((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxRichTextImage_LoadImageCache_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextImage_LoadImageCache_overload)/sizeof(wxLuaBindCFunc);

#endif // (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextImage_constructor_overload[] =
{
    { wxLua_wxRichTextImage_constructor3, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextImage_constructor3 },
    { wxLua_wxRichTextImage_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxRichTextImage_constructor2 },

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextImage_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxRichTextImage_constructor1 },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextImage_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextImage_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextImage_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextImage_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

void wxLua_wxRichTextImage_delete_function(void** p)
{
    wxRichTextImage* o = (wxRichTextImage*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextImage_methods[] = {
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_CanEditProperties, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_Copy, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_EditProperties, 1, NULL },

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
    { "ExportXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_ExportXML_overload, s_wxluafunc_wxLua_wxRichTextImage_ExportXML_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

    { "GetImageBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_GetImageBlock, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetImageCache", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_GetImageCache, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetNaturalSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_GetNaturalSize, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetOriginalImageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_GetOriginalImageSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_GetPropertiesMenuLabel, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_GetXMLNodeName, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "ImportFromXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_ImportFromXML, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_Init, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_IsEmpty, 1, NULL },
    { "IsFloatable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_IsFloatable, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect))
    { "LoadImageCache", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_LoadImageCache_overload, s_wxluafunc_wxLua_wxRichTextImage_LoadImageCache_overload_count, 0 },
#endif // (((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect))

    { "ResetImageCache", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_ResetImageCache, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetImageCache", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_SetImageCache, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetOriginalImageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_SetOriginalImageSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "UsesParagraphAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextImage_UsesParagraphAttributes, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextImage_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "wxRichTextImage", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextImage_constructor_overload, s_wxluafunc_wxLua_wxRichTextImage_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { 0, 0, 0, 0 },
};

int wxRichTextImage_methodCount = sizeof(wxRichTextImage_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextBuffer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextBuffer'
int wxluatype_wxRichTextBuffer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_AddDrawingHandler[] = { &wxluatype_wxRichTextDrawingHandler, NULL };
static int LUACALL wxLua_wxRichTextBuffer_AddDrawingHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_AddDrawingHandler[1] = {{ wxLua_wxRichTextBuffer_AddDrawingHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_AddDrawingHandler }};
//     static void AddDrawingHandler(wxRichTextDrawingHandler *handler);
static int LUACALL wxLua_wxRichTextBuffer_AddDrawingHandler(lua_State *L)
{
    // wxRichTextDrawingHandler handler
    wxRichTextDrawingHandler * handler = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call AddDrawingHandler
    wxRichTextBuffer::AddDrawingHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_AddEventHandler[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxEvtHandler, NULL };
static int LUACALL wxLua_wxRichTextBuffer_AddEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_AddEventHandler[1] = {{ wxLua_wxRichTextBuffer_AddEventHandler, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_AddEventHandler }};
//     bool AddEventHandler(wxEvtHandler* handler);
static int LUACALL wxLua_wxRichTextBuffer_AddEventHandler(lua_State *L)
{
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call AddEventHandler
    bool returns = (self->AddEventHandler(handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_AddFieldType[] = { &wxluatype_wxRichTextFieldType, NULL };
static int LUACALL wxLua_wxRichTextBuffer_AddFieldType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_AddFieldType[1] = {{ wxLua_wxRichTextBuffer_AddFieldType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_AddFieldType }};
//     static void AddFieldType(wxRichTextFieldType *fieldType);
static int LUACALL wxLua_wxRichTextBuffer_AddFieldType(lua_State *L)
{
    // wxRichTextFieldType fieldType
    wxRichTextFieldType * fieldType = (wxRichTextFieldType *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFieldType);
    // call AddFieldType
    wxRichTextBuffer::AddFieldType(fieldType);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_AddHandler[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextBuffer_AddHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_AddHandler[1] = {{ wxLua_wxRichTextBuffer_AddHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_AddHandler }};
//     static void AddHandler(wxRichTextFileHandler *handler);
static int LUACALL wxLua_wxRichTextBuffer_AddHandler(lua_State *L)
{
    // wxRichTextFileHandler handler
    wxRichTextFileHandler * handler = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call AddHandler
    wxRichTextBuffer::AddHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_AddParagraph[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextBuffer_AddParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_AddParagraph[1] = {{ wxLua_wxRichTextBuffer_AddParagraph, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_AddParagraph }};
//     virtual wxRichTextRange AddParagraph(const wxString& text, wxRichTextAttr* paraStyle = NULL);
static int LUACALL wxLua_wxRichTextBuffer_AddParagraph(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr paraStyle = NULL
    wxRichTextAttr * paraStyle = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call AddParagraph
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->AddParagraph(text, paraStyle));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BatchingUndo[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BatchingUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BatchingUndo[1] = {{ wxLua_wxRichTextBuffer_BatchingUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_BatchingUndo }};
//     virtual bool BatchingUndo() const;
static int LUACALL wxLua_wxRichTextBuffer_BatchingUndo(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BatchingUndo
    bool returns = (self->BatchingUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginAlignment[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginAlignment[1] = {{ wxLua_wxRichTextBuffer_BeginAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginAlignment }};
//     bool BeginAlignment(wxTextAttrAlignment alignment);
static int LUACALL wxLua_wxRichTextBuffer_BeginAlignment(lua_State *L)
{
    // wxTextAttrAlignment alignment
    wxTextAttrAlignment alignment = (wxTextAttrAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginAlignment
    bool returns = (self->BeginAlignment(alignment));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginBatchUndo[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginBatchUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginBatchUndo[1] = {{ wxLua_wxRichTextBuffer_BeginBatchUndo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginBatchUndo }};
//     virtual bool BeginBatchUndo(const wxString& cmdName);
static int LUACALL wxLua_wxRichTextBuffer_BeginBatchUndo(lua_State *L)
{
    // const wxString cmdName
    const wxString cmdName = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginBatchUndo
    bool returns = (self->BeginBatchUndo(cmdName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginBold[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginBold[1] = {{ wxLua_wxRichTextBuffer_BeginBold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginBold }};
//     bool BeginBold();
static int LUACALL wxLua_wxRichTextBuffer_BeginBold(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginBold
    bool returns = (self->BeginBold());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginCharacterStyle[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginCharacterStyle[1] = {{ wxLua_wxRichTextBuffer_BeginCharacterStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginCharacterStyle }};
//     bool BeginCharacterStyle(const wxString& characterStyle);
static int LUACALL wxLua_wxRichTextBuffer_BeginCharacterStyle(lua_State *L)
{
    // const wxString characterStyle
    const wxString characterStyle = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginCharacterStyle
    bool returns = (self->BeginCharacterStyle(characterStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginFont[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginFont[1] = {{ wxLua_wxRichTextBuffer_BeginFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginFont }};
//     bool BeginFont(const wxFont& font);
static int LUACALL wxLua_wxRichTextBuffer_BeginFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginFont
    bool returns = (self->BeginFont(*font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginFontSize[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginFontSize[1] = {{ wxLua_wxRichTextBuffer_BeginFontSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginFontSize }};
//     bool BeginFontSize(int pointSize);
static int LUACALL wxLua_wxRichTextBuffer_BeginFontSize(lua_State *L)
{
    // int pointSize
    int pointSize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginFontSize
    bool returns = (self->BeginFontSize(pointSize));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginItalic[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginItalic[1] = {{ wxLua_wxRichTextBuffer_BeginItalic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginItalic }};
//     bool BeginItalic();
static int LUACALL wxLua_wxRichTextBuffer_BeginItalic(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginItalic
    bool returns = (self->BeginItalic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginLeftIndent[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginLeftIndent[1] = {{ wxLua_wxRichTextBuffer_BeginLeftIndent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginLeftIndent }};
//     bool BeginLeftIndent(int leftIndent, int leftSubIndent = 0);
static int LUACALL wxLua_wxRichTextBuffer_BeginLeftIndent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int leftSubIndent = 0
    int leftSubIndent = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginLeftIndent
    bool returns = (self->BeginLeftIndent(leftIndent, leftSubIndent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginLineSpacing[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginLineSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginLineSpacing[1] = {{ wxLua_wxRichTextBuffer_BeginLineSpacing, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginLineSpacing }};
//     bool BeginLineSpacing(int lineSpacing);
static int LUACALL wxLua_wxRichTextBuffer_BeginLineSpacing(lua_State *L)
{
    // int lineSpacing
    int lineSpacing = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginLineSpacing
    bool returns = (self->BeginLineSpacing(lineSpacing));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginListStyle[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginListStyle[1] = {{ wxLua_wxRichTextBuffer_BeginListStyle, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginListStyle }};
//     bool BeginListStyle(const wxString& listStyle, int level = 1, int number = 1);
static int LUACALL wxLua_wxRichTextBuffer_BeginListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int number = 1
    int number = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 1);
    // int level = 1
    int level = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // const wxString listStyle
    const wxString listStyle = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginListStyle
    bool returns = (self->BeginListStyle(listStyle, level, number));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginNumberedBullet[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginNumberedBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginNumberedBullet[1] = {{ wxLua_wxRichTextBuffer_BeginNumberedBullet, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginNumberedBullet }};
//     bool BeginNumberedBullet(int bulletNumber, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC|wxTEXT_ATTR_BULLET_STYLE_PERIOD);
static int LUACALL wxLua_wxRichTextBuffer_BeginNumberedBullet(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC | wxTEXT_ATTR_BULLET_STYLE_PERIOD
    int bulletStyle = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxTEXT_ATTR_BULLET_STYLE_ARABIC | wxTEXT_ATTR_BULLET_STYLE_PERIOD);
    // int leftSubIndent
    int leftSubIndent = (int)wxlua_getnumbertype(L, 4);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 3);
    // int bulletNumber
    int bulletNumber = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginNumberedBullet
    bool returns = (self->BeginNumberedBullet(bulletNumber, leftIndent, leftSubIndent, bulletStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginParagraphSpacing[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginParagraphSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginParagraphSpacing[1] = {{ wxLua_wxRichTextBuffer_BeginParagraphSpacing, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginParagraphSpacing }};
//     bool BeginParagraphSpacing(int before, int after);
static int LUACALL wxLua_wxRichTextBuffer_BeginParagraphSpacing(lua_State *L)
{
    // int after
    int after = (int)wxlua_getnumbertype(L, 3);
    // int before
    int before = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginParagraphSpacing
    bool returns = (self->BeginParagraphSpacing(before, after));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginParagraphStyle[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginParagraphStyle[1] = {{ wxLua_wxRichTextBuffer_BeginParagraphStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginParagraphStyle }};
//     bool BeginParagraphStyle(const wxString& paragraphStyle);
static int LUACALL wxLua_wxRichTextBuffer_BeginParagraphStyle(lua_State *L)
{
    // const wxString paragraphStyle
    const wxString paragraphStyle = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginParagraphStyle
    bool returns = (self->BeginParagraphStyle(paragraphStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginRightIndent[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginRightIndent[1] = {{ wxLua_wxRichTextBuffer_BeginRightIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginRightIndent }};
//     bool BeginRightIndent(int rightIndent);
static int LUACALL wxLua_wxRichTextBuffer_BeginRightIndent(lua_State *L)
{
    // int rightIndent
    int rightIndent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginRightIndent
    bool returns = (self->BeginRightIndent(rightIndent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginStandardBullet[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginStandardBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginStandardBullet[1] = {{ wxLua_wxRichTextBuffer_BeginStandardBullet, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginStandardBullet }};
//     bool BeginStandardBullet(const wxString& bulletName, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_STANDARD);
static int LUACALL wxLua_wxRichTextBuffer_BeginStandardBullet(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_STANDARD
    int bulletStyle = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxTEXT_ATTR_BULLET_STYLE_STANDARD);
    // int leftSubIndent
    int leftSubIndent = (int)wxlua_getnumbertype(L, 4);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 3);
    // const wxString bulletName
    const wxString bulletName = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginStandardBullet
    bool returns = (self->BeginStandardBullet(bulletName, leftIndent, leftSubIndent, bulletStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginStyle[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginStyle[1] = {{ wxLua_wxRichTextBuffer_BeginStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginStyle }};
//     virtual bool BeginStyle(const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextBuffer_BeginStyle(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginStyle
    bool returns = (self->BeginStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginSuppressUndo[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginSuppressUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginSuppressUndo[1] = {{ wxLua_wxRichTextBuffer_BeginSuppressUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginSuppressUndo }};
//     virtual bool BeginSuppressUndo();
static int LUACALL wxLua_wxRichTextBuffer_BeginSuppressUndo(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginSuppressUndo
    bool returns = (self->BeginSuppressUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginSymbolBullet[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginSymbolBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginSymbolBullet[1] = {{ wxLua_wxRichTextBuffer_BeginSymbolBullet, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginSymbolBullet }};
//     bool BeginSymbolBullet(const wxString& symbol, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL);
static int LUACALL wxLua_wxRichTextBuffer_BeginSymbolBullet(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL
    int bulletStyle = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxTEXT_ATTR_BULLET_STYLE_SYMBOL);
    // int leftSubIndent
    int leftSubIndent = (int)wxlua_getnumbertype(L, 4);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 3);
    // const wxString symbol
    const wxString symbol = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginSymbolBullet
    bool returns = (self->BeginSymbolBullet(symbol, leftIndent, leftSubIndent, bulletStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginTextColour[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginTextColour[1] = {{ wxLua_wxRichTextBuffer_BeginTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginTextColour }};
//     bool BeginTextColour(const wxColour& colour);
static int LUACALL wxLua_wxRichTextBuffer_BeginTextColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginTextColour
    bool returns = (self->BeginTextColour(*colour));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginURL[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginURL[1] = {{ wxLua_wxRichTextBuffer_BeginURL, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginURL }};
//     bool BeginURL(const wxString& url, const wxString& characterStyle = wxEmptyString);
static int LUACALL wxLua_wxRichTextBuffer_BeginURL(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString characterStyle = wxEmptyString
    const wxString characterStyle = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginURL
    bool returns = (self->BeginURL(url, characterStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginUnderline[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_BeginUnderline(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_BeginUnderline[1] = {{ wxLua_wxRichTextBuffer_BeginUnderline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_BeginUnderline }};
//     bool BeginUnderline();
static int LUACALL wxLua_wxRichTextBuffer_BeginUnderline(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call BeginUnderline
    bool returns = (self->BeginUnderline());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_CanPasteFromClipboard[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_CanPasteFromClipboard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_CanPasteFromClipboard[1] = {{ wxLua_wxRichTextBuffer_CanPasteFromClipboard, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_CanPasteFromClipboard }};
//     virtual bool CanPasteFromClipboard() const;
static int LUACALL wxLua_wxRichTextBuffer_CanPasteFromClipboard(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call CanPasteFromClipboard
    bool returns = (self->CanPasteFromClipboard());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxRichTextBuffer_CleanUpDrawingHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_CleanUpDrawingHandlers[1] = {{ wxLua_wxRichTextBuffer_CleanUpDrawingHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void CleanUpDrawingHandlers();
static int LUACALL wxLua_wxRichTextBuffer_CleanUpDrawingHandlers(lua_State *L)
{
    // call CleanUpDrawingHandlers
    wxRichTextBuffer::CleanUpDrawingHandlers();

    return 0;
}

static int LUACALL wxLua_wxRichTextBuffer_CleanUpFieldTypes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_CleanUpFieldTypes[1] = {{ wxLua_wxRichTextBuffer_CleanUpFieldTypes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void CleanUpFieldTypes();
static int LUACALL wxLua_wxRichTextBuffer_CleanUpFieldTypes(lua_State *L)
{
    // call CleanUpFieldTypes
    wxRichTextBuffer::CleanUpFieldTypes();

    return 0;
}

static int LUACALL wxLua_wxRichTextBuffer_CleanUpHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_CleanUpHandlers[1] = {{ wxLua_wxRichTextBuffer_CleanUpHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void CleanUpHandlers();
static int LUACALL wxLua_wxRichTextBuffer_CleanUpHandlers(lua_State *L)
{
    // call CleanUpHandlers
    wxRichTextBuffer::CleanUpHandlers();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_ClearEventHandlers[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_ClearEventHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_ClearEventHandlers[1] = {{ wxLua_wxRichTextBuffer_ClearEventHandlers, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_ClearEventHandlers }};
//     void ClearEventHandlers();
static int LUACALL wxLua_wxRichTextBuffer_ClearEventHandlers(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call ClearEventHandlers
    self->ClearEventHandlers();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_ClearStyleStack[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_ClearStyleStack(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_ClearStyleStack[1] = {{ wxLua_wxRichTextBuffer_ClearStyleStack, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_ClearStyleStack }};
//     virtual void ClearStyleStack();
static int LUACALL wxLua_wxRichTextBuffer_ClearStyleStack(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call ClearStyleStack
    self->ClearStyleStack();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_Clone[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_Clone[1] = {{ wxLua_wxRichTextBuffer_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextBuffer_Clone(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_Copy[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_Copy[1] = {{ wxLua_wxRichTextBuffer_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_Copy }};
//     void Copy(const wxRichTextBuffer& obj);
static int LUACALL wxLua_wxRichTextBuffer_Copy(lua_State *L)
{
    // const wxRichTextBuffer obj
    const wxRichTextBuffer * obj = (const wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call Copy
    self->Copy(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_CopyToClipboard[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextBuffer_CopyToClipboard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_CopyToClipboard[1] = {{ wxLua_wxRichTextBuffer_CopyToClipboard, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_CopyToClipboard }};
//     virtual bool CopyToClipboard(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextBuffer_CopyToClipboard(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call CopyToClipboard
    bool returns = (self->CopyToClipboard(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_DeleteRangeWithUndo[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextBuffer_DeleteRangeWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_DeleteRangeWithUndo[1] = {{ wxLua_wxRichTextBuffer_DeleteRangeWithUndo, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_DeleteRangeWithUndo }};
//     bool DeleteRangeWithUndo(const wxRichTextRange& range, wxRichTextCtrl* ctrl);
static int LUACALL wxLua_wxRichTextBuffer_DeleteRangeWithUndo(lua_State *L)
{
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextCtrl);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call DeleteRangeWithUndo
    bool returns = (self->DeleteRangeWithUndo(*range, ctrl));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_Dump1[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxTextOutputStream, NULL };
static int LUACALL wxLua_wxRichTextBuffer_Dump1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_Dump1[1] = {{ wxLua_wxRichTextBuffer_Dump1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_Dump1 }};
//     virtual void Dump(wxTextOutputStream& stream);
static int LUACALL wxLua_wxRichTextBuffer_Dump1(lua_State *L)
{
    // wxTextOutputStream stream
    wxTextOutputStream * stream = (wxTextOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextOutputStream);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call Dump
    self->Dump(*stream);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_Dump[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_Dump(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_Dump[1] = {{ wxLua_wxRichTextBuffer_Dump, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_Dump }};
//     virtual void Dump();
static int LUACALL wxLua_wxRichTextBuffer_Dump(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call Dump
    self->Dump();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndAlignment[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndAlignment[1] = {{ wxLua_wxRichTextBuffer_EndAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndAlignment }};
//     bool EndAlignment();
static int LUACALL wxLua_wxRichTextBuffer_EndAlignment(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndAlignment
    bool returns = (self->EndAlignment());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndAllStyles[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndAllStyles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndAllStyles[1] = {{ wxLua_wxRichTextBuffer_EndAllStyles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndAllStyles }};
//     virtual bool EndAllStyles();
static int LUACALL wxLua_wxRichTextBuffer_EndAllStyles(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndAllStyles
    bool returns = (self->EndAllStyles());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndBatchUndo[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndBatchUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndBatchUndo[1] = {{ wxLua_wxRichTextBuffer_EndBatchUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndBatchUndo }};
//     virtual bool EndBatchUndo();
static int LUACALL wxLua_wxRichTextBuffer_EndBatchUndo(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndBatchUndo
    bool returns = (self->EndBatchUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndBold[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndBold[1] = {{ wxLua_wxRichTextBuffer_EndBold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndBold }};
//     bool EndBold();
static int LUACALL wxLua_wxRichTextBuffer_EndBold(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndBold
    bool returns = (self->EndBold());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndCharacterStyle[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndCharacterStyle[1] = {{ wxLua_wxRichTextBuffer_EndCharacterStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndCharacterStyle }};
//     bool EndCharacterStyle();
static int LUACALL wxLua_wxRichTextBuffer_EndCharacterStyle(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndCharacterStyle
    bool returns = (self->EndCharacterStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndFont[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndFont[1] = {{ wxLua_wxRichTextBuffer_EndFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndFont }};
//     bool EndFont();
static int LUACALL wxLua_wxRichTextBuffer_EndFont(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndFont
    bool returns = (self->EndFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndFontSize[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndFontSize[1] = {{ wxLua_wxRichTextBuffer_EndFontSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndFontSize }};
//     bool EndFontSize();
static int LUACALL wxLua_wxRichTextBuffer_EndFontSize(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndFontSize
    bool returns = (self->EndFontSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndItalic[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndItalic[1] = {{ wxLua_wxRichTextBuffer_EndItalic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndItalic }};
//     bool EndItalic();
static int LUACALL wxLua_wxRichTextBuffer_EndItalic(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndItalic
    bool returns = (self->EndItalic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndLeftIndent[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndLeftIndent[1] = {{ wxLua_wxRichTextBuffer_EndLeftIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndLeftIndent }};
//     bool EndLeftIndent();
static int LUACALL wxLua_wxRichTextBuffer_EndLeftIndent(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndLeftIndent
    bool returns = (self->EndLeftIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndLineSpacing[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndLineSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndLineSpacing[1] = {{ wxLua_wxRichTextBuffer_EndLineSpacing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndLineSpacing }};
//     bool EndLineSpacing();
static int LUACALL wxLua_wxRichTextBuffer_EndLineSpacing(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndLineSpacing
    bool returns = (self->EndLineSpacing());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndListStyle[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndListStyle[1] = {{ wxLua_wxRichTextBuffer_EndListStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndListStyle }};
//     bool EndListStyle();
static int LUACALL wxLua_wxRichTextBuffer_EndListStyle(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndListStyle
    bool returns = (self->EndListStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndNumberedBullet[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndNumberedBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndNumberedBullet[1] = {{ wxLua_wxRichTextBuffer_EndNumberedBullet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndNumberedBullet }};
//     bool EndNumberedBullet();
static int LUACALL wxLua_wxRichTextBuffer_EndNumberedBullet(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndNumberedBullet
    bool returns = (self->EndNumberedBullet());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndParagraphSpacing[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndParagraphSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndParagraphSpacing[1] = {{ wxLua_wxRichTextBuffer_EndParagraphSpacing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndParagraphSpacing }};
//     bool EndParagraphSpacing();
static int LUACALL wxLua_wxRichTextBuffer_EndParagraphSpacing(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndParagraphSpacing
    bool returns = (self->EndParagraphSpacing());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndParagraphStyle[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndParagraphStyle[1] = {{ wxLua_wxRichTextBuffer_EndParagraphStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndParagraphStyle }};
//     bool EndParagraphStyle();
static int LUACALL wxLua_wxRichTextBuffer_EndParagraphStyle(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndParagraphStyle
    bool returns = (self->EndParagraphStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndRightIndent[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndRightIndent[1] = {{ wxLua_wxRichTextBuffer_EndRightIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndRightIndent }};
//     bool EndRightIndent();
static int LUACALL wxLua_wxRichTextBuffer_EndRightIndent(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndRightIndent
    bool returns = (self->EndRightIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndStandardBullet[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndStandardBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndStandardBullet[1] = {{ wxLua_wxRichTextBuffer_EndStandardBullet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndStandardBullet }};
//     bool EndStandardBullet();
static int LUACALL wxLua_wxRichTextBuffer_EndStandardBullet(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndStandardBullet
    bool returns = (self->EndStandardBullet());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndStyle[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndStyle[1] = {{ wxLua_wxRichTextBuffer_EndStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndStyle }};
//     virtual bool EndStyle();
static int LUACALL wxLua_wxRichTextBuffer_EndStyle(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndStyle
    bool returns = (self->EndStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndSuppressUndo[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndSuppressUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndSuppressUndo[1] = {{ wxLua_wxRichTextBuffer_EndSuppressUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndSuppressUndo }};
//     virtual bool EndSuppressUndo();
static int LUACALL wxLua_wxRichTextBuffer_EndSuppressUndo(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndSuppressUndo
    bool returns = (self->EndSuppressUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndSymbolBullet[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndSymbolBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndSymbolBullet[1] = {{ wxLua_wxRichTextBuffer_EndSymbolBullet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndSymbolBullet }};
//     bool EndSymbolBullet();
static int LUACALL wxLua_wxRichTextBuffer_EndSymbolBullet(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndSymbolBullet
    bool returns = (self->EndSymbolBullet());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndTextColour[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndTextColour[1] = {{ wxLua_wxRichTextBuffer_EndTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndTextColour }};
//     bool EndTextColour();
static int LUACALL wxLua_wxRichTextBuffer_EndTextColour(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndTextColour
    bool returns = (self->EndTextColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndURL[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndURL[1] = {{ wxLua_wxRichTextBuffer_EndURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndURL }};
//     bool EndURL();
static int LUACALL wxLua_wxRichTextBuffer_EndURL(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndURL
    bool returns = (self->EndURL());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_EndUnderline[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_EndUnderline(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_EndUnderline[1] = {{ wxLua_wxRichTextBuffer_EndUnderline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_EndUnderline }};
//     bool EndUnderline();
static int LUACALL wxLua_wxRichTextBuffer_EndUnderline(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call EndUnderline
    bool returns = (self->EndUnderline());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_FindDrawingHandler[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_FindDrawingHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_FindDrawingHandler[1] = {{ wxLua_wxRichTextBuffer_FindDrawingHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindDrawingHandler }};
//     static wxRichTextDrawingHandler *FindDrawingHandler(const wxString& name);
static int LUACALL wxLua_wxRichTextBuffer_FindDrawingHandler(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call FindDrawingHandler
    wxRichTextDrawingHandler* returns = (wxRichTextDrawingHandler*)wxRichTextBuffer::FindDrawingHandler(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextDrawingHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_FindFieldType[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_FindFieldType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_FindFieldType[1] = {{ wxLua_wxRichTextBuffer_FindFieldType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindFieldType }};
//     static wxRichTextFieldType *FindFieldType(const wxString& name);
static int LUACALL wxLua_wxRichTextBuffer_FindFieldType(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call FindFieldType
    wxRichTextFieldType* returns = (wxRichTextFieldType*)wxRichTextBuffer::FindFieldType(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldType);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler2[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_FindHandler2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler2[1] = {{ wxLua_wxRichTextBuffer_FindHandler2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler2 }};
//     static wxRichTextFileHandler *FindHandler(wxRichTextFileType imageType);
static int LUACALL wxLua_wxRichTextBuffer_FindHandler2(lua_State *L)
{
    // wxRichTextFileType imageType
    wxRichTextFileType imageType = (wxRichTextFileType)wxlua_getenumtype(L, 1);
    // call FindHandler
    wxRichTextFileHandler* returns = (wxRichTextFileHandler*)wxRichTextBuffer::FindHandler(imageType);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFileHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler1[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_FindHandler1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler1[1] = {{ wxLua_wxRichTextBuffer_FindHandler1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler1 }};
//     static wxRichTextFileHandler *FindHandler(const wxString& extension, wxRichTextFileType imageType);
static int LUACALL wxLua_wxRichTextBuffer_FindHandler1(lua_State *L)
{
    // wxRichTextFileType imageType
    wxRichTextFileType imageType = (wxRichTextFileType)wxlua_getenumtype(L, 2);
    // const wxString extension
    const wxString extension = wxlua_getwxStringtype(L, 1);
    // call FindHandler
    wxRichTextFileHandler* returns = (wxRichTextFileHandler*)wxRichTextBuffer::FindHandler(extension, imageType);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFileHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_FindHandler(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler[1] = {{ wxLua_wxRichTextBuffer_FindHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler }};
//     static wxRichTextFileHandler *FindHandler(const wxString& name);
static int LUACALL wxLua_wxRichTextBuffer_FindHandler(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call FindHandler
    wxRichTextFileHandler* returns = (wxRichTextFileHandler*)wxRichTextBuffer::FindHandler(name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFileHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandlerFilenameOrType[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_FindHandlerFilenameOrType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_FindHandlerFilenameOrType[1] = {{ wxLua_wxRichTextBuffer_FindHandlerFilenameOrType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandlerFilenameOrType }};
//                                                             wxRichTextFileType imageType);
static int LUACALL wxLua_wxRichTextBuffer_FindHandlerFilenameOrType(lua_State *L)
{
    // wxRichTextFileType imageType
    wxRichTextFileType imageType = (wxRichTextFileType)wxlua_getenumtype(L, 2);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call FindHandlerFilenameOrType
    wxRichTextFileHandler* returns = (wxRichTextFileHandler*)wxRichTextBuffer::FindHandlerFilenameOrType(filename, imageType);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFileHandler);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetBatchedCommand[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetBatchedCommand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetBatchedCommand[1] = {{ wxLua_wxRichTextBuffer_GetBatchedCommand, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetBatchedCommand }};
//     virtual wxRichTextCommand* GetBatchedCommand() const;
static int LUACALL wxLua_wxRichTextBuffer_GetBatchedCommand(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetBatchedCommand
    wxRichTextCommand* returns = (wxRichTextCommand*)self->GetBatchedCommand();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCommand);

    return 1;
}

static int LUACALL wxLua_wxRichTextBuffer_GetBulletProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetBulletProportion[1] = {{ wxLua_wxRichTextBuffer_GetBulletProportion, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static float GetBulletProportion();
static int LUACALL wxLua_wxRichTextBuffer_GetBulletProportion(lua_State *L)
{
    // call GetBulletProportion
    float returns = (wxRichTextBuffer::GetBulletProportion());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static int LUACALL wxLua_wxRichTextBuffer_GetBulletRightMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetBulletRightMargin[1] = {{ wxLua_wxRichTextBuffer_GetBulletRightMargin, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static int GetBulletRightMargin();
static int LUACALL wxLua_wxRichTextBuffer_GetBulletRightMargin(lua_State *L)
{
    // call GetBulletRightMargin
    int returns = (wxRichTextBuffer::GetBulletRightMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetCommandProcessor[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetCommandProcessor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetCommandProcessor[1] = {{ wxLua_wxRichTextBuffer_GetCommandProcessor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetCommandProcessor }};
//     wxCommandProcessor* GetCommandProcessor() const;
static int LUACALL wxLua_wxRichTextBuffer_GetCommandProcessor(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetCommandProcessor
    wxCommandProcessor* returns = (wxCommandProcessor*)self->GetCommandProcessor();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCommandProcessor);

    return 1;
}

#endif // (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetDimensionScale[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetDimensionScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetDimensionScale[1] = {{ wxLua_wxRichTextBuffer_GetDimensionScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetDimensionScale }};
//     double GetDimensionScale() const;
static int LUACALL wxLua_wxRichTextBuffer_GetDimensionScale(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetDimensionScale
    double returns = (self->GetDimensionScale());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static int LUACALL wxLua_wxRichTextBuffer_GetDrawingHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetDrawingHandlers[1] = {{ wxLua_wxRichTextBuffer_GetDrawingHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxList& GetDrawingHandlers();
static int LUACALL wxLua_wxRichTextBuffer_GetDrawingHandlers(lua_State *L)
{
    // call GetDrawingHandlers
    wxList* returns = (wxList*)&wxRichTextBuffer::GetDrawingHandlers();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxList);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetExtWildcard[] = { &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetExtWildcard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetExtWildcard[1] = {{ wxLua_wxRichTextBuffer_GetExtWildcard, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetExtWildcard }};
//     static wxString GetExtWildcard(bool combine = false, bool save = false, wxArrayInt* types = NULL);
static int LUACALL wxLua_wxRichTextBuffer_GetExtWildcard(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt types = NULL
    wxArrayInt * types = (argCount >= 3 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayInt) : NULL);
    // bool save = false
    bool save = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // bool combine = false
    bool combine = (argCount >= 1 ? wxlua_getbooleantype(L, 1) : false);
    // call GetExtWildcard
    wxString returns = (wxRichTextBuffer::GetExtWildcard(combine, save, types));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextBuffer_GetFieldTypes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetFieldTypes[1] = {{ wxLua_wxRichTextBuffer_GetFieldTypes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxRichTextFieldTypeHashMap& GetFieldTypes();
static int LUACALL wxLua_wxRichTextBuffer_GetFieldTypes(lua_State *L)
{
    // call GetFieldTypes
    wxRichTextFieldTypeHashMap* returns = (wxRichTextFieldTypeHashMap*)&wxRichTextBuffer::GetFieldTypes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFieldTypeHashMap);

    return 1;
}

static int LUACALL wxLua_wxRichTextBuffer_GetFloatingLayoutMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetFloatingLayoutMode[1] = {{ wxLua_wxRichTextBuffer_GetFloatingLayoutMode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool GetFloatingLayoutMode();
static int LUACALL wxLua_wxRichTextBuffer_GetFloatingLayoutMode(lua_State *L)
{
    // call GetFloatingLayoutMode
    bool returns = (wxRichTextBuffer::GetFloatingLayoutMode());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontScale[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetFontScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetFontScale[1] = {{ wxLua_wxRichTextBuffer_GetFontScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontScale }};
//     double GetFontScale() const;
static int LUACALL wxLua_wxRichTextBuffer_GetFontScale(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetFontScale
    double returns = (self->GetFontScale());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontTable1[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetFontTable1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetFontTable1[1] = {{ wxLua_wxRichTextBuffer_GetFontTable1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontTable1 }};
//     const wxRichTextFontTable& GetFontTable() const;
static int LUACALL wxLua_wxRichTextBuffer_GetFontTable1(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetFontTable
    const wxRichTextFontTable* returns = (const wxRichTextFontTable*)&self->GetFontTable();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFontTable);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontTable[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetFontTable(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetFontTable[1] = {{ wxLua_wxRichTextBuffer_GetFontTable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontTable }};
//     wxRichTextFontTable& GetFontTable();
static int LUACALL wxLua_wxRichTextBuffer_GetFontTable(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetFontTable
    wxRichTextFontTable* returns = (wxRichTextFontTable*)&self->GetFontTable();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFontTable);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetHandlerFlags[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetHandlerFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetHandlerFlags[1] = {{ wxLua_wxRichTextBuffer_GetHandlerFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetHandlerFlags }};
//     int GetHandlerFlags() const;
static int LUACALL wxLua_wxRichTextBuffer_GetHandlerFlags(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetHandlerFlags
    int returns = (self->GetHandlerFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static int LUACALL wxLua_wxRichTextBuffer_GetHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetHandlers[1] = {{ wxLua_wxRichTextBuffer_GetHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxList& GetHandlers();
static int LUACALL wxLua_wxRichTextBuffer_GetHandlers(lua_State *L)
{
    // call GetHandlers
    wxList* returns = (wxList*)&wxRichTextBuffer::GetHandlers();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxList);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextBuffer_GetRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetRenderer[1] = {{ wxLua_wxRichTextBuffer_GetRenderer, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxRichTextRenderer* GetRenderer();
static int LUACALL wxLua_wxRichTextBuffer_GetRenderer(lua_State *L)
{
    // call GetRenderer
    wxRichTextRenderer* returns = (wxRichTextRenderer*)wxRichTextBuffer::GetRenderer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRenderer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetScale[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetScale[1] = {{ wxLua_wxRichTextBuffer_GetScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetScale }};
//     double GetScale() const;
static int LUACALL wxLua_wxRichTextBuffer_GetScale(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetScale
    double returns = (self->GetScale());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetStyleSheet[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetStyleSheet[1] = {{ wxLua_wxRichTextBuffer_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetStyleSheet }};
//     virtual wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextBuffer_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_GetStyleStackSize[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_GetStyleStackSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetStyleStackSize[1] = {{ wxLua_wxRichTextBuffer_GetStyleStackSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetStyleStackSize }};
//     virtual size_t GetStyleStackSize() const;
static int LUACALL wxLua_wxRichTextBuffer_GetStyleStackSize(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call GetStyleStackSize
    size_t returns = (self->GetStyleStackSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_HitTest[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_HitTest[1] = {{ wxLua_wxRichTextBuffer_HitTest, WXLUAMETHOD_METHOD, 7, 8, s_wxluatypeArray_wxLua_wxRichTextBuffer_HitTest }};
//     virtual int HitTest(wxDC& dc, wxRichTextDrawingContext& context, const wxPoint& pt, long& textPosition, wxRichTextObject** obj, wxRichTextObject** contextObj, int flags = 0);
static int LUACALL wxLua_wxRichTextBuffer_HitTest(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // wxRichTextObject contextObj
    wxRichTextObject ** contextObj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextObject);
    // wxRichTextObject obj
    wxRichTextObject ** obj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject);
    // long textPosition
    long * textPosition = (long *)wxlua_touserdata(L, 5);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call HitTest
    int returns = (self->HitTest(*dc, *context, *pt, *textPosition, obj, contextObj, flags));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_Init[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_Init[1] = {{ wxLua_wxRichTextBuffer_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextBuffer_Init(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call Init
    self->Init();

    return 0;
}

static int LUACALL wxLua_wxRichTextBuffer_InitStandardHandlers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InitStandardHandlers[1] = {{ wxLua_wxRichTextBuffer_InitStandardHandlers, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void InitStandardHandlers();
static int LUACALL wxLua_wxRichTextBuffer_InitStandardHandlers(lua_State *L)
{
    // call InitStandardHandlers
    wxRichTextBuffer::InitStandardHandlers();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertDrawingHandler[] = { &wxluatype_wxRichTextDrawingHandler, NULL };
static int LUACALL wxLua_wxRichTextBuffer_InsertDrawingHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InsertDrawingHandler[1] = {{ wxLua_wxRichTextBuffer_InsertDrawingHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertDrawingHandler }};
//     static void InsertDrawingHandler(wxRichTextDrawingHandler *handler);
static int LUACALL wxLua_wxRichTextBuffer_InsertDrawingHandler(lua_State *L)
{
    // wxRichTextDrawingHandler handler
    wxRichTextDrawingHandler * handler = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call InsertDrawingHandler
    wxRichTextBuffer::InsertDrawingHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertHandler[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextBuffer_InsertHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InsertHandler[1] = {{ wxLua_wxRichTextBuffer_InsertHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertHandler }};
//     static void InsertHandler(wxRichTextFileHandler *handler);
static int LUACALL wxLua_wxRichTextBuffer_InsertHandler(lua_State *L)
{
    // wxRichTextFileHandler handler
    wxRichTextFileHandler * handler = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call InsertHandler
    wxRichTextBuffer::InsertHandler(handler);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertImageWithUndo[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextImageBlock, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextBuffer_InsertImageWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InsertImageWithUndo[1] = {{ wxLua_wxRichTextBuffer_InsertImageWithUndo, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertImageWithUndo }};
//     bool InsertImageWithUndo(long pos, const wxRichTextImageBlock& imageBlock, wxRichTextCtrl* ctrl, int flags, const wxRichTextAttr& textAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextBuffer_InsertImageWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr textAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * textAttr = (argCount >= 6 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 5);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextCtrl);
    // const wxRichTextImageBlock imageBlock
    const wxRichTextImageBlock * imageBlock = (const wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextImageBlock);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call InsertImageWithUndo
    bool returns = (self->InsertImageWithUndo(pos, *imageBlock, ctrl, flags, *textAttr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertNewlineWithUndo[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_InsertNewlineWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InsertNewlineWithUndo[1] = {{ wxLua_wxRichTextBuffer_InsertNewlineWithUndo, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertNewlineWithUndo }};
//     bool InsertNewlineWithUndo(long pos, wxRichTextCtrl* ctrl, int flags = 0);
static int LUACALL wxLua_wxRichTextBuffer_InsertNewlineWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextCtrl);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call InsertNewlineWithUndo
    bool returns = (self->InsertNewlineWithUndo(pos, ctrl, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertObjectWithUndo[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_InsertObjectWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InsertObjectWithUndo[1] = {{ wxLua_wxRichTextBuffer_InsertObjectWithUndo, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertObjectWithUndo }};
//     wxRichTextObject* InsertObjectWithUndo(long pos, wxRichTextObject *object, wxRichTextCtrl* ctrl, int flags);
static int LUACALL wxLua_wxRichTextBuffer_InsertObjectWithUndo(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 5);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextCtrl);
    // wxRichTextObject object
    wxRichTextObject * object = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call InsertObjectWithUndo
    wxRichTextObject* returns = (wxRichTextObject*)self->InsertObjectWithUndo(pos, object, ctrl, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertParagraphsWithUndo[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_InsertParagraphsWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InsertParagraphsWithUndo[1] = {{ wxLua_wxRichTextBuffer_InsertParagraphsWithUndo, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertParagraphsWithUndo }};
//     bool InsertParagraphsWithUndo(long pos, const wxRichTextParagraphLayoutBox& paragraphs, wxRichTextCtrl* ctrl, int flags = 0);
static int LUACALL wxLua_wxRichTextBuffer_InsertParagraphsWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextCtrl);
    // const wxRichTextParagraphLayoutBox paragraphs
    const wxRichTextParagraphLayoutBox * paragraphs = (const wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call InsertParagraphsWithUndo
    bool returns = (self->InsertParagraphsWithUndo(pos, *paragraphs, ctrl, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertTextWithUndo[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_InsertTextWithUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_InsertTextWithUndo[1] = {{ wxLua_wxRichTextBuffer_InsertTextWithUndo, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextBuffer_InsertTextWithUndo }};
//     bool InsertTextWithUndo(long pos, const wxString& text, wxRichTextCtrl* ctrl, int flags = 0);
static int LUACALL wxLua_wxRichTextBuffer_InsertTextWithUndo(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 0);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextCtrl);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call InsertTextWithUndo
    bool returns = (self->InsertTextWithUndo(pos, text, ctrl, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_IsModified[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_IsModified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_IsModified[1] = {{ wxLua_wxRichTextBuffer_IsModified, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_IsModified }};
//     bool IsModified() const;
static int LUACALL wxLua_wxRichTextBuffer_IsModified(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call IsModified
    bool returns = (self->IsModified());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_LoadFile1[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxInputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_LoadFile1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_LoadFile1[1] = {{ wxLua_wxRichTextBuffer_LoadFile1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_LoadFile1 }};
//     virtual bool LoadFile(wxInputStream& stream, wxRichTextFileType type = wxRICHTEXT_TYPE_ANY);
static int LUACALL wxLua_wxRichTextBuffer_LoadFile1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextFileType type = wxRICHTEXT_TYPE_ANY
    wxRichTextFileType type = (argCount >= 3 ? (wxRichTextFileType)wxlua_getenumtype(L, 3) : wxRICHTEXT_TYPE_ANY);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call LoadFile
    bool returns = (self->LoadFile(*stream, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_LoadFile[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_LoadFile(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_LoadFile[1] = {{ wxLua_wxRichTextBuffer_LoadFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_LoadFile }};
//     virtual bool LoadFile(const wxString& filename, wxRichTextFileType type = wxRICHTEXT_TYPE_ANY);
static int LUACALL wxLua_wxRichTextBuffer_LoadFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextFileType type = wxRICHTEXT_TYPE_ANY
    wxRichTextFileType type = (argCount >= 3 ? (wxRichTextFileType)wxlua_getenumtype(L, 3) : wxRICHTEXT_TYPE_ANY);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call LoadFile
    bool returns = (self->LoadFile(filename, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_Modify[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextBuffer_Modify(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_Modify[1] = {{ wxLua_wxRichTextBuffer_Modify, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_Modify }};
//     void Modify(bool modify = true);
static int LUACALL wxLua_wxRichTextBuffer_Modify(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool modify = true
    bool modify = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call Modify
    self->Modify(modify);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_PasteFromClipboard[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_PasteFromClipboard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_PasteFromClipboard[1] = {{ wxLua_wxRichTextBuffer_PasteFromClipboard, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_PasteFromClipboard }};
//     virtual bool PasteFromClipboard(long position);
static int LUACALL wxLua_wxRichTextBuffer_PasteFromClipboard(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call PasteFromClipboard
    bool returns = (self->PasteFromClipboard(position));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_PopStyleSheet[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_PopStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_PopStyleSheet[1] = {{ wxLua_wxRichTextBuffer_PopStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_PopStyleSheet }};
//     wxRichTextStyleSheet* PopStyleSheet();
static int LUACALL wxLua_wxRichTextBuffer_PopStyleSheet(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call PopStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->PopStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_PushStyleSheet[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextBuffer_PushStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_PushStyleSheet[1] = {{ wxLua_wxRichTextBuffer_PushStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_PushStyleSheet }};
//     bool PushStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextBuffer_PushStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call PushStyleSheet
    bool returns = (self->PushStyleSheet(styleSheet));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveDrawingHandler[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_RemoveDrawingHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_RemoveDrawingHandler[1] = {{ wxLua_wxRichTextBuffer_RemoveDrawingHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveDrawingHandler }};
//     static bool RemoveDrawingHandler(const wxString& name);
static int LUACALL wxLua_wxRichTextBuffer_RemoveDrawingHandler(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call RemoveDrawingHandler
    bool returns = (wxRichTextBuffer::RemoveDrawingHandler(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveEventHandler[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxEvtHandler, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextBuffer_RemoveEventHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_RemoveEventHandler[1] = {{ wxLua_wxRichTextBuffer_RemoveEventHandler, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveEventHandler }};
//     bool RemoveEventHandler(wxEvtHandler* handler, bool deleteHandler = false);
static int LUACALL wxLua_wxRichTextBuffer_RemoveEventHandler(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteHandler = false
    bool deleteHandler = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxEvtHandler handler
    wxEvtHandler * handler = (wxEvtHandler *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvtHandler);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call RemoveEventHandler
    bool returns = (self->RemoveEventHandler(handler, deleteHandler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveFieldType[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_RemoveFieldType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_RemoveFieldType[1] = {{ wxLua_wxRichTextBuffer_RemoveFieldType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveFieldType }};
//     static bool RemoveFieldType(const wxString& name);
static int LUACALL wxLua_wxRichTextBuffer_RemoveFieldType(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call RemoveFieldType
    bool returns = (wxRichTextBuffer::RemoveFieldType(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveHandler[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBuffer_RemoveHandler(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_RemoveHandler[1] = {{ wxLua_wxRichTextBuffer_RemoveHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_RemoveHandler }};
//     static bool RemoveHandler(const wxString& name);
static int LUACALL wxLua_wxRichTextBuffer_RemoveHandler(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call RemoveHandler
    bool returns = (wxRichTextBuffer::RemoveHandler(name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_ResetAndClearCommands[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_ResetAndClearCommands(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_ResetAndClearCommands[1] = {{ wxLua_wxRichTextBuffer_ResetAndClearCommands, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_ResetAndClearCommands }};
//     virtual void ResetAndClearCommands();
static int LUACALL wxLua_wxRichTextBuffer_ResetAndClearCommands(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call ResetAndClearCommands
    self->ResetAndClearCommands();

    return 0;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SaveFile1[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxOutputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SaveFile1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SaveFile1[1] = {{ wxLua_wxRichTextBuffer_SaveFile1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_SaveFile1 }};
//     virtual bool SaveFile(wxOutputStream& stream, wxRichTextFileType type = wxRICHTEXT_TYPE_ANY);
static int LUACALL wxLua_wxRichTextBuffer_SaveFile1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextFileType type = wxRICHTEXT_TYPE_ANY
    wxRichTextFileType type = (argCount >= 3 ? (wxRichTextFileType)wxlua_getenumtype(L, 3) : wxRICHTEXT_TYPE_ANY);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SaveFile
    bool returns = (self->SaveFile(*stream, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SaveFile[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SaveFile(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SaveFile[1] = {{ wxLua_wxRichTextBuffer_SaveFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_SaveFile }};
//     virtual bool SaveFile(const wxString& filename, wxRichTextFileType type = wxRICHTEXT_TYPE_ANY);
static int LUACALL wxLua_wxRichTextBuffer_SaveFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextFileType type = wxRICHTEXT_TYPE_ANY
    wxRichTextFileType type = (argCount >= 3 ? (wxRichTextFileType)wxlua_getenumtype(L, 3) : wxRICHTEXT_TYPE_ANY);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SaveFile
    bool returns = (self->SaveFile(filename, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SendEvent[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxEvent, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SendEvent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SendEvent[1] = {{ wxLua_wxRichTextBuffer_SendEvent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_SendEvent }};
//     bool SendEvent(wxEvent& event, bool sendToAll = true);
static int LUACALL wxLua_wxRichTextBuffer_SendEvent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool sendToAll = true
    bool sendToAll = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxEvent event
    wxEvent * event = (wxEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEvent);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SendEvent
    bool returns = (self->SendEvent(*event, sendToAll));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetBulletProportion[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetBulletProportion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetBulletProportion[1] = {{ wxLua_wxRichTextBuffer_SetBulletProportion, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetBulletProportion }};
//     static void SetBulletProportion(float prop);
static int LUACALL wxLua_wxRichTextBuffer_SetBulletProportion(lua_State *L)
{
    // float prop
    float prop = (float)wxlua_getnumbertype(L, 1);
    // call SetBulletProportion
    wxRichTextBuffer::SetBulletProportion(prop);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetBulletRightMargin[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetBulletRightMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetBulletRightMargin[1] = {{ wxLua_wxRichTextBuffer_SetBulletRightMargin, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetBulletRightMargin }};
//     static void SetBulletRightMargin(int margin);
static int LUACALL wxLua_wxRichTextBuffer_SetBulletRightMargin(lua_State *L)
{
    // int margin
    int margin = (int)wxlua_getnumbertype(L, 1);
    // call SetBulletRightMargin
    wxRichTextBuffer::SetBulletRightMargin(margin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetDimensionScale[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetDimensionScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetDimensionScale[1] = {{ wxLua_wxRichTextBuffer_SetDimensionScale, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetDimensionScale }};
//     void SetDimensionScale(double dimScale);
static int LUACALL wxLua_wxRichTextBuffer_SetDimensionScale(lua_State *L)
{
    // double dimScale
    double dimScale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SetDimensionScale
    self->SetDimensionScale(dimScale);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetFloatingLayoutMode[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetFloatingLayoutMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetFloatingLayoutMode[1] = {{ wxLua_wxRichTextBuffer_SetFloatingLayoutMode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetFloatingLayoutMode }};
//     static void SetFloatingLayoutMode(bool mode);
static int LUACALL wxLua_wxRichTextBuffer_SetFloatingLayoutMode(lua_State *L)
{
    // bool mode
    bool mode = wxlua_getbooleantype(L, 1);
    // call SetFloatingLayoutMode
    wxRichTextBuffer::SetFloatingLayoutMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetFontScale[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetFontScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetFontScale[1] = {{ wxLua_wxRichTextBuffer_SetFontScale, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetFontScale }};
//     void SetFontScale(double fontScale);
static int LUACALL wxLua_wxRichTextBuffer_SetFontScale(lua_State *L)
{
    // double fontScale
    double fontScale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SetFontScale
    self->SetFontScale(fontScale);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetFontTable[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextFontTable, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetFontTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetFontTable[1] = {{ wxLua_wxRichTextBuffer_SetFontTable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetFontTable }};
//     void SetFontTable(const wxRichTextFontTable& table);
static int LUACALL wxLua_wxRichTextBuffer_SetFontTable(lua_State *L)
{
    // const wxRichTextFontTable table
    const wxRichTextFontTable * table = (const wxRichTextFontTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFontTable);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SetFontTable
    self->SetFontTable(*table);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetHandlerFlags[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetHandlerFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetHandlerFlags[1] = {{ wxLua_wxRichTextBuffer_SetHandlerFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetHandlerFlags }};
//     void SetHandlerFlags(int flags);
static int LUACALL wxLua_wxRichTextBuffer_SetHandlerFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SetHandlerFlags
    self->SetHandlerFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetRenderer[] = { &wxluatype_wxRichTextRenderer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetRenderer[1] = {{ wxLua_wxRichTextBuffer_SetRenderer, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetRenderer }};
//     static void SetRenderer(wxRichTextRenderer* renderer);
static int LUACALL wxLua_wxRichTextBuffer_SetRenderer(lua_State *L)
{
    // wxRichTextRenderer renderer
    wxRichTextRenderer * renderer = (wxRichTextRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRenderer);
    // call SetRenderer
    wxRichTextBuffer::SetRenderer(renderer);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetScale[] = { &wxluatype_wxRichTextBuffer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetScale[1] = {{ wxLua_wxRichTextBuffer_SetScale, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetScale }};
//     void SetScale(double scale);
static int LUACALL wxLua_wxRichTextBuffer_SetScale(lua_State *L)
{
    // double scale
    double scale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SetScale
    self->SetScale(scale);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetStyleSheet[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetStyleSheet[1] = {{ wxLua_wxRichTextBuffer_SetStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetStyleSheet }};
//     void SetStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextBuffer_SetStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SetStyleSheet
    self->SetStyleSheet(styleSheet);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SetStyleSheetAndNotify[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SetStyleSheetAndNotify(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SetStyleSheetAndNotify[1] = {{ wxLua_wxRichTextBuffer_SetStyleSheetAndNotify, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SetStyleSheetAndNotify }};
//     bool SetStyleSheetAndNotify(wxRichTextStyleSheet* sheet);
static int LUACALL wxLua_wxRichTextBuffer_SetStyleSheetAndNotify(lua_State *L)
{
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SetStyleSheetAndNotify
    bool returns = (self->SetStyleSheetAndNotify(sheet));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SubmitAction[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SubmitAction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SubmitAction[1] = {{ wxLua_wxRichTextBuffer_SubmitAction, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_SubmitAction }};
//     virtual bool SubmitAction(wxRichTextAction* action);
static int LUACALL wxLua_wxRichTextBuffer_SubmitAction(lua_State *L)
{
    // wxRichTextAction action
    wxRichTextAction * action = (wxRichTextAction *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAction);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SubmitAction
    bool returns = (self->SubmitAction(action));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_SuppressingUndo[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_SuppressingUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SuppressingUndo[1] = {{ wxLua_wxRichTextBuffer_SuppressingUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_SuppressingUndo }};
//     virtual bool SuppressingUndo() const;
static int LUACALL wxLua_wxRichTextBuffer_SuppressingUndo(lua_State *L)
{
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call SuppressingUndo
    bool returns = (self->SuppressingUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_delete[] = { &wxluatype_wxRichTextBuffer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_op_set[] = { &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_op_set[1] = {{ wxLua_wxRichTextBuffer_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_op_set }};
//     void operator= (const wxRichTextBuffer& obj);
static int LUACALL wxLua_wxRichTextBuffer_op_set(lua_State *L)
{
    // const wxRichTextBuffer obj
    const wxRichTextBuffer * obj = (const wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextBuffer * self = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call op_set
    (*self)=(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBuffer_constructor1[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBuffer_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_constructor1[1] = {{ wxLua_wxRichTextBuffer_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_constructor1 }};
//     wxRichTextBuffer(const wxRichTextBuffer& obj);
static int LUACALL wxLua_wxRichTextBuffer_constructor1(lua_State *L)
{
    // const wxRichTextBuffer obj
    const wxRichTextBuffer * obj = (const wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer);
    // call constructor
    wxRichTextBuffer* returns = new wxRichTextBuffer(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextBuffer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}

static int LUACALL wxLua_wxRichTextBuffer_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_constructor[1] = {{ wxLua_wxRichTextBuffer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextBuffer();
static int LUACALL wxLua_wxRichTextBuffer_constructor(lua_State *L)
{
    // call constructor
    wxRichTextBuffer* returns = new wxRichTextBuffer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextBuffer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}




#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_Dump_overload[] =
{

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { wxLua_wxRichTextBuffer_Dump1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_Dump1 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)
    { wxLua_wxRichTextBuffer_Dump, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_Dump },
};
static int s_wxluafunc_wxLua_wxRichTextBuffer_Dump_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBuffer_Dump_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler_overload[] =
{
    { wxLua_wxRichTextBuffer_FindHandler2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler2 },
    { wxLua_wxRichTextBuffer_FindHandler1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler1 },
    { wxLua_wxRichTextBuffer_FindHandler, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_FindHandler },
};
static int s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_GetFontTable_overload[] =
{
    { wxLua_wxRichTextBuffer_GetFontTable1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontTable1 },
    { wxLua_wxRichTextBuffer_GetFontTable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_GetFontTable },
};
static int s_wxluafunc_wxLua_wxRichTextBuffer_GetFontTable_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBuffer_GetFontTable_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_LoadFile_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextBuffer_LoadFile1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_LoadFile1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextBuffer_LoadFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_LoadFile },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextBuffer_LoadFile_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBuffer_LoadFile_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_SaveFile_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextBuffer_SaveFile1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_SaveFile1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextBuffer_SaveFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextBuffer_SaveFile },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextBuffer_SaveFile_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBuffer_SaveFile_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBuffer_constructor_overload[] =
{
    { wxLua_wxRichTextBuffer_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBuffer_constructor1 },
    { wxLua_wxRichTextBuffer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextBuffer_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBuffer_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextBuffer_delete_function(void** p)
{
    wxRichTextBuffer* o = (wxRichTextBuffer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextBuffer_methods[] = {
    { "AddDrawingHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_AddDrawingHandler, 1, NULL },
    { "AddEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_AddEventHandler, 1, NULL },
    { "AddFieldType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_AddFieldType, 1, NULL },
    { "AddHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_AddHandler, 1, NULL },
    { "AddParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_AddParagraph, 1, NULL },
    { "BatchingUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BatchingUndo, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "BeginAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginAlignment, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "BeginBatchUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginBatchUndo, 1, NULL },
    { "BeginBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginBold, 1, NULL },
    { "BeginCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginCharacterStyle, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "BeginFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "BeginFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginFontSize, 1, NULL },
    { "BeginItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginItalic, 1, NULL },
    { "BeginLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginLeftIndent, 1, NULL },
    { "BeginLineSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginLineSpacing, 1, NULL },
    { "BeginListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginListStyle, 1, NULL },
    { "BeginNumberedBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginNumberedBullet, 1, NULL },
    { "BeginParagraphSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginParagraphSpacing, 1, NULL },
    { "BeginParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginParagraphStyle, 1, NULL },
    { "BeginRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginRightIndent, 1, NULL },
    { "BeginStandardBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginStandardBullet, 1, NULL },
    { "BeginStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginStyle, 1, NULL },
    { "BeginSuppressUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginSuppressUndo, 1, NULL },
    { "BeginSymbolBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginSymbolBullet, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "BeginTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "BeginURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginURL, 1, NULL },
    { "BeginUnderline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_BeginUnderline, 1, NULL },
    { "CanPasteFromClipboard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_CanPasteFromClipboard, 1, NULL },
    { "CleanUpDrawingHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_CleanUpDrawingHandlers, 1, NULL },
    { "CleanUpFieldTypes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_CleanUpFieldTypes, 1, NULL },
    { "CleanUpHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_CleanUpHandlers, 1, NULL },
    { "ClearEventHandlers", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_ClearEventHandlers, 1, NULL },
    { "ClearStyleStack", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_ClearStyleStack, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_Copy, 1, NULL },
    { "CopyToClipboard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_CopyToClipboard, 1, NULL },
    { "DeleteRangeWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_DeleteRangeWithUndo, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Dump", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_Dump_overload, s_wxluafunc_wxLua_wxRichTextBuffer_Dump_overload_count, 0 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EndAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndAlignment, 1, NULL },
    { "EndAllStyles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndAllStyles, 1, NULL },
    { "EndBatchUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndBatchUndo, 1, NULL },
    { "EndBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndBold, 1, NULL },
    { "EndCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndCharacterStyle, 1, NULL },
    { "EndFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndFont, 1, NULL },
    { "EndFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndFontSize, 1, NULL },
    { "EndItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndItalic, 1, NULL },
    { "EndLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndLeftIndent, 1, NULL },
    { "EndLineSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndLineSpacing, 1, NULL },
    { "EndListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndListStyle, 1, NULL },
    { "EndNumberedBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndNumberedBullet, 1, NULL },
    { "EndParagraphSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndParagraphSpacing, 1, NULL },
    { "EndParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndParagraphStyle, 1, NULL },
    { "EndRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndRightIndent, 1, NULL },
    { "EndStandardBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndStandardBullet, 1, NULL },
    { "EndStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndStyle, 1, NULL },
    { "EndSuppressUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndSuppressUndo, 1, NULL },
    { "EndSymbolBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndSymbolBullet, 1, NULL },
    { "EndTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndTextColour, 1, NULL },
    { "EndURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndURL, 1, NULL },
    { "EndUnderline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_EndUnderline, 1, NULL },
    { "FindDrawingHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_FindDrawingHandler, 1, NULL },
    { "FindFieldType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_FindFieldType, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler_overload, s_wxluafunc_wxLua_wxRichTextBuffer_FindHandler_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "FindHandlerFilenameOrType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_FindHandlerFilenameOrType, 1, NULL },
    { "GetBatchedCommand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetBatchedCommand, 1, NULL },
    { "GetBulletProportion", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetBulletProportion, 1, NULL },
    { "GetBulletRightMargin", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetBulletRightMargin, 1, NULL },

#if (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetCommandProcessor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetCommandProcessor, 1, NULL },
#endif // (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetDimensionScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetDimensionScale, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetDrawingHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetDrawingHandlers, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetExtWildcard", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetExtWildcard, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetFieldTypes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetFieldTypes, 1, NULL },
    { "GetFloatingLayoutMode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetFloatingLayoutMode, 1, NULL },
    { "GetFontScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetFontScale, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetFontTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetFontTable_overload, s_wxluafunc_wxLua_wxRichTextBuffer_GetFontTable_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetHandlerFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetHandlerFlags, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetHandlers, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRenderer", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_GetRenderer, 1, NULL },
    { "GetScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetScale, 1, NULL },
    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetStyleSheet, 1, NULL },
    { "GetStyleStackSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_GetStyleStackSize, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_HitTest, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_Init, 1, NULL },
    { "InitStandardHandlers", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_InitStandardHandlers, 1, NULL },
    { "InsertDrawingHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_InsertDrawingHandler, 1, NULL },
    { "InsertHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_InsertHandler, 1, NULL },
    { "InsertImageWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_InsertImageWithUndo, 1, NULL },
    { "InsertNewlineWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_InsertNewlineWithUndo, 1, NULL },
    { "InsertObjectWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_InsertObjectWithUndo, 1, NULL },
    { "InsertParagraphsWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_InsertParagraphsWithUndo, 1, NULL },
    { "InsertTextWithUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_InsertTextWithUndo, 1, NULL },
    { "IsModified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_IsModified, 1, NULL },

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_LoadFile_overload, s_wxluafunc_wxLua_wxRichTextBuffer_LoadFile_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "Modify", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_Modify, 1, NULL },
    { "PasteFromClipboard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_PasteFromClipboard, 1, NULL },
    { "PopStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_PopStyleSheet, 1, NULL },
    { "PushStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_PushStyleSheet, 1, NULL },
    { "RemoveDrawingHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_RemoveDrawingHandler, 1, NULL },
    { "RemoveEventHandler", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_RemoveEventHandler, 1, NULL },
    { "RemoveFieldType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_RemoveFieldType, 1, NULL },
    { "RemoveHandler", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_RemoveHandler, 1, NULL },
    { "ResetAndClearCommands", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_ResetAndClearCommands, 1, NULL },

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "SaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SaveFile_overload, s_wxluafunc_wxLua_wxRichTextBuffer_SaveFile_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "SendEvent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SendEvent, 1, NULL },
    { "SetBulletProportion", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_SetBulletProportion, 1, NULL },
    { "SetBulletRightMargin", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_SetBulletRightMargin, 1, NULL },
    { "SetDimensionScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SetDimensionScale, 1, NULL },
    { "SetFloatingLayoutMode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_SetFloatingLayoutMode, 1, NULL },
    { "SetFontScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SetFontScale, 1, NULL },
    { "SetFontTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SetFontTable, 1, NULL },
    { "SetHandlerFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SetHandlerFlags, 1, NULL },
    { "SetRenderer", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBuffer_SetRenderer, 1, NULL },
    { "SetScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SetScale, 1, NULL },
    { "SetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SetStyleSheet, 1, NULL },
    { "SetStyleSheetAndNotify", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SetStyleSheetAndNotify, 1, NULL },
    { "SubmitAction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SubmitAction, 1, NULL },
    { "SuppressingUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_SuppressingUndo, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextBuffer_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBuffer_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextBuffer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextBuffer_constructor_overload, s_wxluafunc_wxLua_wxRichTextBuffer_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextBuffer_methodCount = sizeof(wxRichTextBuffer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextCell
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextCell'
int wxluatype_wxRichTextCell = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_AdjustAttributes[] = { &wxluatype_wxRichTextCell, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextCell_AdjustAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_AdjustAttributes[1] = {{ wxLua_wxRichTextCell_AdjustAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCell_AdjustAttributes }};
//     virtual bool AdjustAttributes(wxRichTextAttr& attr, wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextCell_AdjustAttributes(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call AdjustAttributes
    bool returns = (self->AdjustAttributes(*attr, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_CanEditProperties[] = { &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_CanEditProperties[1] = {{ wxLua_wxRichTextCell_CanEditProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_CanEditProperties }};
//     virtual bool CanEditProperties() const;
static int LUACALL wxLua_wxRichTextCell_CanEditProperties(lua_State *L)
{
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call CanEditProperties
    bool returns = (self->CanEditProperties());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_Clone[] = { &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_Clone[1] = {{ wxLua_wxRichTextCell_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextCell_Clone(lua_State *L)
{
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_Copy[] = { &wxluatype_wxRichTextCell, &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_Copy[1] = {{ wxLua_wxRichTextCell_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCell_Copy }};
//     void Copy(const wxRichTextCell& obj);
static int LUACALL wxLua_wxRichTextCell_Copy(lua_State *L)
{
    // const wxRichTextCell obj
    const wxRichTextCell * obj = (const wxRichTextCell *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCell);
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call Copy
    self->Copy(*obj);

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_Draw[] = { &wxluatype_wxRichTextCell, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCell_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_Draw[1] = {{ wxLua_wxRichTextCell_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextCell_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextCell_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_EditProperties[] = { &wxluatype_wxRichTextCell, &wxluatype_wxWindow, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextCell_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_EditProperties[1] = {{ wxLua_wxRichTextCell_EditProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCell_EditProperties }};
//     virtual bool EditProperties(wxWindow* parent, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextCell_EditProperties(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextBuffer);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call EditProperties
    bool returns = (self->EditProperties(parent, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_GetColSpan[] = { &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_GetColSpan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_GetColSpan[1] = {{ wxLua_wxRichTextCell_GetColSpan, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_GetColSpan }};
//     int GetColSpan() const;
static int LUACALL wxLua_wxRichTextCell_GetColSpan(lua_State *L)
{
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call GetColSpan
    int returns = (self->GetColSpan());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextCell_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel() const;
static int LUACALL wxLua_wxRichTextCell_GetPropertiesMenuLabel(lua_State *L)
{
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_GetRowSpan[] = { &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_GetRowSpan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_GetRowSpan[1] = {{ wxLua_wxRichTextCell_GetRowSpan, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_GetRowSpan }};
//     int GetRowSpan() const;
static int LUACALL wxLua_wxRichTextCell_GetRowSpan(lua_State *L)
{
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call GetRowSpan
    int returns = (self->GetRowSpan());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_GetXMLNodeName[] = { &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_GetXMLNodeName[1] = {{ wxLua_wxRichTextCell_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextCell_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_HitTest[] = { &wxluatype_wxRichTextCell, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCell_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_HitTest[1] = {{ wxLua_wxRichTextCell_HitTest, WXLUAMETHOD_METHOD, 7, 8, s_wxluatypeArray_wxLua_wxRichTextCell_HitTest }};
//     virtual int HitTest(wxDC& dc, wxRichTextDrawingContext& context, const wxPoint& pt, long& textPosition, wxRichTextObject** obj, wxRichTextObject** contextObj, int flags = 0);
static int LUACALL wxLua_wxRichTextCell_HitTest(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // wxRichTextObject contextObj
    wxRichTextObject ** contextObj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextObject);
    // wxRichTextObject obj
    wxRichTextObject ** obj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject);
    // long textPosition
    long * textPosition = (long *)wxlua_touserdata(L, 5);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call HitTest
    int returns = (self->HitTest(*dc, *context, *pt, *textPosition, obj, contextObj, flags));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_SetColSpan[] = { &wxluatype_wxRichTextCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCell_SetColSpan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_SetColSpan[1] = {{ wxLua_wxRichTextCell_SetColSpan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCell_SetColSpan }};
//     void SetColSpan(long span);
static int LUACALL wxLua_wxRichTextCell_SetColSpan(lua_State *L)
{
    // long span
    long span = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call SetColSpan
    self->SetColSpan(span);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_SetRowSpan[] = { &wxluatype_wxRichTextCell, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCell_SetRowSpan(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_SetRowSpan[1] = {{ wxLua_wxRichTextCell_SetRowSpan, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCell_SetRowSpan }};
//     void SetRowSpan(long span);
static int LUACALL wxLua_wxRichTextCell_SetRowSpan(lua_State *L)
{
    // long span
    long span = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCell * self = (wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call SetRowSpan
    self->SetRowSpan(span);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_delete[] = { &wxluatype_wxRichTextCell, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_constructor1[] = { &wxluatype_wxRichTextCell, NULL };
static int LUACALL wxLua_wxRichTextCell_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_constructor1[1] = {{ wxLua_wxRichTextCell_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_constructor1 }};
//     wxRichTextCell(const wxRichTextCell& obj);
static int LUACALL wxLua_wxRichTextCell_constructor1(lua_State *L)
{
    // const wxRichTextCell obj
    const wxRichTextCell * obj = (const wxRichTextCell *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCell);
    // call constructor
    wxRichTextCell* returns = new wxRichTextCell(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextCell);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCell_constructor[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextCell_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_constructor[1] = {{ wxLua_wxRichTextCell_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextCell_constructor }};
//     wxRichTextCell(wxRichTextObject* parent = NULL);
static int LUACALL wxLua_wxRichTextCell_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 1 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject) : NULL);
    // call constructor
    wxRichTextCell* returns = new wxRichTextCell(parent);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextCell);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCell);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCell_constructor_overload[] =
{
    { wxLua_wxRichTextCell_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCell_constructor1 },
    { wxLua_wxRichTextCell_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextCell_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextCell_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCell_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextCell_delete_function(void** p)
{
    wxRichTextCell* o = (wxRichTextCell*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextCell_methods[] = {
    { "AdjustAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_AdjustAttributes, 1, NULL },
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_CanEditProperties, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_Copy, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_EditProperties, 1, NULL },
    { "GetColSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_GetColSpan, 1, NULL },
    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_GetPropertiesMenuLabel, 1, NULL },
    { "GetRowSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_GetRowSpan, 1, NULL },
    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_GetXMLNodeName, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_HitTest, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetColSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_SetColSpan, 1, NULL },
    { "SetRowSpan", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCell_SetRowSpan, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextCell_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextCell", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextCell_constructor_overload, s_wxluafunc_wxLua_wxRichTextCell_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextCell_methodCount = sizeof(wxRichTextCell_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextObjectPtrArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextObjectPtrArray'
int wxluatype_wxRichTextObjectPtrArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Add[] = { &wxluatype_wxRichTextObjectPtrArray, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Add[1] = {{ wxLua_wxRichTextObjectPtrArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Add }};
//     void Add(wxRichTextObject* item);
static int LUACALL wxLua_wxRichTextObjectPtrArray_Add(lua_State *L)
{
    // wxRichTextObject item
    wxRichTextObject * item = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextObjectPtrArray * self = (wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call Add
    self->Add(item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Clear[] = { &wxluatype_wxRichTextObjectPtrArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Clear[1] = {{ wxLua_wxRichTextObjectPtrArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextObjectPtrArray_Clear(lua_State *L)
{
    // get this
    wxRichTextObjectPtrArray * self = (wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_GetCount[] = { &wxluatype_wxRichTextObjectPtrArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_GetCount[1] = {{ wxLua_wxRichTextObjectPtrArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxRichTextObjectPtrArray_GetCount(lua_State *L)
{
    // get this
    wxRichTextObjectPtrArray * self = (wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Insert[] = { &wxluatype_wxRichTextObjectPtrArray, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Insert[1] = {{ wxLua_wxRichTextObjectPtrArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Insert }};
//     void Insert(wxRichTextObject* item, int nIndex);
static int LUACALL wxLua_wxRichTextObjectPtrArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // wxRichTextObject item
    wxRichTextObject * item = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextObjectPtrArray * self = (wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call Insert
    self->Insert(item, nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_IsEmpty[] = { &wxluatype_wxRichTextObjectPtrArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_IsEmpty[1] = {{ wxLua_wxRichTextObjectPtrArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_IsEmpty }};
//     bool IsEmpty();
static int LUACALL wxLua_wxRichTextObjectPtrArray_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextObjectPtrArray * self = (wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Item[] = { &wxluatype_wxRichTextObjectPtrArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Item[1] = {{ wxLua_wxRichTextObjectPtrArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_Item }};
//     wxRichTextObject* Item(size_t nIndex) const;
static int LUACALL wxLua_wxRichTextObjectPtrArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextObjectPtrArray * self = (wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call Item
    wxRichTextObject* returns = (wxRichTextObject*)self->Item(nIndex);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_RemoveAt[] = { &wxluatype_wxRichTextObjectPtrArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_RemoveAt[1] = {{ wxLua_wxRichTextObjectPtrArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_RemoveAt }};
//     void RemoveAt(size_t nIndex);
static int LUACALL wxLua_wxRichTextObjectPtrArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextObjectPtrArray * self = (wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_delete[] = { &wxluatype_wxRichTextObjectPtrArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_constructor1[] = { &wxluatype_wxRichTextObjectPtrArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArray_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_constructor1[1] = {{ wxLua_wxRichTextObjectPtrArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_constructor1 }};
//     wxRichTextObjectPtrArray(const wxRichTextObjectPtrArray& array);
static int LUACALL wxLua_wxRichTextObjectPtrArray_constructor1(lua_State *L)
{
    // const wxRichTextObjectPtrArray array
    const wxRichTextObjectPtrArray * array = (const wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArray);
    // call constructor
    wxRichTextObjectPtrArray* returns = new wxRichTextObjectPtrArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectPtrArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPtrArray);

    return 1;
}

static int LUACALL wxLua_wxRichTextObjectPtrArray_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_constructor[1] = {{ wxLua_wxRichTextObjectPtrArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextObjectPtrArray();
static int LUACALL wxLua_wxRichTextObjectPtrArray_constructor(lua_State *L)
{
    // call constructor
    wxRichTextObjectPtrArray* returns = new wxRichTextObjectPtrArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectPtrArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPtrArray);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArray_constructor_overload[] =
{
    { wxLua_wxRichTextObjectPtrArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArray_constructor1 },
    { wxLua_wxRichTextObjectPtrArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextObjectPtrArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObjectPtrArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextObjectPtrArray_delete_function(void** p)
{
    wxRichTextObjectPtrArray* o = (wxRichTextObjectPtrArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextObjectPtrArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Add, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_Item, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextObjectPtrArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_constructor_overload, s_wxluafunc_wxLua_wxRichTextObjectPtrArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextObjectPtrArray_methodCount = sizeof(wxRichTextObjectPtrArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextObjectPtrArrayArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextObjectPtrArrayArray'
int wxluatype_wxRichTextObjectPtrArrayArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Add[] = { &wxluatype_wxRichTextObjectPtrArrayArray, &wxluatype_wxRichTextObjectPtrArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Add[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Add }};
//     void Add(const wxRichTextObjectPtrArray& item);
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Add(lua_State *L)
{
    // const wxRichTextObjectPtrArray item
    const wxRichTextObjectPtrArray * item = (const wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObjectPtrArray);
    // get this
    wxRichTextObjectPtrArrayArray * self = (wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call Add
    self->Add(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Clear[] = { &wxluatype_wxRichTextObjectPtrArrayArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Clear[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Clear(lua_State *L)
{
    // get this
    wxRichTextObjectPtrArrayArray * self = (wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_GetCount[] = { &wxluatype_wxRichTextObjectPtrArrayArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_GetCount[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_GetCount(lua_State *L)
{
    // get this
    wxRichTextObjectPtrArrayArray * self = (wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Insert[] = { &wxluatype_wxRichTextObjectPtrArrayArray, &wxluatype_wxRichTextObjectPtrArray, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Insert[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_Insert, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Insert }};
//     void Insert(const wxRichTextObjectPtrArray& item, int nIndex);
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Insert(lua_State *L)
{
    // int nIndex
    int nIndex = (int)wxlua_getnumbertype(L, 3);
    // const wxRichTextObjectPtrArray item
    const wxRichTextObjectPtrArray * item = (const wxRichTextObjectPtrArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObjectPtrArray);
    // get this
    wxRichTextObjectPtrArrayArray * self = (wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call Insert
    self->Insert(*item, nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_IsEmpty[] = { &wxluatype_wxRichTextObjectPtrArrayArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_IsEmpty[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_IsEmpty }};
//     bool IsEmpty();
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_IsEmpty(lua_State *L)
{
    // get this
    wxRichTextObjectPtrArrayArray * self = (wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Item[] = { &wxluatype_wxRichTextObjectPtrArrayArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Item[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_Item }};
//     wxRichTextObjectPtrArray Item(size_t nIndex) const;
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_Item(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextObjectPtrArrayArray * self = (wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call Item
    // allocate a new object using the copy constructor
    wxRichTextObjectPtrArray* returns = new wxRichTextObjectPtrArray(self->Item(nIndex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectPtrArray);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPtrArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_RemoveAt[] = { &wxluatype_wxRichTextObjectPtrArrayArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_RemoveAt[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_RemoveAt }};
//     void RemoveAt(size_t nIndex);
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_RemoveAt(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextObjectPtrArrayArray * self = (wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call RemoveAt
    self->RemoveAt(nIndex);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_delete[] = { &wxluatype_wxRichTextObjectPtrArrayArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_constructor1[] = { &wxluatype_wxRichTextObjectPtrArrayArray, NULL };
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_constructor1[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_constructor1 }};
//     wxRichTextObjectPtrArrayArray(const wxRichTextObjectPtrArrayArray& array);
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_constructor1(lua_State *L)
{
    // const wxRichTextObjectPtrArrayArray array
    const wxRichTextObjectPtrArrayArray * array = (const wxRichTextObjectPtrArrayArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPtrArrayArray);
    // call constructor
    wxRichTextObjectPtrArrayArray* returns = new wxRichTextObjectPtrArrayArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectPtrArrayArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPtrArrayArray);

    return 1;
}

static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_constructor[1] = {{ wxLua_wxRichTextObjectPtrArrayArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextObjectPtrArrayArray();
static int LUACALL wxLua_wxRichTextObjectPtrArrayArray_constructor(lua_State *L)
{
    // call constructor
    wxRichTextObjectPtrArrayArray* returns = new wxRichTextObjectPtrArrayArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectPtrArrayArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPtrArrayArray);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_constructor_overload[] =
{
    { wxLua_wxRichTextObjectPtrArrayArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPtrArrayArray_constructor1 },
    { wxLua_wxRichTextObjectPtrArrayArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextObjectPtrArrayArray_delete_function(void** p)
{
    wxRichTextObjectPtrArrayArray* o = (wxRichTextObjectPtrArrayArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextObjectPtrArrayArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Add, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_Item, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_RemoveAt, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextObjectPtrArrayArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_constructor_overload, s_wxluafunc_wxLua_wxRichTextObjectPtrArrayArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextObjectPtrArrayArray_methodCount = sizeof(wxRichTextObjectPtrArrayArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextTable
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextTable'
int wxluatype_wxRichTextTable = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_AcceptsFocus[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_AcceptsFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_AcceptsFocus[1] = {{ wxLua_wxRichTextTable_AcceptsFocus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_AcceptsFocus }};
//     virtual bool AcceptsFocus() const;
static int LUACALL wxLua_wxRichTextTable_AcceptsFocus(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call AcceptsFocus
    bool returns = (self->AcceptsFocus());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_AddColumns[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextTable_AddColumns(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_AddColumns[1] = {{ wxLua_wxRichTextTable_AddColumns, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextTable_AddColumns }};
//     virtual bool AddColumns(int startCol, int noCols, const wxRichTextAttr& attr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextTable_AddColumns(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr attr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * attr = (argCount >= 4 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // int noCols
    int noCols = (int)wxlua_getnumbertype(L, 3);
    // int startCol
    int startCol = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call AddColumns
    bool returns = (self->AddColumns(startCol, noCols, *attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_AddRows[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextTable_AddRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_AddRows[1] = {{ wxLua_wxRichTextTable_AddRows, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextTable_AddRows }};
//     virtual bool AddRows(int startRow, int noRows, const wxRichTextAttr& attr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextTable_AddRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr attr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * attr = (argCount >= 4 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // int noRows
    int noRows = (int)wxlua_getnumbertype(L, 3);
    // int startRow
    int startRow = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call AddRows
    bool returns = (self->AddRows(startRow, noRows, *attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_AdjustAttributes[] = { &wxluatype_wxRichTextTable, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextDrawingContext, NULL };
static int LUACALL wxLua_wxRichTextTable_AdjustAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_AdjustAttributes[1] = {{ wxLua_wxRichTextTable_AdjustAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_AdjustAttributes }};
//     virtual bool AdjustAttributes(wxRichTextAttr& attr, wxRichTextDrawingContext& context);
static int LUACALL wxLua_wxRichTextTable_AdjustAttributes(lua_State *L)
{
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call AdjustAttributes
    bool returns = (self->AdjustAttributes(*attr, *context));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_CalculateRange[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextTable_CalculateRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_CalculateRange[1] = {{ wxLua_wxRichTextTable_CalculateRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_CalculateRange }};
//     virtual void CalculateRange(long start, long& end);
static int LUACALL wxLua_wxRichTextTable_CalculateRange(lua_State *L)
{
    // long end
    long * end = (long *)wxlua_touserdata(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call CalculateRange
    self->CalculateRange(start, *end);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_CanEditProperties[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_CanEditProperties[1] = {{ wxLua_wxRichTextTable_CanEditProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_CanEditProperties }};
//     virtual bool CanEditProperties() const;
static int LUACALL wxLua_wxRichTextTable_CanEditProperties(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call CanEditProperties
    bool returns = (self->CanEditProperties());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_ClearTable[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_ClearTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_ClearTable[1] = {{ wxLua_wxRichTextTable_ClearTable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_ClearTable }};
//     virtual void ClearTable();
static int LUACALL wxLua_wxRichTextTable_ClearTable(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call ClearTable
    self->ClearTable();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_Clone[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_Clone[1] = {{ wxLua_wxRichTextTable_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_Clone }};
//     virtual wxRichTextObject* Clone() const;
static int LUACALL wxLua_wxRichTextTable_Clone(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call Clone
    wxRichTextObject* returns = (wxRichTextObject*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_Copy[] = { &wxluatype_wxRichTextTable, &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_Copy[1] = {{ wxLua_wxRichTextTable_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTable_Copy }};
//     void Copy(const wxRichTextTable& obj);
static int LUACALL wxLua_wxRichTextTable_Copy(lua_State *L)
{
    // const wxRichTextTable obj
    const wxRichTextTable * obj = (const wxRichTextTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextTable);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call Copy
    self->Copy(*obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_CreateTable[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_CreateTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_CreateTable[1] = {{ wxLua_wxRichTextTable_CreateTable, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_CreateTable }};
//     virtual bool CreateTable(int rows, int cols);
static int LUACALL wxLua_wxRichTextTable_CreateTable(lua_State *L)
{
    // int cols
    int cols = (int)wxlua_getnumbertype(L, 3);
    // int rows
    int rows = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call CreateTable
    bool returns = (self->CreateTable(rows, cols));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_DeleteColumns[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_DeleteColumns(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_DeleteColumns[1] = {{ wxLua_wxRichTextTable_DeleteColumns, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextTable_DeleteColumns }};
//     virtual bool DeleteColumns(int startCol, int noCols = 1);
static int LUACALL wxLua_wxRichTextTable_DeleteColumns(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int noCols = 1
    int noCols = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // int startCol
    int startCol = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call DeleteColumns
    bool returns = (self->DeleteColumns(startCol, noCols));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_DeleteRange[] = { &wxluatype_wxRichTextTable, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextTable_DeleteRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_DeleteRange[1] = {{ wxLua_wxRichTextTable_DeleteRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTable_DeleteRange }};
//     virtual bool DeleteRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextTable_DeleteRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call DeleteRange
    bool returns = (self->DeleteRange(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_DeleteRows[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_DeleteRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_DeleteRows[1] = {{ wxLua_wxRichTextTable_DeleteRows, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextTable_DeleteRows }};
//     virtual bool DeleteRows(int startRow, int noRows = 1);
static int LUACALL wxLua_wxRichTextTable_DeleteRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int noRows = 1
    int noRows = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // int startRow
    int startRow = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call DeleteRows
    bool returns = (self->DeleteRows(startRow, noRows));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_Draw[] = { &wxluatype_wxRichTextTable, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextSelection, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_Draw(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_Draw[1] = {{ wxLua_wxRichTextTable_Draw, WXLUAMETHOD_METHOD, 8, 8, s_wxluatypeArray_wxLua_wxRichTextTable_Draw }};
//     virtual bool Draw(wxDC& dc, wxRichTextDrawingContext& context, const wxRichTextRange& range, const wxRichTextSelection& selection, const wxRect& rect, int descent, int style);
static int LUACALL wxLua_wxRichTextTable_Draw(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 8);
    // int descent
    int descent = (int)wxlua_getnumbertype(L, 7);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRect);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextSelection);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextRange);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call Draw
    bool returns = (self->Draw(*dc, *context, *range, *selection, *rect, descent, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_EditProperties[] = { &wxluatype_wxRichTextTable, &wxluatype_wxWindow, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextTable_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_EditProperties[1] = {{ wxLua_wxRichTextTable_EditProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_EditProperties }};
//     virtual bool EditProperties(wxWindow* parent, wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextTable_EditProperties(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextBuffer);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call EditProperties
    bool returns = (self->EditProperties(parent, buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_ExportXML1[] = { &wxluatype_wxRichTextTable, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextTable_ExportXML1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_ExportXML1[1] = {{ wxLua_wxRichTextTable_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_ExportXML1 }};
//     virtual bool ExportXML(wxXmlNode* parent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextTable_ExportXML1(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode parent
    wxXmlNode * parent = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call ExportXML
    bool returns = (self->ExportXML(parent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_ExportXML[] = { &wxluatype_wxRichTextTable, &wxluatype_wxOutputStream, &wxluatype_TNUMBER, &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextTable_ExportXML(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_ExportXML[1] = {{ wxLua_wxRichTextTable_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextTable_ExportXML }};
//     virtual bool ExportXML(wxOutputStream& stream, int indent, wxRichTextXMLHandler* handler);
static int LUACALL wxLua_wxRichTextTable_ExportXML(lua_State *L)
{
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 3);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call ExportXML
    bool returns = (self->ExportXML(*stream, indent, handler));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_FindPosition[] = { &wxluatype_wxRichTextTable, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextTable_FindPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_FindPosition[1] = {{ wxLua_wxRichTextTable_FindPosition, WXLUAMETHOD_METHOD, 7, 7, s_wxluatypeArray_wxLua_wxRichTextTable_FindPosition }};
//     virtual bool FindPosition(wxDC& dc, wxRichTextDrawingContext& context, long index, wxPoint& pt, int* height, bool forceLineStart);
static int LUACALL wxLua_wxRichTextTable_FindPosition(lua_State *L)
{
    // bool forceLineStart
    bool forceLineStart = wxlua_getbooleantype(L, 7);
    // int height
    int * height = (int *)wxlua_touserdata(L, 6);
    // wxPoint pt
    wxPoint * pt = (wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint);
    // long index
    long index = (long)wxlua_getnumbertype(L, 4);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call FindPosition
    bool returns = (self->FindPosition(*dc, *context, index, *pt, height, forceLineStart));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetCell1[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_GetCell1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetCell1[1] = {{ wxLua_wxRichTextTable_GetCell1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTable_GetCell1 }};
//     virtual wxRichTextCell* GetCell(long pos) const;
static int LUACALL wxLua_wxRichTextTable_GetCell1(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetCell
    wxRichTextCell* returns = (wxRichTextCell*)self->GetCell(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetCell[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_GetCell(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetCell[1] = {{ wxLua_wxRichTextTable_GetCell, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_GetCell }};
//     virtual wxRichTextCell* GetCell(int row, int col) const;
static int LUACALL wxLua_wxRichTextTable_GetCell(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetCell
    wxRichTextCell* returns = (wxRichTextCell*)self->GetCell(row, col);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetCellRowColumnPosition[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextTable_GetCellRowColumnPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetCellRowColumnPosition[1] = {{ wxLua_wxRichTextTable_GetCellRowColumnPosition, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextTable_GetCellRowColumnPosition }};
//     virtual bool GetCellRowColumnPosition(long pos, int& row, int& col) const;
static int LUACALL wxLua_wxRichTextTable_GetCellRowColumnPosition(lua_State *L)
{
    // int col
    int * col = (int *)wxlua_touserdata(L, 4);
    // int row
    int * row = (int *)wxlua_touserdata(L, 3);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetCellRowColumnPosition
    bool returns = (self->GetCellRowColumnPosition(pos, *row, *col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetCells[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_GetCells(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetCells[1] = {{ wxLua_wxRichTextTable_GetCells, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_GetCells }};
//     wxRichTextObjectPtrArrayArray& GetCells();
static int LUACALL wxLua_wxRichTextTable_GetCells(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetCells
    wxRichTextObjectPtrArrayArray* returns = (wxRichTextObjectPtrArrayArray*)&self->GetCells();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPtrArrayArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetColumnCount[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_GetColumnCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetColumnCount[1] = {{ wxLua_wxRichTextTable_GetColumnCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_GetColumnCount }};
//     int GetColumnCount() const;
static int LUACALL wxLua_wxRichTextTable_GetColumnCount(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetColumnCount
    int returns = (self->GetColumnCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_Geometry && wxUSE_GEOMETRY) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetFocusedCell[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_GetFocusedCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetFocusedCell[1] = {{ wxLua_wxRichTextTable_GetFocusedCell, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_GetFocusedCell }};
//     virtual wxPosition GetFocusedCell() const;
static int LUACALL wxLua_wxRichTextTable_GetFocusedCell(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetFocusedCell
    // allocate a new object using the copy constructor
    wxPosition* returns = new wxPosition(self->GetFocusedCell());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPosition);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPosition);

    return 1;
}

#endif // (wxLUA_USE_Geometry && wxUSE_GEOMETRY) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextTable_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel() const;
static int LUACALL wxLua_wxRichTextTable_GetPropertiesMenuLabel(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetRangeSize[] = { &wxluatype_wxRichTextTable, &wxluatype_wxRichTextRange, &wxluatype_wxSize, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextTable_GetRangeSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetRangeSize[1] = {{ wxLua_wxRichTextTable_GetRangeSize, WXLUAMETHOD_METHOD, 7, 10, s_wxluatypeArray_wxLua_wxRichTextTable_GetRangeSize }};
//     virtual bool GetRangeSize(const wxRichTextRange& range, wxSize& size, int& descent, wxDC& dc, wxRichTextDrawingContext& context, int flags, const wxPoint& position = wxNULLPOINT, const wxSize& parentSize = wxDefaultSize, wxArrayInt* partialExtents = NULL) const;
static int LUACALL wxLua_wxRichTextTable_GetRangeSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt partialExtents = NULL
    wxArrayInt * partialExtents = (argCount >= 10 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 10, wxluatype_wxArrayInt) : NULL);
    // const wxSize parentSize = wxDefaultSize
    const wxSize * parentSize = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint position = wxNULLPOINT
    const wxPoint * position = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxNULLPOINT);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 7);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // int descent
    int * descent = (int *)wxlua_touserdata(L, 4);
    // wxSize size
    wxSize * size = (wxSize *)wxluaT_getuserdatatype(L, 3, wxluatype_wxSize);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetRangeSize
    bool returns = (self->GetRangeSize(*range, *size, *descent, *dc, *context, flags, *position, *parentSize, partialExtents));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetRowCount[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_GetRowCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetRowCount[1] = {{ wxLua_wxRichTextTable_GetRowCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_GetRowCount }};
//     int GetRowCount() const;
static int LUACALL wxLua_wxRichTextTable_GetRowCount(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetRowCount
    int returns = (self->GetRowCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetSelection[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetSelection[1] = {{ wxLua_wxRichTextTable_GetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_GetSelection }};
//     virtual wxRichTextSelection GetSelection(long start, long end) const;
static int LUACALL wxLua_wxRichTextTable_GetSelection(lua_State *L)
{
    // long end
    long end = (long)wxlua_getnumbertype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetSelection
    // allocate a new object using the copy constructor
    wxRichTextSelection* returns = new wxRichTextSelection(self->GetSelection(start, end));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextSelection);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextSelection);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetTextForRange[] = { &wxluatype_wxRichTextTable, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextTable_GetTextForRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetTextForRange[1] = {{ wxLua_wxRichTextTable_GetTextForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTable_GetTextForRange }};
//     virtual wxString GetTextForRange(const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextTable_GetTextForRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetTextForRange
    wxString returns = (self->GetTextForRange(*range));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_GetXMLNodeName[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_GetXMLNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetXMLNodeName[1] = {{ wxLua_wxRichTextTable_GetXMLNodeName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_GetXMLNodeName }};
//     virtual wxString GetXMLNodeName() const;
static int LUACALL wxLua_wxRichTextTable_GetXMLNodeName(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call GetXMLNodeName
    wxString returns = (self->GetXMLNodeName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_HandlesChildSelections[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_HandlesChildSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_HandlesChildSelections[1] = {{ wxLua_wxRichTextTable_HandlesChildSelections, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_HandlesChildSelections }};
//     virtual bool HandlesChildSelections() const;
static int LUACALL wxLua_wxRichTextTable_HandlesChildSelections(lua_State *L)
{
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call HandlesChildSelections
    bool returns = (self->HandlesChildSelections());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_HitTest[] = { &wxluatype_wxRichTextTable, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_HitTest[1] = {{ wxLua_wxRichTextTable_HitTest, WXLUAMETHOD_METHOD, 7, 8, s_wxluatypeArray_wxLua_wxRichTextTable_HitTest }};
//     virtual int HitTest(wxDC& dc, wxRichTextDrawingContext& context, const wxPoint& pt, long& textPosition, wxRichTextObject** obj, wxRichTextObject** contextObj, int flags = 0);
static int LUACALL wxLua_wxRichTextTable_HitTest(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 8 ? (int)wxlua_getnumbertype(L, 8) : 0);
    // wxRichTextObject contextObj
    wxRichTextObject ** contextObj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 7, wxluatype_wxRichTextObject);
    // wxRichTextObject obj
    wxRichTextObject ** obj = (wxRichTextObject **)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextObject);
    // long textPosition
    long * textPosition = (long *)wxlua_touserdata(L, 5);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call HitTest
    int returns = (self->HitTest(*dc, *context, *pt, *textPosition, obj, contextObj, flags));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_ImportFromXML[] = { &wxluatype_wxRichTextTable, &wxluatype_wxRichTextBuffer, &wxluatype_wxXmlNode, &wxluatype_wxRichTextXMLHandler, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextTable_ImportFromXML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_ImportFromXML[1] = {{ wxLua_wxRichTextTable_ImportFromXML, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextTable_ImportFromXML }};
//     virtual bool ImportFromXML(wxRichTextBuffer* buffer, wxXmlNode* node, wxRichTextXMLHandler* handler, bool* recurse);
static int LUACALL wxLua_wxRichTextTable_ImportFromXML(lua_State *L)
{
    // bool recurse
    bool * recurse = (bool *)wxlua_touserdata(L, 5);
    // wxRichTextXMLHandler handler
    wxRichTextXMLHandler * handler = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextXMLHandler);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call ImportFromXML
    bool returns = (self->ImportFromXML(buffer, node, handler, recurse));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_Layout[] = { &wxluatype_wxRichTextTable, &wxluatype_wxDC, &wxluatype_wxRichTextDrawingContext, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_Layout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_Layout[1] = {{ wxLua_wxRichTextTable_Layout, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextTable_Layout }};
//     virtual bool Layout(wxDC& dc, wxRichTextDrawingContext& context, const wxRect& rect, const wxRect& parentRect, int style);
static int LUACALL wxLua_wxRichTextTable_Layout(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 6);
    // const wxRect parentRect
    const wxRect * parentRect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRichTextDrawingContext context
    wxRichTextDrawingContext * context = (wxRichTextDrawingContext *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextDrawingContext);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call Layout
    bool returns = (self->Layout(*dc, *context, *rect, *parentRect, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_SetCellStyle[] = { &wxluatype_wxRichTextTable, &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_SetCellStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_SetCellStyle[1] = {{ wxLua_wxRichTextTable_SetCellStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextTable_SetCellStyle }};
//     virtual bool SetCellStyle(const wxRichTextSelection& selection, const wxRichTextAttr& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextTable_SetCellStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextSelection selection
    const wxRichTextSelection * selection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextSelection);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call SetCellStyle
    bool returns = (self->SetCellStyle(*selection, *style, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_SetColumnCount[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_SetColumnCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_SetColumnCount[1] = {{ wxLua_wxRichTextTable_SetColumnCount, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTable_SetColumnCount }};
//     void SetColumnCount(int count);
static int LUACALL wxLua_wxRichTextTable_SetColumnCount(lua_State *L)
{
    // int count
    int count = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call SetColumnCount
    self->SetColumnCount(count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_SetRowCount[] = { &wxluatype_wxRichTextTable, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTable_SetRowCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_SetRowCount[1] = {{ wxLua_wxRichTextTable_SetRowCount, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTable_SetRowCount }};
//     void SetRowCount(int count);
static int LUACALL wxLua_wxRichTextTable_SetRowCount(lua_State *L)
{
    // int count
    int count = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextTable * self = (wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call SetRowCount
    self->SetRowCount(count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_delete[] = { &wxluatype_wxRichTextTable, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_constructor1[] = { &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTable_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_constructor1[1] = {{ wxLua_wxRichTextTable_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_constructor1 }};
//     wxRichTextTable(const wxRichTextTable& obj);
static int LUACALL wxLua_wxRichTextTable_constructor1(lua_State *L)
{
    // const wxRichTextTable obj
    const wxRichTextTable * obj = (const wxRichTextTable *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTable);
    // call constructor
    wxRichTextTable* returns = new wxRichTextTable(*obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextTable);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextTable);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTable_constructor[] = { &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextTable_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_constructor[1] = {{ wxLua_wxRichTextTable_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextTable_constructor }};
//     wxRichTextTable(wxRichTextObject* parent = NULL);
static int LUACALL wxLua_wxRichTextTable_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextObject parent = NULL
    wxRichTextObject * parent = (argCount >= 1 ? (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject) : NULL);
    // call constructor
    wxRichTextTable* returns = new wxRichTextTable(parent);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextTable);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextTable);

    return 1;
}




#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_ExportXML_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextTable_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_ExportXML1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
    { wxLua_wxRichTextTable_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextTable_ExportXML },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextTable_ExportXML_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTable_ExportXML_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_GetCell_overload[] =
{
    { wxLua_wxRichTextTable_GetCell1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTable_GetCell1 },
    { wxLua_wxRichTextTable_GetCell, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextTable_GetCell },
};
static int s_wxluafunc_wxLua_wxRichTextTable_GetCell_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTable_GetCell_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTable_constructor_overload[] =
{
    { wxLua_wxRichTextTable_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTable_constructor1 },
    { wxLua_wxRichTextTable_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextTable_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextTable_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTable_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextTable_delete_function(void** p)
{
    wxRichTextTable* o = (wxRichTextTable*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextTable_methods[] = {
    { "AcceptsFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_AcceptsFocus, 1, NULL },
    { "AddColumns", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_AddColumns, 1, NULL },
    { "AddRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_AddRows, 1, NULL },
    { "AdjustAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_AdjustAttributes, 1, NULL },
    { "CalculateRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_CalculateRange, 1, NULL },
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_CanEditProperties, 1, NULL },
    { "ClearTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_ClearTable, 1, NULL },
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_Copy, 1, NULL },
    { "CreateTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_CreateTable, 1, NULL },
    { "DeleteColumns", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_DeleteColumns, 1, NULL },
    { "DeleteRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_DeleteRange, 1, NULL },
    { "DeleteRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_DeleteRows, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Draw", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_Draw, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_EditProperties, 1, NULL },

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))
    { "ExportXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_ExportXML_overload, s_wxluafunc_wxLua_wxRichTextTable_ExportXML_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT)) && ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))) && (wxUSE_STREAMS))

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_FindPosition, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetCell_overload, s_wxluafunc_wxLua_wxRichTextTable_GetCell_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetCellRowColumnPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetCellRowColumnPosition, 1, NULL },
    { "GetCells", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetCells, 1, NULL },
    { "GetColumnCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetColumnCount, 1, NULL },

#if (wxLUA_USE_Geometry && wxUSE_GEOMETRY) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetFocusedCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetFocusedCell, 1, NULL },
#endif // (wxLUA_USE_Geometry && wxUSE_GEOMETRY) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetPropertiesMenuLabel, 1, NULL },

#if (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRangeSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetRangeSize, 1, NULL },
#endif // (((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRowCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetRowCount, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetSelection, 1, NULL },
    { "GetTextForRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetTextForRange, 1, NULL },
    { "GetXMLNodeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_GetXMLNodeName, 1, NULL },
    { "HandlesChildSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_HandlesChildSelections, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_HitTest, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "ImportFromXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_ImportFromXML, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Layout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_Layout, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetCellStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_SetCellStyle, 1, NULL },
    { "SetColumnCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_SetColumnCount, 1, NULL },
    { "SetRowCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTable_SetRowCount, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextTable_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextTable", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextTable_constructor_overload, s_wxluafunc_wxLua_wxRichTextTable_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextTable_methodCount = sizeof(wxRichTextTable_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextTableBlock
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextTableBlock'
int wxluatype_wxRichTextTableBlock = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColEnd1[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_ColEnd1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_ColEnd1[1] = {{ wxLua_wxRichTextTableBlock_ColEnd1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColEnd1 }};
//     int ColEnd() const;
static int LUACALL wxLua_wxRichTextTableBlock_ColEnd1(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call ColEnd
    int returns = (self->ColEnd());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColEnd[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_ColEnd(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_ColEnd[1] = {{ wxLua_wxRichTextTableBlock_ColEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColEnd }};
//     int& ColEnd();
static int LUACALL wxLua_wxRichTextTableBlock_ColEnd(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call ColEnd
    int returns = (self->ColEnd());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColStart1[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_ColStart1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_ColStart1[1] = {{ wxLua_wxRichTextTableBlock_ColStart1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColStart1 }};
//     int ColStart() const;
static int LUACALL wxLua_wxRichTextTableBlock_ColStart1(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call ColStart
    int returns = (self->ColStart());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColStart[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_ColStart(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_ColStart[1] = {{ wxLua_wxRichTextTableBlock_ColStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColStart }};
//     int& ColStart();
static int LUACALL wxLua_wxRichTextTableBlock_ColStart(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call ColStart
    int returns = (self->ColStart());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_ComputeBlockForSelection[] = { &wxluatype_wxRichTextTableBlock, &wxluatype_wxRichTextTable, &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_ComputeBlockForSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_ComputeBlockForSelection[1] = {{ wxLua_wxRichTextTableBlock_ComputeBlockForSelection, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ComputeBlockForSelection }};
//     bool ComputeBlockForSelection(wxRichTextTable* table, wxRichTextCtrl* ctrl, bool requireCellSelection = true);
static int LUACALL wxLua_wxRichTextTableBlock_ComputeBlockForSelection(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool requireCellSelection = true
    bool requireCellSelection = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextCtrl);
    // wxRichTextTable table
    wxRichTextTable * table = (wxRichTextTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextTable);
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call ComputeBlockForSelection
    bool returns = (self->ComputeBlockForSelection(table, ctrl, requireCellSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_Copy[] = { &wxluatype_wxRichTextTableBlock, &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_Copy[1] = {{ wxLua_wxRichTextTableBlock_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTableBlock_Copy }};
//     void Copy(const wxRichTextTableBlock& block);
static int LUACALL wxLua_wxRichTextTableBlock_Copy(lua_State *L)
{
    // const wxRichTextTableBlock block
    const wxRichTextTableBlock * block = (const wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextTableBlock);
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call Copy
    self->Copy(*block);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_GetFocusedCell[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_GetFocusedCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_GetFocusedCell[1] = {{ wxLua_wxRichTextTableBlock_GetFocusedCell, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_GetFocusedCell }};
//     static wxRichTextCell* GetFocusedCell(wxRichTextCtrl* ctrl);
static int LUACALL wxLua_wxRichTextTableBlock_GetFocusedCell(lua_State *L)
{
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFocusedCell
    wxRichTextCell* returns = (wxRichTextCell*)wxRichTextTableBlock::GetFocusedCell(ctrl);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCell);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_Init[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_Init[1] = {{ wxLua_wxRichTextTableBlock_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextTableBlock_Init(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_IsWholeTable[] = { &wxluatype_wxRichTextTableBlock, &wxluatype_wxRichTextTable, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_IsWholeTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_IsWholeTable[1] = {{ wxLua_wxRichTextTableBlock_IsWholeTable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTableBlock_IsWholeTable }};
//     bool IsWholeTable(wxRichTextTable* table) const;
static int LUACALL wxLua_wxRichTextTableBlock_IsWholeTable(lua_State *L)
{
    // wxRichTextTable table
    wxRichTextTable * table = (wxRichTextTable *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextTable);
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call IsWholeTable
    bool returns = (self->IsWholeTable(table));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowEnd1[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_RowEnd1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_RowEnd1[1] = {{ wxLua_wxRichTextTableBlock_RowEnd1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowEnd1 }};
//     int RowEnd() const;
static int LUACALL wxLua_wxRichTextTableBlock_RowEnd1(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call RowEnd
    int returns = (self->RowEnd());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowEnd[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_RowEnd(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_RowEnd[1] = {{ wxLua_wxRichTextTableBlock_RowEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowEnd }};
//     int& RowEnd();
static int LUACALL wxLua_wxRichTextTableBlock_RowEnd(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call RowEnd
    int returns = (self->RowEnd());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowStart1[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_RowStart1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_RowStart1[1] = {{ wxLua_wxRichTextTableBlock_RowStart1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowStart1 }};
//     int RowStart() const;
static int LUACALL wxLua_wxRichTextTableBlock_RowStart1(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call RowStart
    int returns = (self->RowStart());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowStart[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_RowStart(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_RowStart[1] = {{ wxLua_wxRichTextTableBlock_RowStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowStart }};
//     int& RowStart();
static int LUACALL wxLua_wxRichTextTableBlock_RowStart(lua_State *L)
{
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call RowStart
    int returns = (self->RowStart());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_delete[] = { &wxluatype_wxRichTextTableBlock, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_op_eq[] = { &wxluatype_wxRichTextTableBlock, &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_op_eq[1] = {{ wxLua_wxRichTextTableBlock_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTableBlock_op_eq }};
//     bool operator==(const wxRichTextTableBlock& block);
static int LUACALL wxLua_wxRichTextTableBlock_op_eq(lua_State *L)
{
    // const wxRichTextTableBlock block
    const wxRichTextTableBlock * block = (const wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextTableBlock);
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call op_eq
    bool returns = ((*self)==(*block));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_op_set[] = { &wxluatype_wxRichTextTableBlock, &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_op_set[1] = {{ wxLua_wxRichTextTableBlock_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextTableBlock_op_set }};
//     void operator=(const wxRichTextTableBlock& block);
static int LUACALL wxLua_wxRichTextTableBlock_op_set(lua_State *L)
{
    // const wxRichTextTableBlock block
    const wxRichTextTableBlock * block = (const wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextTableBlock);
    // get this
    wxRichTextTableBlock * self = (wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call op_set
    (*self)=(*block);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_constructor2[] = { &wxluatype_wxRichTextTableBlock, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_constructor2[1] = {{ wxLua_wxRichTextTableBlock_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_constructor2 }};
//     wxRichTextTableBlock(const wxRichTextTableBlock& block);
static int LUACALL wxLua_wxRichTextTableBlock_constructor2(lua_State *L)
{
    // const wxRichTextTableBlock block
    const wxRichTextTableBlock * block = (const wxRichTextTableBlock *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextTableBlock);
    // call constructor
    wxRichTextTableBlock* returns = new wxRichTextTableBlock(*block);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextTableBlock);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextTableBlock);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextTableBlock_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextTableBlock_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_constructor1[1] = {{ wxLua_wxRichTextTableBlock_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxRichTextTableBlock_constructor1 }};
//     wxRichTextTableBlock(int colStart, int colEnd, int rowStart, int rowEnd);
static int LUACALL wxLua_wxRichTextTableBlock_constructor1(lua_State *L)
{
    // int rowEnd
    int rowEnd = (int)wxlua_getnumbertype(L, 4);
    // int rowStart
    int rowStart = (int)wxlua_getnumbertype(L, 3);
    // int colEnd
    int colEnd = (int)wxlua_getnumbertype(L, 2);
    // int colStart
    int colStart = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxRichTextTableBlock* returns = new wxRichTextTableBlock(colStart, colEnd, rowStart, rowEnd);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextTableBlock);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextTableBlock);

    return 1;
}

static int LUACALL wxLua_wxRichTextTableBlock_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_constructor[1] = {{ wxLua_wxRichTextTableBlock_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextTableBlock();
static int LUACALL wxLua_wxRichTextTableBlock_constructor(lua_State *L)
{
    // call constructor
    wxRichTextTableBlock* returns = new wxRichTextTableBlock();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextTableBlock);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextTableBlock);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_ColEnd_overload[] =
{
    { wxLua_wxRichTextTableBlock_ColEnd1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColEnd1 },
    { wxLua_wxRichTextTableBlock_ColEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColEnd },
};
static int s_wxluafunc_wxLua_wxRichTextTableBlock_ColEnd_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTableBlock_ColEnd_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_ColStart_overload[] =
{
    { wxLua_wxRichTextTableBlock_ColStart1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColStart1 },
    { wxLua_wxRichTextTableBlock_ColStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_ColStart },
};
static int s_wxluafunc_wxLua_wxRichTextTableBlock_ColStart_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTableBlock_ColStart_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_RowEnd_overload[] =
{
    { wxLua_wxRichTextTableBlock_RowEnd1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowEnd1 },
    { wxLua_wxRichTextTableBlock_RowEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowEnd },
};
static int s_wxluafunc_wxLua_wxRichTextTableBlock_RowEnd_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTableBlock_RowEnd_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_RowStart_overload[] =
{
    { wxLua_wxRichTextTableBlock_RowStart1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowStart1 },
    { wxLua_wxRichTextTableBlock_RowStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_RowStart },
};
static int s_wxluafunc_wxLua_wxRichTextTableBlock_RowStart_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTableBlock_RowStart_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextTableBlock_constructor_overload[] =
{
    { wxLua_wxRichTextTableBlock_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextTableBlock_constructor2 },
    { wxLua_wxRichTextTableBlock_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxRichTextTableBlock_constructor1 },
    { wxLua_wxRichTextTableBlock_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextTableBlock_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextTableBlock_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextTableBlock_delete_function(void** p)
{
    wxRichTextTableBlock* o = (wxRichTextTableBlock*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextTableBlock_methods[] = {
#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "ColEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_ColEnd_overload, s_wxluafunc_wxLua_wxRichTextTableBlock_ColEnd_overload_count, 0 },
    { "ColStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_ColStart_overload, s_wxluafunc_wxLua_wxRichTextTableBlock_ColStart_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "ComputeBlockForSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_ComputeBlockForSelection, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_Copy, 1, NULL },
    { "GetFocusedCell", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextTableBlock_GetFocusedCell, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_Init, 1, NULL },
    { "IsWholeTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_IsWholeTable, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "RowEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_RowEnd_overload, s_wxluafunc_wxLua_wxRichTextTableBlock_RowEnd_overload_count, 0 },
    { "RowStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_RowStart_overload, s_wxluafunc_wxLua_wxRichTextTableBlock_RowStart_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextTableBlock_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextTableBlock_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextTableBlock", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextTableBlock_constructor_overload, s_wxluafunc_wxLua_wxRichTextTableBlock_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextTableBlock_methodCount = sizeof(wxRichTextTableBlock_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextObjectAddress
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextObjectAddress'
int wxluatype_wxRichTextObjectAddress = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_Copy[] = { &wxluatype_wxRichTextObjectAddress, &wxluatype_wxRichTextObjectAddress, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_Copy[1] = {{ wxLua_wxRichTextObjectAddress_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_Copy }};
//     void Copy(const wxRichTextObjectAddress& address);
static int LUACALL wxLua_wxRichTextObjectAddress_Copy(lua_State *L)
{
    // const wxRichTextObjectAddress address
    const wxRichTextObjectAddress * address = (const wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObjectAddress);
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call Copy
    self->Copy(*address);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_Create[] = { &wxluatype_wxRichTextObjectAddress, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_Create[1] = {{ wxLua_wxRichTextObjectAddress_Create, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_Create }};
//     bool Create(wxRichTextParagraphLayoutBox* topLevelContainer, wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextObjectAddress_Create(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextParagraphLayoutBox topLevelContainer
    wxRichTextParagraphLayoutBox * topLevelContainer = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call Create
    bool returns = (self->Create(topLevelContainer, obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetAddress1[] = { &wxluatype_wxRichTextObjectAddress, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_GetAddress1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_GetAddress1[1] = {{ wxLua_wxRichTextObjectAddress_GetAddress1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetAddress1 }};
//     const wxArrayInt& GetAddress() const;
static int LUACALL wxLua_wxRichTextObjectAddress_GetAddress1(lua_State *L)
{
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call GetAddress
    const wxArrayInt* returns = (const wxArrayInt*)&self->GetAddress();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetAddress[] = { &wxluatype_wxRichTextObjectAddress, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_GetAddress(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_GetAddress[1] = {{ wxLua_wxRichTextObjectAddress_GetAddress, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetAddress }};
//     wxArrayInt& GetAddress();
static int LUACALL wxLua_wxRichTextObjectAddress_GetAddress(lua_State *L)
{
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call GetAddress
    wxArrayInt* returns = (wxArrayInt*)&self->GetAddress();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetObject[] = { &wxluatype_wxRichTextObjectAddress, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_GetObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_GetObject[1] = {{ wxLua_wxRichTextObjectAddress_GetObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetObject }};
//     wxRichTextObject* GetObject(wxRichTextParagraphLayoutBox* topLevelContainer) const;
static int LUACALL wxLua_wxRichTextObjectAddress_GetObject(lua_State *L)
{
    // wxRichTextParagraphLayoutBox topLevelContainer
    wxRichTextParagraphLayoutBox * topLevelContainer = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call GetObject
    wxRichTextObject* returns = (wxRichTextObject*)self->GetObject(topLevelContainer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_Init[] = { &wxluatype_wxRichTextObjectAddress, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_Init[1] = {{ wxLua_wxRichTextObjectAddress_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextObjectAddress_Init(lua_State *L)
{
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call Init
    self->Init();

    return 0;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_SetAddress[] = { &wxluatype_wxRichTextObjectAddress, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_SetAddress(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_SetAddress[1] = {{ wxLua_wxRichTextObjectAddress_SetAddress, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_SetAddress }};
//     void SetAddress(const wxArrayInt& address);
static int LUACALL wxLua_wxRichTextObjectAddress_SetAddress(lua_State *L)
{
    // const wxArrayInt address
    wxLuaSmartwxArrayInt address = wxlua_getwxArrayInt(L, 2);
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call SetAddress
    self->SetAddress(address);

    return 0;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_delete[] = { &wxluatype_wxRichTextObjectAddress, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_op_set[] = { &wxluatype_wxRichTextObjectAddress, &wxluatype_wxRichTextObjectAddress, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_op_set[1] = {{ wxLua_wxRichTextObjectAddress_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_op_set }};
//     void operator=(const wxRichTextObjectAddress& address);
static int LUACALL wxLua_wxRichTextObjectAddress_op_set(lua_State *L)
{
    // const wxRichTextObjectAddress address
    const wxRichTextObjectAddress * address = (const wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObjectAddress);
    // get this
    wxRichTextObjectAddress * self = (wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call op_set
    (*self)=(*address);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_constructor2[] = { &wxluatype_wxRichTextObjectAddress, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_constructor2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor2[1] = {{ wxLua_wxRichTextObjectAddress_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_constructor2 }};
//     wxRichTextObjectAddress(const wxRichTextObjectAddress& address);
static int LUACALL wxLua_wxRichTextObjectAddress_constructor2(lua_State *L)
{
    // const wxRichTextObjectAddress address
    const wxRichTextObjectAddress * address = (const wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectAddress);
    // call constructor
    wxRichTextObjectAddress* returns = new wxRichTextObjectAddress(*address);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectAddress);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectAddress);

    return 1;
}

static int LUACALL wxLua_wxRichTextObjectAddress_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor1[1] = {{ wxLua_wxRichTextObjectAddress_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextObjectAddress();
static int LUACALL wxLua_wxRichTextObjectAddress_constructor1(lua_State *L)
{
    // call constructor
    wxRichTextObjectAddress* returns = new wxRichTextObjectAddress();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectAddress);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectAddress);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectAddress_constructor[] = { &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextObjectAddress_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor[1] = {{ wxLua_wxRichTextObjectAddress_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_constructor }};
//     wxRichTextObjectAddress(wxRichTextParagraphLayoutBox* topLevelContainer, wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextObjectAddress_constructor(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // wxRichTextParagraphLayoutBox topLevelContainer
    wxRichTextParagraphLayoutBox * topLevelContainer = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphLayoutBox);
    // call constructor
    wxRichTextObjectAddress* returns = new wxRichTextObjectAddress(topLevelContainer, obj);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectAddress);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectAddress);

    return 1;
}




#if ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_GetAddress_overload[] =
{

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObjectAddress_GetAddress1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetAddress1 },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObjectAddress_GetAddress, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_GetAddress },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextObjectAddress_GetAddress_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObjectAddress_GetAddress_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor_overload[] =
{
    { wxLua_wxRichTextObjectAddress_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_constructor2 },
    { wxLua_wxRichTextObjectAddress_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
    { wxLua_wxRichTextObjectAddress_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectAddress_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextObjectAddress_delete_function(void** p)
{
    wxRichTextObjectAddress* o = (wxRichTextObjectAddress*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextObjectAddress_methods[] = {
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectAddress_Copy, 1, NULL },
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectAddress_Create, 1, NULL },

#if ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "GetAddress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectAddress_GetAddress_overload, s_wxluafunc_wxLua_wxRichTextObjectAddress_GetAddress_overload_count, 0 },
#endif // ((wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "GetObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectAddress_GetObject, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectAddress_Init, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetAddress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectAddress_SetAddress, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextObjectAddress_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectAddress_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextObjectAddress", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor_overload, s_wxluafunc_wxLua_wxRichTextObjectAddress_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextObjectAddress_methodCount = sizeof(wxRichTextObjectAddress_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextCommand
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextCommand'
int wxluatype_wxRichTextCommand = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_AddAction[] = { &wxluatype_wxRichTextCommand, &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextCommand_AddAction(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_AddAction[1] = {{ wxLua_wxRichTextCommand_AddAction, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCommand_AddAction }};
//     void AddAction(wxRichTextAction* action);
static int LUACALL wxLua_wxRichTextCommand_AddAction(lua_State *L)
{
    // wxRichTextAction action
    wxRichTextAction * action = (wxRichTextAction *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAction);
    // get this
    wxRichTextCommand * self = (wxRichTextCommand *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCommand);
    // call AddAction
    self->AddAction(action);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_ClearActions[] = { &wxluatype_wxRichTextCommand, NULL };
static int LUACALL wxLua_wxRichTextCommand_ClearActions(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_ClearActions[1] = {{ wxLua_wxRichTextCommand_ClearActions, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCommand_ClearActions }};
//     void ClearActions();
static int LUACALL wxLua_wxRichTextCommand_ClearActions(lua_State *L)
{
    // get this
    wxRichTextCommand * self = (wxRichTextCommand *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCommand);
    // call ClearActions
    self->ClearActions();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_Do[] = { &wxluatype_wxRichTextCommand, NULL };
static int LUACALL wxLua_wxRichTextCommand_Do(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_Do[1] = {{ wxLua_wxRichTextCommand_Do, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCommand_Do }};
//     bool Do();
static int LUACALL wxLua_wxRichTextCommand_Do(lua_State *L)
{
    // get this
    wxRichTextCommand * self = (wxRichTextCommand *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCommand);
    // call Do
    bool returns = (self->Do());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_GetActions[] = { &wxluatype_wxRichTextCommand, NULL };
static int LUACALL wxLua_wxRichTextCommand_GetActions(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_GetActions[1] = {{ wxLua_wxRichTextCommand_GetActions, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCommand_GetActions }};
//     wxList& GetActions();
static int LUACALL wxLua_wxRichTextCommand_GetActions(lua_State *L)
{
    // get this
    wxRichTextCommand * self = (wxRichTextCommand *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCommand);
    // call GetActions
    wxList* returns = (wxList*)&self->GetActions();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxList);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_Undo[] = { &wxluatype_wxRichTextCommand, NULL };
static int LUACALL wxLua_wxRichTextCommand_Undo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_Undo[1] = {{ wxLua_wxRichTextCommand_Undo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCommand_Undo }};
//     bool Undo();
static int LUACALL wxLua_wxRichTextCommand_Undo(lua_State *L)
{
    // get this
    wxRichTextCommand * self = (wxRichTextCommand *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCommand);
    // call Undo
    bool returns = (self->Undo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_delete[] = { &wxluatype_wxRichTextCommand, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCommand_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCommand_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_constructor1[1] = {{ wxLua_wxRichTextCommand_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCommand_constructor1 }};
//     wxRichTextCommand(const wxString& name);
static int LUACALL wxLua_wxRichTextCommand_constructor1(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextCommand* returns = new wxRichTextCommand(name);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextCommand);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCommand);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCommand_constructor[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCommand_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_constructor[1] = {{ wxLua_wxRichTextCommand_constructor, WXLUAMETHOD_CONSTRUCTOR, 5, 6, s_wxluatypeArray_wxLua_wxRichTextCommand_constructor }};
//         wxRichTextParagraphLayoutBox* container, wxRichTextCtrl* ctrl, bool ignoreFirstTime = false);
static int LUACALL wxLua_wxRichTextCommand_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool ignoreFirstTime = false
    bool ignoreFirstTime = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : false);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextCtrl);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextParagraphLayoutBox);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextBuffer);
    // wxRichTextCommandId id
    wxRichTextCommandId id = (wxRichTextCommandId)wxlua_getenumtype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextCommand* returns = new wxRichTextCommand(name, id, buffer, container, ctrl, ignoreFirstTime);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextCommand);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCommand);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCommand_constructor_overload[] =
{
    { wxLua_wxRichTextCommand_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCommand_constructor1 },
    { wxLua_wxRichTextCommand_constructor, WXLUAMETHOD_CONSTRUCTOR, 5, 6, s_wxluatypeArray_wxLua_wxRichTextCommand_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextCommand_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCommand_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextCommand_delete_function(void** p)
{
    wxRichTextCommand* o = (wxRichTextCommand*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextCommand_methods[] = {
    { "AddAction", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCommand_AddAction, 1, NULL },
    { "ClearActions", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCommand_ClearActions, 1, NULL },
    { "Do", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCommand_Do, 1, NULL },

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetActions", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCommand_GetActions, 1, NULL },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Undo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCommand_Undo, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextCommand_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextCommand", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextCommand_constructor_overload, s_wxluafunc_wxLua_wxRichTextCommand_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextCommand_methodCount = sizeof(wxRichTextCommand_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextAction
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextAction'
int wxluatype_wxRichTextAction = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_ApplyParagraphs[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextAction_ApplyParagraphs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_ApplyParagraphs[1] = {{ wxLua_wxRichTextAction_ApplyParagraphs, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_ApplyParagraphs }};
//     void ApplyParagraphs(const wxRichTextParagraphLayoutBox& fragment);
static int LUACALL wxLua_wxRichTextAction_ApplyParagraphs(lua_State *L)
{
    // const wxRichTextParagraphLayoutBox fragment
    const wxRichTextParagraphLayoutBox * fragment = (const wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call ApplyParagraphs
    self->ApplyParagraphs(*fragment);

    return 0;
}


#if (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_CalculateRefreshOptimizations1[] = { &wxluatype_wxRichTextAction, &wxluatype_wxArrayInt, &wxluatype_wxArrayInt, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextAction_CalculateRefreshOptimizations1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_CalculateRefreshOptimizations1[1] = {{ wxLua_wxRichTextAction_CalculateRefreshOptimizations1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextAction_CalculateRefreshOptimizations1 }};
//     %wxchkver_3_1_0 void CalculateRefreshOptimizations(wxArrayInt& optimizationLineCharPositions, wxArrayInt& optimizationLineYPositions, wxRect& oldFloatRect);
static int LUACALL wxLua_wxRichTextAction_CalculateRefreshOptimizations1(lua_State *L)
{
    // wxRect oldFloatRect
    wxRect * oldFloatRect = (wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxArrayInt optimizationLineYPositions
    wxArrayInt * optimizationLineYPositions = (wxArrayInt *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayInt);
    // wxArrayInt optimizationLineCharPositions
    wxArrayInt * optimizationLineCharPositions = (wxArrayInt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayInt);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call CalculateRefreshOptimizations
    self->CalculateRefreshOptimizations(*optimizationLineCharPositions, *optimizationLineYPositions, *oldFloatRect);

    return 0;
}

#endif // (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)

#if ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_CalculateRefreshOptimizations[] = { &wxluatype_wxRichTextAction, &wxluatype_wxArrayInt, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextAction_CalculateRefreshOptimizations(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_CalculateRefreshOptimizations[1] = {{ wxLua_wxRichTextAction_CalculateRefreshOptimizations, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextAction_CalculateRefreshOptimizations }};
//     !%wxchkver_3_1_0 void CalculateRefreshOptimizations(wxArrayInt& optimizationLineCharPositions, wxArrayInt& optimizationLineYPositions);
static int LUACALL wxLua_wxRichTextAction_CalculateRefreshOptimizations(lua_State *L)
{
    // wxArrayInt optimizationLineYPositions
    wxArrayInt * optimizationLineYPositions = (wxArrayInt *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayInt);
    // wxArrayInt optimizationLineCharPositions
    wxArrayInt * optimizationLineCharPositions = (wxArrayInt *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayInt);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call CalculateRefreshOptimizations
    self->CalculateRefreshOptimizations(*optimizationLineCharPositions, *optimizationLineYPositions);

    return 0;
}

#endif // ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_Do[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_Do(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_Do[1] = {{ wxLua_wxRichTextAction_Do, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_Do }};
//     bool Do();
static int LUACALL wxLua_wxRichTextAction_Do(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call Do
    bool returns = (self->Do());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetAttributes[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetAttributes[1] = {{ wxLua_wxRichTextAction_GetAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetAttributes }};
//     wxRichTextAttr& GetAttributes();
static int LUACALL wxLua_wxRichTextAction_GetAttributes(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetAttributes
    wxRichTextAttr* returns = (wxRichTextAttr*)&self->GetAttributes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetContainer[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetContainer[1] = {{ wxLua_wxRichTextAction_GetContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetContainer }};
//     wxRichTextParagraphLayoutBox* GetContainer() const;
static int LUACALL wxLua_wxRichTextAction_GetContainer(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetContainer
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->GetContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetContainerAddress1[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetContainerAddress1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetContainerAddress1[1] = {{ wxLua_wxRichTextAction_GetContainerAddress1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetContainerAddress1 }};
//     const wxRichTextObjectAddress& GetContainerAddress() const;
static int LUACALL wxLua_wxRichTextAction_GetContainerAddress1(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetContainerAddress
    const wxRichTextObjectAddress* returns = (const wxRichTextObjectAddress*)&self->GetContainerAddress();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectAddress);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetContainerAddress[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetContainerAddress(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetContainerAddress[1] = {{ wxLua_wxRichTextAction_GetContainerAddress, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetContainerAddress }};
//     wxRichTextObjectAddress& GetContainerAddress();
static int LUACALL wxLua_wxRichTextAction_GetContainerAddress(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetContainerAddress
    wxRichTextObjectAddress* returns = (wxRichTextObjectAddress*)&self->GetContainerAddress();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectAddress);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetIgnoreFirstTime[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetIgnoreFirstTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetIgnoreFirstTime[1] = {{ wxLua_wxRichTextAction_GetIgnoreFirstTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetIgnoreFirstTime }};
//     bool GetIgnoreFirstTime() const;
static int LUACALL wxLua_wxRichTextAction_GetIgnoreFirstTime(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetIgnoreFirstTime
    bool returns = (self->GetIgnoreFirstTime());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetName[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetName[1] = {{ wxLua_wxRichTextAction_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetName }};
//     const wxString& GetName() const;
static int LUACALL wxLua_wxRichTextAction_GetName(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetNewParagraphs[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetNewParagraphs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetNewParagraphs[1] = {{ wxLua_wxRichTextAction_GetNewParagraphs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetNewParagraphs }};
//     wxRichTextParagraphLayoutBox& GetNewParagraphs();
static int LUACALL wxLua_wxRichTextAction_GetNewParagraphs(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetNewParagraphs
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)&self->GetNewParagraphs();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetObject[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetObject[1] = {{ wxLua_wxRichTextAction_GetObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetObject }};
//     wxRichTextObject* GetObject() const;
static int LUACALL wxLua_wxRichTextAction_GetObject(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetObject
    wxRichTextObject* returns = (wxRichTextObject*)self->GetObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetOldParagraphs[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetOldParagraphs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetOldParagraphs[1] = {{ wxLua_wxRichTextAction_GetOldParagraphs, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetOldParagraphs }};
//     wxRichTextParagraphLayoutBox& GetOldParagraphs();
static int LUACALL wxLua_wxRichTextAction_GetOldParagraphs(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetOldParagraphs
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)&self->GetOldParagraphs();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetPosition[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetPosition[1] = {{ wxLua_wxRichTextAction_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetPosition }};
//     long GetPosition() const;
static int LUACALL wxLua_wxRichTextAction_GetPosition(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetPosition
    long returns = (self->GetPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_GetRange[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetRange[1] = {{ wxLua_wxRichTextAction_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetRange }};
//     const wxRichTextRange& GetRange() const;
static int LUACALL wxLua_wxRichTextAction_GetRange(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call GetRange
    const wxRichTextRange* returns = (const wxRichTextRange*)&self->GetRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_MakeObject[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextAction_MakeObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_MakeObject[1] = {{ wxLua_wxRichTextAction_MakeObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_MakeObject }};
//     void MakeObject(wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextAction_MakeObject(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call MakeObject
    self->MakeObject(obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_SetContainerAddress1[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextAction_SetContainerAddress1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetContainerAddress1[1] = {{ wxLua_wxRichTextAction_SetContainerAddress1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextAction_SetContainerAddress1 }};
//     void SetContainerAddress(wxRichTextParagraphLayoutBox* container, wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextAction_SetContainerAddress1(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call SetContainerAddress
    self->SetContainerAddress(container, obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_SetContainerAddress[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextObjectAddress, NULL };
static int LUACALL wxLua_wxRichTextAction_SetContainerAddress(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetContainerAddress[1] = {{ wxLua_wxRichTextAction_SetContainerAddress, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_SetContainerAddress }};
//     void SetContainerAddress(const wxRichTextObjectAddress& address);
static int LUACALL wxLua_wxRichTextAction_SetContainerAddress(lua_State *L)
{
    // const wxRichTextObjectAddress address
    const wxRichTextObjectAddress * address = (const wxRichTextObjectAddress *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObjectAddress);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call SetContainerAddress
    self->SetContainerAddress(*address);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_SetIgnoreFirstTime[] = { &wxluatype_wxRichTextAction, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextAction_SetIgnoreFirstTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetIgnoreFirstTime[1] = {{ wxLua_wxRichTextAction_SetIgnoreFirstTime, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_SetIgnoreFirstTime }};
//     void SetIgnoreFirstTime(bool b);
static int LUACALL wxLua_wxRichTextAction_SetIgnoreFirstTime(lua_State *L)
{
    // bool b
    bool b = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call SetIgnoreFirstTime
    self->SetIgnoreFirstTime(b);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_SetObject[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextAction_SetObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetObject[1] = {{ wxLua_wxRichTextAction_SetObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_SetObject }};
//     void SetObject(wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextAction_SetObject(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call SetObject
    self->SetObject(obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_SetOldAndNewObjects[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextAction_SetOldAndNewObjects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetOldAndNewObjects[1] = {{ wxLua_wxRichTextAction_SetOldAndNewObjects, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextAction_SetOldAndNewObjects }};
//     void SetOldAndNewObjects(wxRichTextObject* oldObj, wxRichTextObject* newObj);
static int LUACALL wxLua_wxRichTextAction_SetOldAndNewObjects(lua_State *L)
{
    // wxRichTextObject newObj
    wxRichTextObject * newObj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextObject oldObj
    wxRichTextObject * oldObj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call SetOldAndNewObjects
    self->SetOldAndNewObjects(oldObj, newObj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_SetPosition[] = { &wxluatype_wxRichTextAction, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextAction_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetPosition[1] = {{ wxLua_wxRichTextAction_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_SetPosition }};
//     void SetPosition(long pos);
static int LUACALL wxLua_wxRichTextAction_SetPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call SetPosition
    self->SetPosition(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_SetRange[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextAction_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetRange[1] = {{ wxLua_wxRichTextAction_SetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_SetRange }};
//     void SetRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextAction_SetRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call SetRange
    self->SetRange(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_StoreObject[] = { &wxluatype_wxRichTextAction, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextAction_StoreObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_StoreObject[1] = {{ wxLua_wxRichTextAction_StoreObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_StoreObject }};
//     void StoreObject(wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextAction_StoreObject(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call StoreObject
    self->StoreObject(obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_Undo[] = { &wxluatype_wxRichTextAction, NULL };
static int LUACALL wxLua_wxRichTextAction_Undo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_Undo[1] = {{ wxLua_wxRichTextAction_Undo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_Undo }};
//     bool Undo();
static int LUACALL wxLua_wxRichTextAction_Undo(lua_State *L)
{
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call Undo
    bool returns = (self->Undo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_UpdateAppearance1[] = { &wxluatype_wxRichTextAction, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_wxRect, &wxluatype_wxArrayInt, &wxluatype_wxArrayInt, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextAction_UpdateAppearance1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_UpdateAppearance1[1] = {{ wxLua_wxRichTextAction_UpdateAppearance1, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxRichTextAction_UpdateAppearance1 }};
//     %wxchkver_3_1_0 void UpdateAppearance(long caretPosition, bool sendUpdateEvent = false, const wxRect& oldFloatRect = wxNULLRECT, wxArrayInt* optimizationLineCharPositions = NULL, wxArrayInt* optimizationLineYPositions = NULL, bool isDoCmd = true);
static int LUACALL wxLua_wxRichTextAction_UpdateAppearance1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isDoCmd = true
    bool isDoCmd = (argCount >= 7 ? wxlua_getbooleantype(L, 7) : true);
    // wxArrayInt optimizationLineYPositions = NULL
    wxArrayInt * optimizationLineYPositions = (argCount >= 6 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 6, wxluatype_wxArrayInt) : NULL);
    // wxArrayInt optimizationLineCharPositions = NULL
    wxArrayInt * optimizationLineCharPositions = (argCount >= 5 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 5, wxluatype_wxArrayInt) : NULL);
    // const wxRect oldFloatRect = wxNULLRECT
    const wxRect * oldFloatRect = (argCount >= 4 ? (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect) : &wxNULLRECT);
    // bool sendUpdateEvent = false
    bool sendUpdateEvent = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long caretPosition
    long caretPosition = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call UpdateAppearance
    self->UpdateAppearance(caretPosition, sendUpdateEvent, *oldFloatRect, optimizationLineCharPositions, optimizationLineYPositions, isDoCmd);

    return 0;
}

#endif // (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)

#if ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_UpdateAppearance[] = { &wxluatype_wxRichTextAction, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_wxArrayInt, &wxluatype_wxArrayInt, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextAction_UpdateAppearance(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_UpdateAppearance[1] = {{ wxLua_wxRichTextAction_UpdateAppearance, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextAction_UpdateAppearance }};
//     !%wxchkver_3_1_0 void UpdateAppearance(long caretPosition, bool sendUpdateEvent = false, wxArrayInt* optimizationLineCharPositions = NULL, wxArrayInt* optimizationLineYPositions = NULL, bool isDoCmd = true);
static int LUACALL wxLua_wxRichTextAction_UpdateAppearance(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isDoCmd = true
    bool isDoCmd = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : true);
    // wxArrayInt optimizationLineYPositions = NULL
    wxArrayInt * optimizationLineYPositions = (argCount >= 5 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 5, wxluatype_wxArrayInt) : NULL);
    // wxArrayInt optimizationLineCharPositions = NULL
    wxArrayInt * optimizationLineCharPositions = (argCount >= 4 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 4, wxluatype_wxArrayInt) : NULL);
    // bool sendUpdateEvent = false
    bool sendUpdateEvent = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long caretPosition
    long caretPosition = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextAction * self = (wxRichTextAction *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAction);
    // call UpdateAppearance
    self->UpdateAppearance(caretPosition, sendUpdateEvent, optimizationLineCharPositions, optimizationLineYPositions, isDoCmd);

    return 0;
}

#endif // ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_delete[] = { &wxluatype_wxRichTextAction, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextAction_constructor[] = { &wxluatype_wxRichTextCommand, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextAction_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_constructor[1] = {{ wxLua_wxRichTextAction_constructor, WXLUAMETHOD_CONSTRUCTOR, 6, 7, s_wxluatypeArray_wxLua_wxRichTextAction_constructor }};
//         wxRichTextCtrl* ctrl, bool ignoreFirstTime = false);
static int LUACALL wxLua_wxRichTextAction_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool ignoreFirstTime = false
    bool ignoreFirstTime = (argCount >= 7 ? wxlua_getbooleantype(L, 7) : false);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 6, wxluatype_wxRichTextCtrl);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextParagraphLayoutBox);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextBuffer);
    // wxRichTextCommandId id
    wxRichTextCommandId id = (wxRichTextCommandId)wxlua_getenumtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxRichTextCommand cmd
    wxRichTextCommand * cmd = (wxRichTextCommand *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCommand);
    // call constructor
    wxRichTextAction* returns = new wxRichTextAction(cmd, name, id, buffer, container, ctrl, ignoreFirstTime);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAction);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAction);

    return 1;
}




#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_CalculateRefreshOptimizations_overload[] =
{

#if (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextAction_CalculateRefreshOptimizations1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextAction_CalculateRefreshOptimizations1 },
#endif // (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)

#if ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
    { wxLua_wxRichTextAction_CalculateRefreshOptimizations, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextAction_CalculateRefreshOptimizations },
#endif // ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
};
static int s_wxluafunc_wxLua_wxRichTextAction_CalculateRefreshOptimizations_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAction_CalculateRefreshOptimizations_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_GetContainerAddress_overload[] =
{
    { wxLua_wxRichTextAction_GetContainerAddress1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetContainerAddress1 },
    { wxLua_wxRichTextAction_GetContainerAddress, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextAction_GetContainerAddress },
};
static int s_wxluafunc_wxLua_wxRichTextAction_GetContainerAddress_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAction_GetContainerAddress_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_SetContainerAddress_overload[] =
{
    { wxLua_wxRichTextAction_SetContainerAddress1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextAction_SetContainerAddress1 },
    { wxLua_wxRichTextAction_SetContainerAddress, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextAction_SetContainerAddress },
};
static int s_wxluafunc_wxLua_wxRichTextAction_SetContainerAddress_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAction_SetContainerAddress_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextAction_UpdateAppearance_overload[] =
{

#if (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextAction_UpdateAppearance1, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxRichTextAction_UpdateAppearance1 },
#endif // (((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect)

#if ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
    { wxLua_wxRichTextAction_UpdateAppearance, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextAction_UpdateAppearance },
#endif // ((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
};
static int s_wxluafunc_wxLua_wxRichTextAction_UpdateAppearance_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextAction_UpdateAppearance_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))

void wxLua_wxRichTextAction_delete_function(void** p)
{
    wxRichTextAction* o = (wxRichTextAction*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextAction_methods[] = {
    { "ApplyParagraphs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_ApplyParagraphs, 1, NULL },

#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))
    { "CalculateRefreshOptimizations", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_CalculateRefreshOptimizations_overload, s_wxluafunc_wxLua_wxRichTextAction_CalculateRefreshOptimizations_overload_count, 0 },
#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))

    { "Do", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_Do, 1, NULL },
    { "GetAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetAttributes, 1, NULL },
    { "GetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetContainer, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetContainerAddress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetContainerAddress_overload, s_wxluafunc_wxLua_wxRichTextAction_GetContainerAddress_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetIgnoreFirstTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetIgnoreFirstTime, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetName, 1, NULL },
    { "GetNewParagraphs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetNewParagraphs, 1, NULL },
    { "GetObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetObject, 1, NULL },
    { "GetOldParagraphs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetOldParagraphs, 1, NULL },
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetPosition, 1, NULL },
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_GetRange, 1, NULL },
    { "MakeObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_MakeObject, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetContainerAddress", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_SetContainerAddress_overload, s_wxluafunc_wxLua_wxRichTextAction_SetContainerAddress_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetIgnoreFirstTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_SetIgnoreFirstTime, 1, NULL },
    { "SetObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_SetObject, 1, NULL },
    { "SetOldAndNewObjects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_SetOldAndNewObjects, 1, NULL },
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_SetPosition, 1, NULL },
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_SetRange, 1, NULL },
    { "StoreObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_StoreObject, 1, NULL },
    { "Undo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_Undo, 1, NULL },

#if ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))
    { "UpdateAppearance", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextAction_UpdateAppearance_overload, s_wxluafunc_wxLua_wxRichTextAction_UpdateAppearance_overload_count, 0 },
#endif // ((((wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxPointSizeRect))||(((!wxCHECK_VERSION(3,1,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextAction_delete, 1, NULL },
    { "wxRichTextAction", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextAction_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextAction_methodCount = sizeof(wxRichTextAction_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextFileHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFileHandler'
int wxluatype_wxRichTextFileHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_CanHandle[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_CanHandle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_CanHandle[1] = {{ wxLua_wxRichTextFileHandler_CanHandle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFileHandler_CanHandle }};
//     virtual bool CanHandle(const wxString& filename) const;
static int LUACALL wxLua_wxRichTextFileHandler_CanHandle(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call CanHandle
    bool returns = (self->CanHandle(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_CanLoad[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_CanLoad(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_CanLoad[1] = {{ wxLua_wxRichTextFileHandler_CanLoad, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_CanLoad }};
//     virtual bool CanLoad() const;
static int LUACALL wxLua_wxRichTextFileHandler_CanLoad(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call CanLoad
    bool returns = (self->CanLoad());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_CanSave[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_CanSave(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_CanSave[1] = {{ wxLua_wxRichTextFileHandler_CanSave, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_CanSave }};
//     virtual bool CanSave() const;
static int LUACALL wxLua_wxRichTextFileHandler_CanSave(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call CanSave
    bool returns = (self->CanSave());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetEncoding[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_GetEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_GetEncoding[1] = {{ wxLua_wxRichTextFileHandler_GetEncoding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetEncoding }};
//     const wxString& GetEncoding() const;
static int LUACALL wxLua_wxRichTextFileHandler_GetEncoding(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call GetEncoding
    wxString returns = (self->GetEncoding());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetExtension[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_GetExtension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_GetExtension[1] = {{ wxLua_wxRichTextFileHandler_GetExtension, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetExtension }};
//     wxString GetExtension() const;
static int LUACALL wxLua_wxRichTextFileHandler_GetExtension(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call GetExtension
    wxString returns = (self->GetExtension());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetFlags[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_GetFlags[1] = {{ wxLua_wxRichTextFileHandler_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxRichTextFileHandler_GetFlags(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetName[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_GetName[1] = {{ wxLua_wxRichTextFileHandler_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetName }};
//     wxString GetName() const;
static int LUACALL wxLua_wxRichTextFileHandler_GetName(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetType[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_GetType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_GetType[1] = {{ wxLua_wxRichTextFileHandler_GetType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_GetType }};
//     int GetType() const;
static int LUACALL wxLua_wxRichTextFileHandler_GetType(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call GetType
    int returns = (self->GetType());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_IsVisible[] = { &wxluatype_wxRichTextFileHandler, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_IsVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_IsVisible[1] = {{ wxLua_wxRichTextFileHandler_IsVisible, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_IsVisible }};
//     virtual bool IsVisible() const;
static int LUACALL wxLua_wxRichTextFileHandler_IsVisible(lua_State *L)
{
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call IsVisible
    bool returns = (self->IsVisible());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_LoadFile1[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_LoadFile1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_LoadFile1[1] = {{ wxLua_wxRichTextFileHandler_LoadFile1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_LoadFile1 }};
//     virtual bool LoadFile(wxRichTextBuffer *buffer, const wxString& filename);
static int LUACALL wxLua_wxRichTextFileHandler_LoadFile1(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call LoadFile
    bool returns = (self->LoadFile(buffer, filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_LoadFile[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_wxRichTextBuffer, &wxluatype_wxInputStream, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_LoadFile(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_LoadFile[1] = {{ wxLua_wxRichTextFileHandler_LoadFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_LoadFile }};
//     bool LoadFile(wxRichTextBuffer *buffer, wxInputStream& stream);
static int LUACALL wxLua_wxRichTextFileHandler_LoadFile(lua_State *L)
{
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 3, wxluatype_wxInputStream);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call LoadFile
    bool returns = (self->LoadFile(buffer, *stream));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SaveFile1[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_wxRichTextBuffer, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SaveFile1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SaveFile1[1] = {{ wxLua_wxRichTextFileHandler_SaveFile1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SaveFile1 }};
//     virtual bool SaveFile(wxRichTextBuffer *buffer, const wxString& filename);
static int LUACALL wxLua_wxRichTextFileHandler_SaveFile1(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 3);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SaveFile
    bool returns = (self->SaveFile(buffer, filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SaveFile[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_wxRichTextBuffer, &wxluatype_wxOutputStream, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SaveFile(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SaveFile[1] = {{ wxLua_wxRichTextFileHandler_SaveFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SaveFile }};
//     bool SaveFile(wxRichTextBuffer *buffer, wxOutputStream& stream);
static int LUACALL wxLua_wxRichTextFileHandler_SaveFile(lua_State *L)
{
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 3, wxluatype_wxOutputStream);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SaveFile
    bool returns = (self->SaveFile(buffer, *stream));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetEncoding[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SetEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SetEncoding[1] = {{ wxLua_wxRichTextFileHandler_SetEncoding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetEncoding }};
//     void SetEncoding(const wxString& encoding);
static int LUACALL wxLua_wxRichTextFileHandler_SetEncoding(lua_State *L)
{
    // const wxString encoding
    const wxString encoding = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SetEncoding
    self->SetEncoding(encoding);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetExtension[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SetExtension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SetExtension[1] = {{ wxLua_wxRichTextFileHandler_SetExtension, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetExtension }};
//     void SetExtension(const wxString& ext);
static int LUACALL wxLua_wxRichTextFileHandler_SetExtension(lua_State *L)
{
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SetExtension
    self->SetExtension(ext);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetFlags[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SetFlags[1] = {{ wxLua_wxRichTextFileHandler_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxRichTextFileHandler_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetName[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SetName[1] = {{ wxLua_wxRichTextFileHandler_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetName }};
//     void SetName(const wxString& name);
static int LUACALL wxLua_wxRichTextFileHandler_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SetName
    self->SetName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetType[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SetType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SetType[1] = {{ wxLua_wxRichTextFileHandler_SetType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetType }};
//     void SetType(int type);
static int LUACALL wxLua_wxRichTextFileHandler_SetType(lua_State *L)
{
    // int type
    int type = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SetType
    self->SetType(type);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetVisible[] = { &wxluatype_wxRichTextFileHandler, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextFileHandler_SetVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SetVisible[1] = {{ wxLua_wxRichTextFileHandler_SetVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SetVisible }};
//     virtual void SetVisible(bool visible);
static int LUACALL wxLua_wxRichTextFileHandler_SetVisible(lua_State *L)
{
    // bool visible
    bool visible = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextFileHandler * self = (wxRichTextFileHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFileHandler);
    // call SetVisible
    self->SetVisible(visible);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFileHandler_delete[] = { &wxluatype_wxRichTextFileHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFileHandler_delete }};




#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_LoadFile_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFileHandler_LoadFile1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_LoadFile1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextFileHandler_LoadFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_LoadFile },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextFileHandler_LoadFile_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextFileHandler_LoadFile_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFileHandler_SaveFile_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFileHandler_SaveFile1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SaveFile1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextFileHandler_SaveFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFileHandler_SaveFile },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextFileHandler_SaveFile_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextFileHandler_SaveFile_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

void wxLua_wxRichTextFileHandler_delete_function(void** p)
{
    wxRichTextFileHandler* o = (wxRichTextFileHandler*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFileHandler_methods[] = {
    { "CanHandle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_CanHandle, 1, NULL },
    { "CanLoad", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_CanLoad, 1, NULL },
    { "CanSave", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_CanSave, 1, NULL },
    { "GetEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_GetEncoding, 1, NULL },
    { "GetExtension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_GetExtension, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_GetFlags, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_GetName, 1, NULL },
    { "GetType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_GetType, 1, NULL },
    { "IsVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_IsVisible, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_LoadFile_overload, s_wxluafunc_wxLua_wxRichTextFileHandler_LoadFile_overload_count, 0 },
    { "SaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_SaveFile_overload, s_wxluafunc_wxLua_wxRichTextFileHandler_SaveFile_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

    { "SetEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_SetEncoding, 1, NULL },
    { "SetExtension", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_SetExtension, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_SetFlags, 1, NULL },
    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_SetName, 1, NULL },
    { "SetType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_SetType, 1, NULL },
    { "SetVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFileHandler_SetVisible, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFileHandler_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextFileHandler_methodCount = sizeof(wxRichTextFileHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextPlainTextHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextPlainTextHandler'
int wxluatype_wxRichTextPlainTextHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_CanLoad[] = { &wxluatype_wxRichTextPlainTextHandler, NULL };
static int LUACALL wxLua_wxRichTextPlainTextHandler_CanLoad(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainTextHandler_CanLoad[1] = {{ wxLua_wxRichTextPlainTextHandler_CanLoad, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_CanLoad }};
//     virtual bool CanLoad() const;
static int LUACALL wxLua_wxRichTextPlainTextHandler_CanLoad(lua_State *L)
{
    // get this
    wxRichTextPlainTextHandler * self = (wxRichTextPlainTextHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainTextHandler);
    // call CanLoad
    bool returns = (self->CanLoad());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_CanSave[] = { &wxluatype_wxRichTextPlainTextHandler, NULL };
static int LUACALL wxLua_wxRichTextPlainTextHandler_CanSave(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainTextHandler_CanSave[1] = {{ wxLua_wxRichTextPlainTextHandler_CanSave, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_CanSave }};
//     virtual bool CanSave() const;
static int LUACALL wxLua_wxRichTextPlainTextHandler_CanSave(lua_State *L)
{
    // get this
    wxRichTextPlainTextHandler * self = (wxRichTextPlainTextHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPlainTextHandler);
    // call CanSave
    bool returns = (self->CanSave());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_delete[] = { &wxluatype_wxRichTextPlainTextHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainTextHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextPlainTextHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPlainTextHandler_constructor[1] = {{ wxLua_wxRichTextPlainTextHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxRichTextPlainTextHandler_constructor }};
//                                wxRichTextFileType type = wxRICHTEXT_TYPE_TEXT);
static int LUACALL wxLua_wxRichTextPlainTextHandler_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextFileType type = wxRICHTEXT_TYPE_TEXT
    wxRichTextFileType type = (argCount >= 3 ? (wxRichTextFileType)wxlua_getenumtype(L, 3) : wxRICHTEXT_TYPE_TEXT);
    // const wxString ext = "txt"
    const wxString ext = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("txt")));
    // const wxString name = "Text"
    const wxString name = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxT("Text")));
    // call constructor
    wxRichTextPlainTextHandler* returns = new wxRichTextPlainTextHandler(name, ext, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextPlainTextHandler);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextPlainTextHandler);

    return 1;
}




void wxLua_wxRichTextPlainTextHandler_delete_function(void** p)
{
    wxRichTextPlainTextHandler* o = (wxRichTextPlainTextHandler*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextPlainTextHandler_methods[] = {
    { "CanLoad", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainTextHandler_CanLoad, 1, NULL },
    { "CanSave", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPlainTextHandler_CanSave, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextPlainTextHandler_delete, 1, NULL },
    { "wxRichTextPlainTextHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextPlainTextHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextPlainTextHandler_methodCount = sizeof(wxRichTextPlainTextHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextDrawingHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextDrawingHandler'
int wxluatype_wxRichTextDrawingHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetName[] = { &wxluatype_wxRichTextDrawingHandler, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetName[1] = {{ wxLua_wxRichTextDrawingHandler_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetName }};
//     wxString GetName() const;
static int LUACALL wxLua_wxRichTextDrawingHandler_GetName(lua_State *L)
{
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualAttributes[] = { &wxluatype_wxRichTextDrawingHandler, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingHandler_GetVirtualAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualAttributes }};
//     virtual bool GetVirtualAttributes(wxRichTextAttr& attr, wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualAttributes(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call GetVirtualAttributes
    bool returns = (self->GetVirtualAttributes(*attr, obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes[] = { &wxluatype_wxRichTextDrawingHandler, &wxluatype_wxRichTextObject, &wxluatype_wxArrayInt, &wxluatype_wxRichTextAttrArray, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes[1] = {{ wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes }};
//     virtual int GetVirtualSubobjectAttributes(wxRichTextObject* obj, wxArrayInt& positions, wxRichTextAttrArray& attributes) const;
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes(lua_State *L)
{
    // wxRichTextAttrArray attributes
    wxRichTextAttrArray * attributes = (wxRichTextAttrArray *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttrArray);
    // wxArrayInt positions
    wxArrayInt * positions = (wxArrayInt *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayInt);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call GetVirtualSubobjectAttributes
    int returns = (self->GetVirtualSubobjectAttributes(obj, *positions, *attributes));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount[] = { &wxluatype_wxRichTextDrawingHandler, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount[1] = {{ wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount }};
//     virtual int GetVirtualSubobjectAttributesCount(wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call GetVirtualSubobjectAttributesCount
    int returns = (self->GetVirtualSubobjectAttributesCount(obj));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualText[] = { &wxluatype_wxRichTextDrawingHandler, &wxluatype_wxRichTextPlainText, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualText[1] = {{ wxLua_wxRichTextDrawingHandler_GetVirtualText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_GetVirtualText }};
//     virtual bool GetVirtualText(const wxRichTextPlainText* obj, wxString& text) const;
static int LUACALL wxLua_wxRichTextDrawingHandler_GetVirtualText(lua_State *L)
{
    // wxString text
    wxString text = wxlua_getwxStringtype(L, 3);
    // const wxRichTextPlainText obj
    const wxRichTextPlainText * obj = (const wxRichTextPlainText *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextPlainText);
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call GetVirtualText
    bool returns = (self->GetVirtualText(obj, text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_HasVirtualAttributes[] = { &wxluatype_wxRichTextDrawingHandler, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_HasVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_HasVirtualAttributes[1] = {{ wxLua_wxRichTextDrawingHandler_HasVirtualAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_HasVirtualAttributes }};
//     virtual bool HasVirtualAttributes(wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextDrawingHandler_HasVirtualAttributes(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call HasVirtualAttributes
    bool returns = (self->HasVirtualAttributes(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_HasVirtualText[] = { &wxluatype_wxRichTextDrawingHandler, &wxluatype_wxRichTextPlainText, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_HasVirtualText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_HasVirtualText[1] = {{ wxLua_wxRichTextDrawingHandler_HasVirtualText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_HasVirtualText }};
//     virtual bool HasVirtualText(const wxRichTextPlainText* obj) const;
static int LUACALL wxLua_wxRichTextDrawingHandler_HasVirtualText(lua_State *L)
{
    // const wxRichTextPlainText obj
    const wxRichTextPlainText * obj = (const wxRichTextPlainText *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextPlainText);
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call HasVirtualText
    bool returns = (self->HasVirtualText(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_SetName[] = { &wxluatype_wxRichTextDrawingHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextDrawingHandler_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_SetName[1] = {{ wxLua_wxRichTextDrawingHandler_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_SetName }};
//     void SetName(const wxString& name);
static int LUACALL wxLua_wxRichTextDrawingHandler_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextDrawingHandler * self = (wxRichTextDrawingHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDrawingHandler);
    // call SetName
    self->SetName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_delete[] = { &wxluatype_wxRichTextDrawingHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDrawingHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDrawingHandler_delete }};




void wxLua_wxRichTextDrawingHandler_delete_function(void** p)
{
    wxRichTextDrawingHandler* o = (wxRichTextDrawingHandler*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextDrawingHandler_methods[] = {
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetName, 1, NULL },
    { "GetVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualAttributes, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetVirtualSubobjectAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributes, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetVirtualSubobjectAttributesCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualSubobjectAttributesCount, 1, NULL },
    { "GetVirtualText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_GetVirtualText, 1, NULL },
    { "HasVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_HasVirtualAttributes, 1, NULL },
    { "HasVirtualText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_HasVirtualText, 1, NULL },
    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDrawingHandler_SetName, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextDrawingHandler_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextDrawingHandler_methodCount = sizeof(wxRichTextDrawingHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)
// ---------------------------------------------------------------------------
// Bind class wxRichTextBufferDataObject
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextBufferDataObject'
int wxluatype_wxRichTextBufferDataObject = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataHere1[] = { &wxluatype_wxRichTextBufferDataObject, &wxluatype_wxDataFormat, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataHere1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataHere1[1] = {{ wxLua_wxRichTextBufferDataObject_GetDataHere1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataHere1 }};
//     virtual bool GetDataHere(const wxDataFormat&, void *buf) const;
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataHere1(lua_State *L)
{
    // void buf
    void * buf = (void *)wxlua_touserdata(L, 3);
    // const wxDataFormat arg1
    const wxDataFormat * arg1 = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call GetDataHere
    bool returns = (self->GetDataHere(*arg1, buf));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataHere[] = { &wxluatype_wxRichTextBufferDataObject, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataHere(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataHere[1] = {{ wxLua_wxRichTextBufferDataObject_GetDataHere, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataHere }};
//     virtual bool GetDataHere(void *pBuf) const;
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataHere(lua_State *L)
{
    // void pBuf
    void * pBuf = (void *)wxlua_touserdata(L, 2);
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call GetDataHere
    bool returns = (self->GetDataHere(pBuf));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataSize1[] = { &wxluatype_wxRichTextBufferDataObject, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataSize1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataSize1[1] = {{ wxLua_wxRichTextBufferDataObject_GetDataSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataSize1 }};
//     virtual size_t GetDataSize(const wxDataFormat&) const;
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataSize1(lua_State *L)
{
    // const wxDataFormat arg1
    const wxDataFormat * arg1 = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call GetDataSize
    size_t returns = (self->GetDataSize(*arg1));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataSize[] = { &wxluatype_wxRichTextBufferDataObject, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataSize(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataSize[1] = {{ wxLua_wxRichTextBufferDataObject_GetDataSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataSize }};
//     virtual size_t GetDataSize() const;
static int LUACALL wxLua_wxRichTextBufferDataObject_GetDataSize(lua_State *L)
{
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call GetDataSize
    size_t returns = (self->GetDataSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetPreferredFormat[] = { &wxluatype_wxRichTextBufferDataObject, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_GetPreferredFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetPreferredFormat[1] = {{ wxLua_wxRichTextBufferDataObject_GetPreferredFormat, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetPreferredFormat }};
//     virtual wxDataFormat GetPreferredFormat(wxDataObject::Direction dir) const;
static int LUACALL wxLua_wxRichTextBufferDataObject_GetPreferredFormat(lua_State *L)
{
    // wxDataObject::Direction dir
    wxDataObject::Direction dir = (wxDataObject::Direction)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call GetPreferredFormat
    // allocate a new object using the copy constructor
    wxDataFormat* returns = new wxDataFormat(self->GetPreferredFormat(dir));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataFormat);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataFormat);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetRichTextBuffer[] = { &wxluatype_wxRichTextBufferDataObject, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_GetRichTextBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetRichTextBuffer[1] = {{ wxLua_wxRichTextBufferDataObject_GetRichTextBuffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetRichTextBuffer }};
//     wxRichTextBuffer* GetRichTextBuffer();
static int LUACALL wxLua_wxRichTextBufferDataObject_GetRichTextBuffer(lua_State *L)
{
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call GetRichTextBuffer
    wxRichTextBuffer* returns = (wxRichTextBuffer*)self->GetRichTextBuffer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextBufferDataObject_GetRichTextBufferFormatId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetRichTextBufferFormatId[1] = {{ wxLua_wxRichTextBufferDataObject_GetRichTextBufferFormatId, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static const wxChar* GetRichTextBufferFormatId();
static int LUACALL wxLua_wxRichTextBufferDataObject_GetRichTextBufferFormatId(lua_State *L)
{
    // call GetRichTextBufferFormatId
    const wxChar* returns = (const wxChar*)wxRichTextBufferDataObject::GetRichTextBufferFormatId();
    // push the result pointer
    lua_pushlightuserdata(L, (void *)returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_SetData1[] = { &wxluatype_wxRichTextBufferDataObject, &wxluatype_wxDataFormat, &wxluatype_TINTEGER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_SetData1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_SetData1[1] = {{ wxLua_wxRichTextBufferDataObject_SetData1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_SetData1 }};
//     virtual bool SetData(const wxDataFormat&, size_t len, const void *buf);
static int LUACALL wxLua_wxRichTextBufferDataObject_SetData1(lua_State *L)
{
    // const void buf
    const void * buf = (const void *)wxlua_touserdata(L, 4);
    // size_t len
    size_t len = (size_t)wxlua_getuintegertype(L, 3);
    // const wxDataFormat arg1
    const wxDataFormat * arg1 = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call SetData
    bool returns = (self->SetData(*arg1, len, buf));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_SetData[] = { &wxluatype_wxRichTextBufferDataObject, &wxluatype_TINTEGER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_SetData(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_SetData[1] = {{ wxLua_wxRichTextBufferDataObject_SetData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_SetData }};
//     virtual bool SetData(size_t len, const void *buf);
static int LUACALL wxLua_wxRichTextBufferDataObject_SetData(lua_State *L)
{
    // const void buf
    const void * buf = (const void *)wxlua_touserdata(L, 3);
    // size_t len
    size_t len = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextBufferDataObject * self = (wxRichTextBufferDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBufferDataObject);
    // call SetData
    bool returns = (self->SetData(len, buf));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_delete[] = { &wxluatype_wxRichTextBufferDataObject, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_delete }};


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_constructor[] = { &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextBufferDataObject_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_constructor[1] = {{ wxLua_wxRichTextBufferDataObject_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_constructor }};
//     wxRichTextBufferDataObject(wxRichTextBuffer* richTextBuffer = NULL);
static int LUACALL wxLua_wxRichTextBufferDataObject_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextBuffer richTextBuffer = NULL
    wxRichTextBuffer * richTextBuffer = (argCount >= 1 ? (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBuffer) : NULL);
    // call constructor
    wxRichTextBufferDataObject* returns = new wxRichTextBufferDataObject(richTextBuffer);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextBufferDataObject);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBufferDataObject);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)



#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataHere_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { wxLua_wxRichTextBufferDataObject_GetDataHere1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataHere1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { wxLua_wxRichTextBufferDataObject_GetDataHere, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataHere },
};
static int s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataHere_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataHere_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataSize_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { wxLua_wxRichTextBufferDataObject_GetDataSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataSize1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { wxLua_wxRichTextBufferDataObject_GetDataSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_GetDataSize },
};
static int s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataSize_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBufferDataObject_SetData_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { wxLua_wxRichTextBufferDataObject_SetData1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_SetData1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { wxLua_wxRichTextBufferDataObject_SetData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextBufferDataObject_SetData },
};
static int s_wxluafunc_wxLua_wxRichTextBufferDataObject_SetData_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBufferDataObject_SetData_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ))

void wxLua_wxRichTextBufferDataObject_delete_function(void** p)
{
    wxRichTextBufferDataObject* o = (wxRichTextBufferDataObject*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextBufferDataObject_methods[] = {
#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ))
    { "GetDataHere", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataHere_overload, s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataHere_overload_count, 0 },
    { "GetDataSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataSize_overload, s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetDataSize_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ))

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "GetPreferredFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetPreferredFormat, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRichTextBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetRichTextBuffer, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRichTextBufferFormatId", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextBufferDataObject_GetRichTextBufferFormatId, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ))
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBufferDataObject_SetData_overload, s_wxluafunc_wxLua_wxRichTextBufferDataObject_SetData_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextBufferDataObject_delete, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextBufferDataObject", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextBufferDataObject_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextBufferDataObject_methodCount = sizeof(wxRichTextBufferDataObject_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextRenderer'
int wxluatype_wxRichTextRenderer = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRenderer_DrawBitmapBullet[] = { &wxluatype_wxRichTextRenderer, &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextRenderer_DrawBitmapBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRenderer_DrawBitmapBullet[1] = {{ wxLua_wxRichTextRenderer_DrawBitmapBullet, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextRenderer_DrawBitmapBullet }};
//     virtual bool DrawBitmapBullet(wxRichTextParagraph* paragraph, wxDC& dc, const wxRichTextAttr& attr, const wxRect& rect);
static int LUACALL wxLua_wxRichTextRenderer_DrawBitmapBullet(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextParagraph paragraph
    wxRichTextParagraph * paragraph = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextRenderer * self = (wxRichTextRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRenderer);
    // call DrawBitmapBullet
    bool returns = (self->DrawBitmapBullet(paragraph, *dc, *attr, *rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRenderer_DrawStandardBullet[] = { &wxluatype_wxRichTextRenderer, &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextRenderer_DrawStandardBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRenderer_DrawStandardBullet[1] = {{ wxLua_wxRichTextRenderer_DrawStandardBullet, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextRenderer_DrawStandardBullet }};
//     virtual bool DrawStandardBullet(wxRichTextParagraph* paragraph, wxDC& dc, const wxRichTextAttr& attr, const wxRect& rect);
static int LUACALL wxLua_wxRichTextRenderer_DrawStandardBullet(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextParagraph paragraph
    wxRichTextParagraph * paragraph = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextRenderer * self = (wxRichTextRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRenderer);
    // call DrawStandardBullet
    bool returns = (self->DrawStandardBullet(paragraph, *dc, *attr, *rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRenderer_DrawTextBullet[] = { &wxluatype_wxRichTextRenderer, &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextRenderer_DrawTextBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRenderer_DrawTextBullet[1] = {{ wxLua_wxRichTextRenderer_DrawTextBullet, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextRenderer_DrawTextBullet }};
//     virtual bool DrawTextBullet(wxRichTextParagraph* paragraph, wxDC& dc, const wxRichTextAttr& attr, const wxRect& rect, const wxString& text);
static int LUACALL wxLua_wxRichTextRenderer_DrawTextBullet(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 6);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextParagraph paragraph
    wxRichTextParagraph * paragraph = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextRenderer * self = (wxRichTextRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRenderer);
    // call DrawTextBullet
    bool returns = (self->DrawTextBullet(paragraph, *dc, *attr, *rect, text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRenderer_EnumerateStandardBulletNames[] = { &wxluatype_wxRichTextRenderer, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxRichTextRenderer_EnumerateStandardBulletNames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRenderer_EnumerateStandardBulletNames[1] = {{ wxLua_wxRichTextRenderer_EnumerateStandardBulletNames, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextRenderer_EnumerateStandardBulletNames }};
//     virtual bool EnumerateStandardBulletNames(wxArrayString& bulletNames);
static int LUACALL wxLua_wxRichTextRenderer_EnumerateStandardBulletNames(lua_State *L)
{
    // wxArrayString bulletNames
    wxArrayString * bulletNames = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxRichTextRenderer * self = (wxRichTextRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextRenderer);
    // call EnumerateStandardBulletNames
    bool returns = (self->EnumerateStandardBulletNames(*bulletNames));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextRenderer_delete[] = { &wxluatype_wxRichTextRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextRenderer_delete }};




void wxLua_wxRichTextRenderer_delete_function(void** p)
{
    wxRichTextRenderer* o = (wxRichTextRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextRenderer_methods[] = {
#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "DrawBitmapBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRenderer_DrawBitmapBullet, 1, NULL },
    { "DrawStandardBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRenderer_DrawStandardBullet, 1, NULL },
    { "DrawTextBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRenderer_DrawTextBullet, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "EnumerateStandardBulletNames", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextRenderer_EnumerateStandardBulletNames, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextRenderer_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextRenderer_methodCount = sizeof(wxRichTextRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextStdRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextStdRenderer'
int wxluatype_wxRichTextStdRenderer = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStdRenderer_DrawBitmapBullet[] = { &wxluatype_wxRichTextStdRenderer, &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextStdRenderer_DrawBitmapBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStdRenderer_DrawBitmapBullet[1] = {{ wxLua_wxRichTextStdRenderer_DrawBitmapBullet, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextStdRenderer_DrawBitmapBullet }};
//     virtual bool DrawBitmapBullet(wxRichTextParagraph* paragraph, wxDC& dc, const wxRichTextAttr& attr, const wxRect& rect);
static int LUACALL wxLua_wxRichTextStdRenderer_DrawBitmapBullet(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextParagraph paragraph
    wxRichTextParagraph * paragraph = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextStdRenderer * self = (wxRichTextStdRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStdRenderer);
    // call DrawBitmapBullet
    bool returns = (self->DrawBitmapBullet(paragraph, *dc, *attr, *rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStdRenderer_DrawStandardBullet[] = { &wxluatype_wxRichTextStdRenderer, &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextStdRenderer_DrawStandardBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStdRenderer_DrawStandardBullet[1] = {{ wxLua_wxRichTextStdRenderer_DrawStandardBullet, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextStdRenderer_DrawStandardBullet }};
//     virtual bool DrawStandardBullet(wxRichTextParagraph* paragraph, wxDC& dc, const wxRichTextAttr& attr, const wxRect& rect);
static int LUACALL wxLua_wxRichTextStdRenderer_DrawStandardBullet(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextParagraph paragraph
    wxRichTextParagraph * paragraph = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextStdRenderer * self = (wxRichTextStdRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStdRenderer);
    // call DrawStandardBullet
    bool returns = (self->DrawStandardBullet(paragraph, *dc, *attr, *rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStdRenderer_DrawTextBullet[] = { &wxluatype_wxRichTextStdRenderer, &wxluatype_wxRichTextParagraph, &wxluatype_wxDC, &wxluatype_wxRichTextAttr, &wxluatype_wxRect, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStdRenderer_DrawTextBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStdRenderer_DrawTextBullet[1] = {{ wxLua_wxRichTextStdRenderer_DrawTextBullet, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxRichTextStdRenderer_DrawTextBullet }};
//     virtual bool DrawTextBullet(wxRichTextParagraph* paragraph, wxDC& dc, const wxRichTextAttr& attr, const wxRect& rect, const wxString& text);
static int LUACALL wxLua_wxRichTextStdRenderer_DrawTextBullet(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 6);
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRichTextParagraph paragraph
    wxRichTextParagraph * paragraph = (wxRichTextParagraph *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraph);
    // get this
    wxRichTextStdRenderer * self = (wxRichTextStdRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStdRenderer);
    // call DrawTextBullet
    bool returns = (self->DrawTextBullet(paragraph, *dc, *attr, *rect, text));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStdRenderer_EnumerateStandardBulletNames[] = { &wxluatype_wxRichTextStdRenderer, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxRichTextStdRenderer_EnumerateStandardBulletNames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStdRenderer_EnumerateStandardBulletNames[1] = {{ wxLua_wxRichTextStdRenderer_EnumerateStandardBulletNames, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStdRenderer_EnumerateStandardBulletNames }};
//     virtual bool EnumerateStandardBulletNames(wxArrayString& bulletNames);
static int LUACALL wxLua_wxRichTextStdRenderer_EnumerateStandardBulletNames(lua_State *L)
{
    // wxArrayString bulletNames
    wxArrayString * bulletNames = (wxArrayString *)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxRichTextStdRenderer * self = (wxRichTextStdRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStdRenderer);
    // call EnumerateStandardBulletNames
    bool returns = (self->EnumerateStandardBulletNames(*bulletNames));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStdRenderer_delete[] = { &wxluatype_wxRichTextStdRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStdRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStdRenderer_delete }};

static int LUACALL wxLua_wxRichTextStdRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStdRenderer_constructor[1] = {{ wxLua_wxRichTextStdRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextStdRenderer();
static int LUACALL wxLua_wxRichTextStdRenderer_constructor(lua_State *L)
{
    // call constructor
    wxRichTextStdRenderer* returns = new wxRichTextStdRenderer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStdRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStdRenderer);

    return 1;
}




void wxLua_wxRichTextStdRenderer_delete_function(void** p)
{
    wxRichTextStdRenderer* o = (wxRichTextStdRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextStdRenderer_methods[] = {
#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "DrawBitmapBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStdRenderer_DrawBitmapBullet, 1, NULL },
    { "DrawStandardBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStdRenderer_DrawStandardBullet, 1, NULL },
    { "DrawTextBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStdRenderer_DrawTextBullet, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "EnumerateStandardBulletNames", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStdRenderer_EnumerateStandardBulletNames, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextStdRenderer_delete, 1, NULL },
    { "wxRichTextStdRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextStdRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextStdRenderer_methodCount = sizeof(wxRichTextStdRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextContextMenuPropertiesInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextContextMenuPropertiesInfo'
int wxluatype_wxRichTextContextMenuPropertiesInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_AddItem[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, &wxluatype_TSTRING, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_AddItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_AddItem[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_AddItem, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_AddItem }};
//     bool AddItem(const wxString& label, wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_AddItem(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call AddItem
    bool returns = (self->AddItem(label, obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_AddItems[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_AddItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_AddItems[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_AddItems, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_AddItems }};
//     int AddItems(wxRichTextCtrl* ctrl, wxRichTextObject* container, wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_AddItems(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextObject);
    // wxRichTextObject container
    wxRichTextObject * container = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call AddItems
    int returns = (self->AddItems(ctrl, container, obj));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_AddMenuItems[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, &wxluatype_wxMenu, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_AddMenuItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_AddMenuItems[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_AddMenuItems, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_AddMenuItems }};
//     int AddMenuItems(wxMenu* menu, int startCmd = wxID_RICHTEXT_PROPERTIES1) const;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_AddMenuItems(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int startCmd = wxID_RICHTEXT_PROPERTIES1
    int startCmd = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxID_RICHTEXT_PROPERTIES1);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call AddMenuItems
    int returns = (self->AddMenuItems(menu, startCmd));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Clear[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Clear[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Clear(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetCount[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetCount[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetCount }};
//     int GetCount() const;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetCount(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabel[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabel[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_GetLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabel }};
//     wxString GetLabel(int n) const;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetLabel(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call GetLabel
    wxString returns = (self->GetLabel(n));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1 }};
//     const wxArrayString& GetLabels() const;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call GetLabels
    const wxArrayString* returns = (const wxArrayString*)&self->GetLabels();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels }};
//     wxArrayString& GetLabels();
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call GetLabels
    wxArrayString* returns = (wxArrayString*)&self->GetLabels();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetObject[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetObject[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_GetObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetObject }};
//     wxRichTextObject* GetObject(int n) const;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetObject(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call GetObject
    wxRichTextObject* returns = (wxRichTextObject*)self->GetObject(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetObjects[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetObjects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetObjects[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_GetObjects, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetObjects }};
//     wxRichTextObjectPtrArray& GetObjects();
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_GetObjects(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call GetObjects
    wxRichTextObjectPtrArray* returns = (wxRichTextObjectPtrArray*)&self->GetObjects();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPtrArray);

    return 1;
}


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels }};
//     wxArrayString               m_labels;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo *self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_labels, wxluatype_wxArrayString);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects }};
//     wxRichTextObjectPtrArray    m_objects;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo *self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // push the result datatype
    wxluaT_pushuserdatatype(L, &self->m_objects, wxluatype_wxRichTextObjectPtrArray);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Init[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Init[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Init(lua_State *L)
{
    // get this
    wxRichTextContextMenuPropertiesInfo * self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // call Init
    self->Init();

    return 0;
}


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels }};
//     wxArrayString               m_labels;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels(lua_State *L)
{
    // get the data type value
    wxArrayString* val = (wxArrayString*)wxluaT_getuserdatatype(L, 2, wxluatype_wxArrayString);
    // get this
    wxRichTextContextMenuPropertiesInfo *self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    self->m_labels = *val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, &wxluatype_wxRichTextObjectPtrArray, NULL };
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects }};
//     wxRichTextObjectPtrArray    m_objects;
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects(lua_State *L)
{
    // get the data type value
    wxRichTextObjectPtrArray* val = (wxRichTextObjectPtrArray*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObjectPtrArray);
    // get this
    wxRichTextContextMenuPropertiesInfo *self = (wxRichTextContextMenuPropertiesInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextContextMenuPropertiesInfo);
    self->m_objects = *val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_delete[] = { &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_delete }};


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_constructor[1] = {{ wxLua_wxRichTextContextMenuPropertiesInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextContextMenuPropertiesInfo();
static int LUACALL wxLua_wxRichTextContextMenuPropertiesInfo_constructor(lua_State *L)
{
    // call constructor
    wxRichTextContextMenuPropertiesInfo* returns = new wxRichTextContextMenuPropertiesInfo();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextContextMenuPropertiesInfo);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextContextMenuPropertiesInfo);

    return 1;
}




#if ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels_overload[] =
{

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels1 },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

void wxLua_wxRichTextContextMenuPropertiesInfo_delete_function(void** p)
{
    wxRichTextContextMenuPropertiesInfo* o = (wxRichTextContextMenuPropertiesInfo*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextContextMenuPropertiesInfo_methods[] = {
    { "AddItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_AddItem, 1, NULL },
    { "AddItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_AddItems, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "AddMenuItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_AddMenuItems, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetCount, 1, NULL },
    { "GetLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabel, 1, NULL },

#if ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "GetLabels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels_overload, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetLabels_overload_count, 0 },
#endif // ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "GetObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetObject, 1, NULL },
    { "GetObjects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_GetObjects, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_labels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_objects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Init, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_labels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Set_m_objects", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_delete, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_labels", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_labels, 1, NULL },
    { "m_labels", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_labels, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "m_objects", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Set_m_objects, 1, NULL },
    { "m_objects", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_Get_m_objects, 1, NULL },
    { "wxRichTextContextMenuPropertiesInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextContextMenuPropertiesInfo_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextContextMenuPropertiesInfo_methodCount = sizeof(wxRichTextContextMenuPropertiesInfo_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextCtrl'
int wxluatype_wxRichTextCtrl = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_AddImage[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxImage, NULL };
static int LUACALL wxLua_wxRichTextCtrl_AddImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_AddImage[1] = {{ wxLua_wxRichTextCtrl_AddImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_AddImage }};
//     virtual wxRichTextRange AddImage(const wxImage& image);
static int LUACALL wxLua_wxRichTextCtrl_AddImage(lua_State *L)
{
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call AddImage
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->AddImage(*image));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_AddParagraph[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_AddParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_AddParagraph[1] = {{ wxLua_wxRichTextCtrl_AddParagraph, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_AddParagraph }};
//     virtual wxRichTextRange AddParagraph(const wxString& text);
static int LUACALL wxLua_wxRichTextCtrl_AddParagraph(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call AddParagraph
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->AddParagraph(text));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_AppendText[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_AppendText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_AppendText[1] = {{ wxLua_wxRichTextCtrl_AppendText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_AppendText }};
//     virtual void AppendText(const wxString& text);
static int LUACALL wxLua_wxRichTextCtrl_AppendText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call AppendText
    self->AppendText(text);

    return 0;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyAlignmentToSelection[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ApplyAlignmentToSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ApplyAlignmentToSelection[1] = {{ wxLua_wxRichTextCtrl_ApplyAlignmentToSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyAlignmentToSelection }};
//     virtual bool ApplyAlignmentToSelection(wxTextAttrAlignment alignment);
static int LUACALL wxLua_wxRichTextCtrl_ApplyAlignmentToSelection(lua_State *L)
{
    // wxTextAttrAlignment alignment
    wxTextAttrAlignment alignment = (wxTextAttrAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ApplyAlignmentToSelection
    bool returns = (self->ApplyAlignmentToSelection(alignment));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyBoldToSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ApplyBoldToSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ApplyBoldToSelection[1] = {{ wxLua_wxRichTextCtrl_ApplyBoldToSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyBoldToSelection }};
//     virtual bool ApplyBoldToSelection();
static int LUACALL wxLua_wxRichTextCtrl_ApplyBoldToSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ApplyBoldToSelection
    bool returns = (self->ApplyBoldToSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyItalicToSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ApplyItalicToSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ApplyItalicToSelection[1] = {{ wxLua_wxRichTextCtrl_ApplyItalicToSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyItalicToSelection }};
//     virtual bool ApplyItalicToSelection();
static int LUACALL wxLua_wxRichTextCtrl_ApplyItalicToSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ApplyItalicToSelection
    bool returns = (self->ApplyItalicToSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ApplyStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ApplyStyle[1] = {{ wxLua_wxRichTextCtrl_ApplyStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyStyle }};
//     virtual bool ApplyStyle(wxRichTextStyleDefinition* def);
static int LUACALL wxLua_wxRichTextCtrl_ApplyStyle(lua_State *L)
{
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ApplyStyle
    bool returns = (self->ApplyStyle(def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyStyleSheet[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ApplyStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ApplyStyleSheet[1] = {{ wxLua_wxRichTextCtrl_ApplyStyleSheet, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyStyleSheet }};
//     bool ApplyStyleSheet(wxRichTextStyleSheet* styleSheet = NULL);
static int LUACALL wxLua_wxRichTextCtrl_ApplyStyleSheet(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextStyleSheet styleSheet = NULL
    wxRichTextStyleSheet * styleSheet = (argCount >= 2 ? (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet) : NULL);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ApplyStyleSheet
    bool returns = (self->ApplyStyleSheet(styleSheet));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyTextEffectToSelection[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ApplyTextEffectToSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ApplyTextEffectToSelection[1] = {{ wxLua_wxRichTextCtrl_ApplyTextEffectToSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyTextEffectToSelection }};
//     virtual bool ApplyTextEffectToSelection(int flags);
static int LUACALL wxLua_wxRichTextCtrl_ApplyTextEffectToSelection(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ApplyTextEffectToSelection
    bool returns = (self->ApplyTextEffectToSelection(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyUnderlineToSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ApplyUnderlineToSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ApplyUnderlineToSelection[1] = {{ wxLua_wxRichTextCtrl_ApplyUnderlineToSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_ApplyUnderlineToSelection }};
//     virtual bool ApplyUnderlineToSelection();
static int LUACALL wxLua_wxRichTextCtrl_ApplyUnderlineToSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ApplyUnderlineToSelection
    bool returns = (self->ApplyUnderlineToSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BatchingUndo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BatchingUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BatchingUndo[1] = {{ wxLua_wxRichTextCtrl_BatchingUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_BatchingUndo }};
//     virtual bool BatchingUndo() const;
static int LUACALL wxLua_wxRichTextCtrl_BatchingUndo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BatchingUndo
    bool returns = (self->BatchingUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginAlignment[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginAlignment[1] = {{ wxLua_wxRichTextCtrl_BeginAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginAlignment }};
//     bool BeginAlignment(wxTextAttrAlignment alignment);
static int LUACALL wxLua_wxRichTextCtrl_BeginAlignment(lua_State *L)
{
    // wxTextAttrAlignment alignment
    wxTextAttrAlignment alignment = (wxTextAttrAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginAlignment
    bool returns = (self->BeginAlignment(alignment));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginBatchUndo[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginBatchUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginBatchUndo[1] = {{ wxLua_wxRichTextCtrl_BeginBatchUndo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginBatchUndo }};
//     virtual bool BeginBatchUndo(const wxString& cmdName);
static int LUACALL wxLua_wxRichTextCtrl_BeginBatchUndo(lua_State *L)
{
    // const wxString cmdName
    const wxString cmdName = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginBatchUndo
    bool returns = (self->BeginBatchUndo(cmdName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginBold[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginBold[1] = {{ wxLua_wxRichTextCtrl_BeginBold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginBold }};
//     bool BeginBold();
static int LUACALL wxLua_wxRichTextCtrl_BeginBold(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginBold
    bool returns = (self->BeginBold());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginCharacterStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginCharacterStyle[1] = {{ wxLua_wxRichTextCtrl_BeginCharacterStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginCharacterStyle }};
//     bool BeginCharacterStyle(const wxString& characterStyle);
static int LUACALL wxLua_wxRichTextCtrl_BeginCharacterStyle(lua_State *L)
{
    // const wxString characterStyle
    const wxString characterStyle = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginCharacterStyle
    bool returns = (self->BeginCharacterStyle(characterStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginFont[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginFont[1] = {{ wxLua_wxRichTextCtrl_BeginFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginFont }};
//     bool BeginFont(const wxFont& font);
static int LUACALL wxLua_wxRichTextCtrl_BeginFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginFont
    bool returns = (self->BeginFont(*font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginFontSize[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginFontSize[1] = {{ wxLua_wxRichTextCtrl_BeginFontSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginFontSize }};
//     bool BeginFontSize(int pointSize);
static int LUACALL wxLua_wxRichTextCtrl_BeginFontSize(lua_State *L)
{
    // int pointSize
    int pointSize = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginFontSize
    bool returns = (self->BeginFontSize(pointSize));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginItalic[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginItalic[1] = {{ wxLua_wxRichTextCtrl_BeginItalic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginItalic }};
//     bool BeginItalic();
static int LUACALL wxLua_wxRichTextCtrl_BeginItalic(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginItalic
    bool returns = (self->BeginItalic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginLeftIndent[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginLeftIndent[1] = {{ wxLua_wxRichTextCtrl_BeginLeftIndent, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginLeftIndent }};
//     bool BeginLeftIndent(int leftIndent, int leftSubIndent = 0);
static int LUACALL wxLua_wxRichTextCtrl_BeginLeftIndent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int leftSubIndent = 0
    int leftSubIndent = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginLeftIndent
    bool returns = (self->BeginLeftIndent(leftIndent, leftSubIndent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginLineSpacing[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginLineSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginLineSpacing[1] = {{ wxLua_wxRichTextCtrl_BeginLineSpacing, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginLineSpacing }};
//     bool BeginLineSpacing(int lineSpacing);
static int LUACALL wxLua_wxRichTextCtrl_BeginLineSpacing(lua_State *L)
{
    // int lineSpacing
    int lineSpacing = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginLineSpacing
    bool returns = (self->BeginLineSpacing(lineSpacing));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginListStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginListStyle[1] = {{ wxLua_wxRichTextCtrl_BeginListStyle, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginListStyle }};
//     bool BeginListStyle(const wxString& listStyle, int level = 1, int number = 1);
static int LUACALL wxLua_wxRichTextCtrl_BeginListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int number = 1
    int number = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 1);
    // int level = 1
    int level = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // const wxString listStyle
    const wxString listStyle = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginListStyle
    bool returns = (self->BeginListStyle(listStyle, level, number));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginNumberedBullet[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginNumberedBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginNumberedBullet[1] = {{ wxLua_wxRichTextCtrl_BeginNumberedBullet, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginNumberedBullet }};
//     bool BeginNumberedBullet(int bulletNumber, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC|wxTEXT_ATTR_BULLET_STYLE_PERIOD);
static int LUACALL wxLua_wxRichTextCtrl_BeginNumberedBullet(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC | wxTEXT_ATTR_BULLET_STYLE_PERIOD
    int bulletStyle = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxTEXT_ATTR_BULLET_STYLE_ARABIC | wxTEXT_ATTR_BULLET_STYLE_PERIOD);
    // int leftSubIndent
    int leftSubIndent = (int)wxlua_getnumbertype(L, 4);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 3);
    // int bulletNumber
    int bulletNumber = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginNumberedBullet
    bool returns = (self->BeginNumberedBullet(bulletNumber, leftIndent, leftSubIndent, bulletStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginParagraphSpacing[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginParagraphSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginParagraphSpacing[1] = {{ wxLua_wxRichTextCtrl_BeginParagraphSpacing, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginParagraphSpacing }};
//     bool BeginParagraphSpacing(int before, int after);
static int LUACALL wxLua_wxRichTextCtrl_BeginParagraphSpacing(lua_State *L)
{
    // int after
    int after = (int)wxlua_getnumbertype(L, 3);
    // int before
    int before = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginParagraphSpacing
    bool returns = (self->BeginParagraphSpacing(before, after));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginParagraphStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginParagraphStyle[1] = {{ wxLua_wxRichTextCtrl_BeginParagraphStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginParagraphStyle }};
//     bool BeginParagraphStyle(const wxString& paragraphStyle);
static int LUACALL wxLua_wxRichTextCtrl_BeginParagraphStyle(lua_State *L)
{
    // const wxString paragraphStyle
    const wxString paragraphStyle = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginParagraphStyle
    bool returns = (self->BeginParagraphStyle(paragraphStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginRightIndent[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginRightIndent[1] = {{ wxLua_wxRichTextCtrl_BeginRightIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginRightIndent }};
//     bool BeginRightIndent(int rightIndent);
static int LUACALL wxLua_wxRichTextCtrl_BeginRightIndent(lua_State *L)
{
    // int rightIndent
    int rightIndent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginRightIndent
    bool returns = (self->BeginRightIndent(rightIndent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginStandardBullet[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginStandardBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginStandardBullet[1] = {{ wxLua_wxRichTextCtrl_BeginStandardBullet, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginStandardBullet }};
//     bool BeginStandardBullet(const wxString& bulletName, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_STANDARD);
static int LUACALL wxLua_wxRichTextCtrl_BeginStandardBullet(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_STANDARD
    int bulletStyle = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxTEXT_ATTR_BULLET_STYLE_STANDARD);
    // int leftSubIndent
    int leftSubIndent = (int)wxlua_getnumbertype(L, 4);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 3);
    // const wxString bulletName
    const wxString bulletName = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginStandardBullet
    bool returns = (self->BeginStandardBullet(bulletName, leftIndent, leftSubIndent, bulletStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginStyle[1] = {{ wxLua_wxRichTextCtrl_BeginStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginStyle }};
//     virtual bool BeginStyle(const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_BeginStyle(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginStyle
    bool returns = (self->BeginStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginSuppressUndo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginSuppressUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginSuppressUndo[1] = {{ wxLua_wxRichTextCtrl_BeginSuppressUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginSuppressUndo }};
//     virtual bool BeginSuppressUndo();
static int LUACALL wxLua_wxRichTextCtrl_BeginSuppressUndo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginSuppressUndo
    bool returns = (self->BeginSuppressUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginSymbolBullet[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginSymbolBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginSymbolBullet[1] = {{ wxLua_wxRichTextCtrl_BeginSymbolBullet, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginSymbolBullet }};
//     bool BeginSymbolBullet(const wxString& symbol, int leftIndent, int leftSubIndent, int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL);
static int LUACALL wxLua_wxRichTextCtrl_BeginSymbolBullet(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL
    int bulletStyle = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxTEXT_ATTR_BULLET_STYLE_SYMBOL);
    // int leftSubIndent
    int leftSubIndent = (int)wxlua_getnumbertype(L, 4);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 3);
    // const wxString symbol
    const wxString symbol = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginSymbolBullet
    bool returns = (self->BeginSymbolBullet(symbol, leftIndent, leftSubIndent, bulletStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginTextColour[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginTextColour[1] = {{ wxLua_wxRichTextCtrl_BeginTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginTextColour }};
//     bool BeginTextColour(const wxColour& colour);
static int LUACALL wxLua_wxRichTextCtrl_BeginTextColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginTextColour
    bool returns = (self->BeginTextColour(*colour));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginURL[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginURL[1] = {{ wxLua_wxRichTextCtrl_BeginURL, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginURL }};
//     bool BeginURL(const wxString& url, const wxString& characterStyle = wxEmptyString);
static int LUACALL wxLua_wxRichTextCtrl_BeginURL(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString characterStyle = wxEmptyString
    const wxString characterStyle = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginURL
    bool returns = (self->BeginURL(url, characterStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginUnderline[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_BeginUnderline(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_BeginUnderline[1] = {{ wxLua_wxRichTextCtrl_BeginUnderline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_BeginUnderline }};
//     bool BeginUnderline();
static int LUACALL wxLua_wxRichTextCtrl_BeginUnderline(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call BeginUnderline
    bool returns = (self->BeginUnderline());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanCopy[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanCopy[1] = {{ wxLua_wxRichTextCtrl_CanCopy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanCopy }};
//     virtual bool CanCopy() const;
static int LUACALL wxLua_wxRichTextCtrl_CanCopy(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanCopy
    bool returns = (self->CanCopy());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanCut[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanCut[1] = {{ wxLua_wxRichTextCtrl_CanCut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanCut }};
//     virtual bool CanCut() const;
static int LUACALL wxLua_wxRichTextCtrl_CanCut(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanCut
    bool returns = (self->CanCut());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanDeleteRange[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanDeleteRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanDeleteRange[1] = {{ wxLua_wxRichTextCtrl_CanDeleteRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanDeleteRange }};
//     virtual bool CanDeleteRange(wxRichTextParagraphLayoutBox& container, const wxRichTextRange& range) const;
static int LUACALL wxLua_wxRichTextCtrl_CanDeleteRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanDeleteRange
    bool returns = (self->CanDeleteRange(*container, *range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanDeleteSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanDeleteSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanDeleteSelection[1] = {{ wxLua_wxRichTextCtrl_CanDeleteSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanDeleteSelection }};
//     virtual bool CanDeleteSelection() const;
static int LUACALL wxLua_wxRichTextCtrl_CanDeleteSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanDeleteSelection
    bool returns = (self->CanDeleteSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanEditProperties[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanEditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanEditProperties[1] = {{ wxLua_wxRichTextCtrl_CanEditProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanEditProperties }};
//     virtual bool CanEditProperties(wxRichTextObject* obj) const;
static int LUACALL wxLua_wxRichTextCtrl_CanEditProperties(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanEditProperties
    bool returns = (self->CanEditProperties(obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanInsertContent[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanInsertContent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanInsertContent[1] = {{ wxLua_wxRichTextCtrl_CanInsertContent, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanInsertContent }};
//     virtual bool CanInsertContent(wxRichTextParagraphLayoutBox& container, long pos) const;
static int LUACALL wxLua_wxRichTextCtrl_CanInsertContent(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanInsertContent
    bool returns = (self->CanInsertContent(*container, pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanPaste[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanPaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanPaste[1] = {{ wxLua_wxRichTextCtrl_CanPaste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanPaste }};
//     virtual bool CanPaste() const;
static int LUACALL wxLua_wxRichTextCtrl_CanPaste(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanPaste
    bool returns = (self->CanPaste());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanRedo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanRedo[1] = {{ wxLua_wxRichTextCtrl_CanRedo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanRedo }};
//     virtual bool CanRedo() const;
static int LUACALL wxLua_wxRichTextCtrl_CanRedo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanRedo
    bool returns = (self->CanRedo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_CanUndo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_CanUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_CanUndo[1] = {{ wxLua_wxRichTextCtrl_CanUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_CanUndo }};
//     virtual bool CanUndo() const;
static int LUACALL wxLua_wxRichTextCtrl_CanUndo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call CanUndo
    bool returns = (self->CanUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Clear[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Clear[1] = {{ wxLua_wxRichTextCtrl_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Clear }};
//     virtual void Clear();
static int LUACALL wxLua_wxRichTextCtrl_Clear(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Clear
    self->Clear();

    return 0;
}

static int LUACALL wxLua_wxRichTextCtrl_ClearAvailableFontNames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ClearAvailableFontNames[1] = {{ wxLua_wxRichTextCtrl_ClearAvailableFontNames, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void ClearAvailableFontNames();
static int LUACALL wxLua_wxRichTextCtrl_ClearAvailableFontNames(lua_State *L)
{
    // call ClearAvailableFontNames
    wxRichTextCtrl::ClearAvailableFontNames();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ClearListStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ClearListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ClearListStyle[1] = {{ wxLua_wxRichTextCtrl_ClearListStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_ClearListStyle }};
//     virtual bool ClearListStyle(const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextCtrl_ClearListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ClearListStyle
    bool returns = (self->ClearListStyle(*range, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Command[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Command(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Command[1] = {{ wxLua_wxRichTextCtrl_Command, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_Command }};
//     void Command(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_Command(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Command
    self->Command(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Copy[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Copy[1] = {{ wxLua_wxRichTextCtrl_Copy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Copy }};
//     virtual void Copy();
static int LUACALL wxLua_wxRichTextCtrl_Copy(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Copy
    self->Copy();

    return 0;
}


#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Create[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Create[1] = {{ wxLua_wxRichTextCtrl_Create, WXLUAMETHOD_METHOD, 2, 9, s_wxluatypeArray_wxLua_wxRichTextCtrl_Create }};
//         long style = wxRE_MULTILINE, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxTextCtrlNameStr );
static int LUACALL wxLua_wxRichTextCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxTextCtrlNameStr
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxTextCtrlNameStr));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxRE_MULTILINE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxRE_MULTILINE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = wxEmptyString
    const wxString value = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Create
    bool returns = (self->Create(parent, id, value, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Cut[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Cut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Cut[1] = {{ wxLua_wxRichTextCtrl_Cut, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Cut }};
//     virtual void Cut();
static int LUACALL wxLua_wxRichTextCtrl_Cut(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Cut
    self->Cut();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Delete[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Delete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Delete[1] = {{ wxLua_wxRichTextCtrl_Delete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_Delete }};
//     virtual bool Delete(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextCtrl_Delete(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Delete
    bool returns = (self->Delete(*range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DeleteSelectedContent[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DeleteSelectedContent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DeleteSelectedContent[1] = {{ wxLua_wxRichTextCtrl_DeleteSelectedContent, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_DeleteSelectedContent }};
// %override wxLua_wxRichTextCtrl_DeleteSelectedContent
// C++: bool DeleteSelectedContent(long* newPos= NULL);
// Lua: %override [bool, long] DeleteSelectedContent();
static int LUACALL wxLua_wxRichTextCtrl_DeleteSelectedContent(lua_State *L)
{
    // long *newPos = NULL
    long newPos;
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DeleteSelectedContent
    bool returns = (self->DeleteSelectedContent(&newPos));
    // push the result flag
    lua_pushboolean(L, returns);
    // push the newPos number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)newPos == (double)newPos) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, newPos);
} else
#endif
{
    lua_pushnumber(L, newPos);
}

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DeleteSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DeleteSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DeleteSelection[1] = {{ wxLua_wxRichTextCtrl_DeleteSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_DeleteSelection }};
//     virtual void DeleteSelection();
static int LUACALL wxLua_wxRichTextCtrl_DeleteSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DeleteSelection
    self->DeleteSelection();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DiscardEdits[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DiscardEdits(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DiscardEdits[1] = {{ wxLua_wxRichTextCtrl_DiscardEdits, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_DiscardEdits }};
//     virtual void DiscardEdits();
static int LUACALL wxLua_wxRichTextCtrl_DiscardEdits(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DiscardEdits
    self->DiscardEdits();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DoGetValue[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DoGetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DoGetValue[1] = {{ wxLua_wxRichTextCtrl_DoGetValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_DoGetValue }};
//     virtual wxString DoGetValue() const;
static int LUACALL wxLua_wxRichTextCtrl_DoGetValue(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DoGetValue
    wxString returns = (self->DoGetValue());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DoLoadFile[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DoLoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DoLoadFile[1] = {{ wxLua_wxRichTextCtrl_DoLoadFile, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_DoLoadFile }};
//     virtual bool DoLoadFile(const wxString& file, int fileType);
static int LUACALL wxLua_wxRichTextCtrl_DoLoadFile(lua_State *L)
{
    // int fileType
    int fileType = (int)wxlua_getnumbertype(L, 3);
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DoLoadFile
    bool returns = (self->DoLoadFile(file, fileType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DoSaveFile[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DoSaveFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DoSaveFile[1] = {{ wxLua_wxRichTextCtrl_DoSaveFile, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_DoSaveFile }};
//                             int fileType = wxRICHTEXT_TYPE_ANY);
static int LUACALL wxLua_wxRichTextCtrl_DoSaveFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int fileType = wxRICHTEXT_TYPE_ANY
    int fileType = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRICHTEXT_TYPE_ANY);
    // const wxString file = wxEmptyString
    const wxString file = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DoSaveFile
    bool returns = (self->DoSaveFile(file, fileType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DoWriteText[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DoWriteText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DoWriteText[1] = {{ wxLua_wxRichTextCtrl_DoWriteText, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_DoWriteText }};
//     virtual void DoWriteText(const wxString& value, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_DoWriteText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DoWriteText
    self->DoWriteText(value, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_DoesSelectionHaveTextEffectFlag[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_DoesSelectionHaveTextEffectFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_DoesSelectionHaveTextEffectFlag[1] = {{ wxLua_wxRichTextCtrl_DoesSelectionHaveTextEffectFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_DoesSelectionHaveTextEffectFlag }};
//     virtual bool DoesSelectionHaveTextEffectFlag(int flag);
static int LUACALL wxLua_wxRichTextCtrl_DoesSelectionHaveTextEffectFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call DoesSelectionHaveTextEffectFlag
    bool returns = (self->DoesSelectionHaveTextEffectFlag(flag));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EditProperties[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextObject, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EditProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EditProperties[1] = {{ wxLua_wxRichTextCtrl_EditProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_EditProperties }};
//     virtual bool EditProperties(wxRichTextObject* obj, wxWindow* parent);
static int LUACALL wxLua_wxRichTextCtrl_EditProperties(lua_State *L)
{
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EditProperties
    bool returns = (self->EditProperties(obj, parent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EnableVerticalScrollbar[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EnableVerticalScrollbar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EnableVerticalScrollbar[1] = {{ wxLua_wxRichTextCtrl_EnableVerticalScrollbar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_EnableVerticalScrollbar }};
//     virtual void EnableVerticalScrollbar(bool enable);
static int LUACALL wxLua_wxRichTextCtrl_EnableVerticalScrollbar(lua_State *L)
{
    // bool enable
    bool enable = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EnableVerticalScrollbar
    self->EnableVerticalScrollbar(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EnableVirtualAttributes[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EnableVirtualAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EnableVirtualAttributes[1] = {{ wxLua_wxRichTextCtrl_EnableVirtualAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_EnableVirtualAttributes }};
//     void EnableVirtualAttributes(bool b);
static int LUACALL wxLua_wxRichTextCtrl_EnableVirtualAttributes(lua_State *L)
{
    // bool b
    bool b = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EnableVirtualAttributes
    self->EnableVirtualAttributes(b);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndAlignment[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndAlignment[1] = {{ wxLua_wxRichTextCtrl_EndAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndAlignment }};
//     bool EndAlignment();
static int LUACALL wxLua_wxRichTextCtrl_EndAlignment(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndAlignment
    bool returns = (self->EndAlignment());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndAllStyles[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndAllStyles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndAllStyles[1] = {{ wxLua_wxRichTextCtrl_EndAllStyles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndAllStyles }};
//     virtual bool EndAllStyles();
static int LUACALL wxLua_wxRichTextCtrl_EndAllStyles(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndAllStyles
    bool returns = (self->EndAllStyles());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndBatchUndo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndBatchUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndBatchUndo[1] = {{ wxLua_wxRichTextCtrl_EndBatchUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndBatchUndo }};
//     virtual bool EndBatchUndo();
static int LUACALL wxLua_wxRichTextCtrl_EndBatchUndo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndBatchUndo
    bool returns = (self->EndBatchUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndBold[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndBold[1] = {{ wxLua_wxRichTextCtrl_EndBold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndBold }};
//     bool EndBold();
static int LUACALL wxLua_wxRichTextCtrl_EndBold(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndBold
    bool returns = (self->EndBold());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndCharacterStyle[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndCharacterStyle[1] = {{ wxLua_wxRichTextCtrl_EndCharacterStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndCharacterStyle }};
//     bool EndCharacterStyle();
static int LUACALL wxLua_wxRichTextCtrl_EndCharacterStyle(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndCharacterStyle
    bool returns = (self->EndCharacterStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndFont[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndFont[1] = {{ wxLua_wxRichTextCtrl_EndFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndFont }};
//     bool EndFont();
static int LUACALL wxLua_wxRichTextCtrl_EndFont(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndFont
    bool returns = (self->EndFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndFontSize[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndFontSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndFontSize[1] = {{ wxLua_wxRichTextCtrl_EndFontSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndFontSize }};
//     bool EndFontSize();
static int LUACALL wxLua_wxRichTextCtrl_EndFontSize(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndFontSize
    bool returns = (self->EndFontSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndItalic[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndItalic[1] = {{ wxLua_wxRichTextCtrl_EndItalic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndItalic }};
//     bool EndItalic();
static int LUACALL wxLua_wxRichTextCtrl_EndItalic(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndItalic
    bool returns = (self->EndItalic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndLeftIndent[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndLeftIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndLeftIndent[1] = {{ wxLua_wxRichTextCtrl_EndLeftIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndLeftIndent }};
//     bool EndLeftIndent();
static int LUACALL wxLua_wxRichTextCtrl_EndLeftIndent(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndLeftIndent
    bool returns = (self->EndLeftIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndLineSpacing[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndLineSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndLineSpacing[1] = {{ wxLua_wxRichTextCtrl_EndLineSpacing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndLineSpacing }};
//     bool EndLineSpacing();
static int LUACALL wxLua_wxRichTextCtrl_EndLineSpacing(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndLineSpacing
    bool returns = (self->EndLineSpacing());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndListStyle[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndListStyle[1] = {{ wxLua_wxRichTextCtrl_EndListStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndListStyle }};
//     bool EndListStyle();
static int LUACALL wxLua_wxRichTextCtrl_EndListStyle(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndListStyle
    bool returns = (self->EndListStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndNumberedBullet[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndNumberedBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndNumberedBullet[1] = {{ wxLua_wxRichTextCtrl_EndNumberedBullet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndNumberedBullet }};
//     bool EndNumberedBullet();
static int LUACALL wxLua_wxRichTextCtrl_EndNumberedBullet(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndNumberedBullet
    bool returns = (self->EndNumberedBullet());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndParagraphSpacing[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndParagraphSpacing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndParagraphSpacing[1] = {{ wxLua_wxRichTextCtrl_EndParagraphSpacing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndParagraphSpacing }};
//     bool EndParagraphSpacing();
static int LUACALL wxLua_wxRichTextCtrl_EndParagraphSpacing(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndParagraphSpacing
    bool returns = (self->EndParagraphSpacing());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndParagraphStyle[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndParagraphStyle[1] = {{ wxLua_wxRichTextCtrl_EndParagraphStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndParagraphStyle }};
//     bool EndParagraphStyle();
static int LUACALL wxLua_wxRichTextCtrl_EndParagraphStyle(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndParagraphStyle
    bool returns = (self->EndParagraphStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndRightIndent[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndRightIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndRightIndent[1] = {{ wxLua_wxRichTextCtrl_EndRightIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndRightIndent }};
//     bool EndRightIndent();
static int LUACALL wxLua_wxRichTextCtrl_EndRightIndent(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndRightIndent
    bool returns = (self->EndRightIndent());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndStandardBullet[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndStandardBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndStandardBullet[1] = {{ wxLua_wxRichTextCtrl_EndStandardBullet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndStandardBullet }};
//     bool EndStandardBullet();
static int LUACALL wxLua_wxRichTextCtrl_EndStandardBullet(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndStandardBullet
    bool returns = (self->EndStandardBullet());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndStyle[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndStyle[1] = {{ wxLua_wxRichTextCtrl_EndStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndStyle }};
//     virtual bool EndStyle();
static int LUACALL wxLua_wxRichTextCtrl_EndStyle(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndStyle
    bool returns = (self->EndStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndSuppressUndo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndSuppressUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndSuppressUndo[1] = {{ wxLua_wxRichTextCtrl_EndSuppressUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndSuppressUndo }};
//     virtual bool EndSuppressUndo();
static int LUACALL wxLua_wxRichTextCtrl_EndSuppressUndo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndSuppressUndo
    bool returns = (self->EndSuppressUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndSymbolBullet[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndSymbolBullet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndSymbolBullet[1] = {{ wxLua_wxRichTextCtrl_EndSymbolBullet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndSymbolBullet }};
//     bool EndSymbolBullet();
static int LUACALL wxLua_wxRichTextCtrl_EndSymbolBullet(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndSymbolBullet
    bool returns = (self->EndSymbolBullet());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndTextColour[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndTextColour[1] = {{ wxLua_wxRichTextCtrl_EndTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndTextColour }};
//     bool EndTextColour();
static int LUACALL wxLua_wxRichTextCtrl_EndTextColour(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndTextColour
    bool returns = (self->EndTextColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndURL[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndURL[1] = {{ wxLua_wxRichTextCtrl_EndURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndURL }};
//     bool EndURL();
static int LUACALL wxLua_wxRichTextCtrl_EndURL(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndURL
    bool returns = (self->EndURL());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_EndUnderline[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_EndUnderline(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_EndUnderline[1] = {{ wxLua_wxRichTextCtrl_EndUnderline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_EndUnderline }};
//     bool EndUnderline();
static int LUACALL wxLua_wxRichTextCtrl_EndUnderline(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call EndUnderline
    bool returns = (self->EndUnderline());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ExtendSelection[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ExtendSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ExtendSelection[1] = {{ wxLua_wxRichTextCtrl_ExtendSelection, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_ExtendSelection }};
//     virtual bool ExtendSelection(long oldPosition, long newPosition, int flags);
static int LUACALL wxLua_wxRichTextCtrl_ExtendSelection(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 4);
    // long newPosition
    long newPosition = (long)wxlua_getnumbertype(L, 3);
    // long oldPosition
    long oldPosition = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ExtendSelection
    bool returns = (self->ExtendSelection(oldPosition, newPosition, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_FindCaretPositionForCharacterPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCtrl_FindCaretPositionForCharacterPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_FindCaretPositionForCharacterPosition[1] = {{ wxLua_wxRichTextCtrl_FindCaretPositionForCharacterPosition, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_FindCaretPositionForCharacterPosition }};
//                                                    bool& caretLineStart);
static int LUACALL wxLua_wxRichTextCtrl_FindCaretPositionForCharacterPosition(lua_State *L)
{
    // bool caretLineStart
    bool * caretLineStart = (bool *)wxlua_touserdata(L, 5);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextParagraphLayoutBox);
    // int hitTestFlags
    int hitTestFlags = (int)wxlua_getnumbertype(L, 3);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call FindCaretPositionForCharacterPosition
    long returns = (self->FindCaretPositionForCharacterPosition(position, hitTestFlags, container, *caretLineStart));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_FindContainerAtPoint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_FindContainerAtPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_FindContainerAtPoint[1] = {{ wxLua_wxRichTextCtrl_FindContainerAtPoint, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_FindContainerAtPoint }};
//     wxRichTextParagraphLayoutBox* FindContainerAtPoint(const wxPoint pt, long& position, int& hit, wxRichTextObject* hitObj, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_FindContainerAtPoint(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : 0);
    // wxRichTextObject hitObj
    wxRichTextObject * hitObj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextObject);
    // int hit
    int * hit = (int *)wxlua_touserdata(L, 4);
    // long position
    long * position = (long *)wxlua_touserdata(L, 3);
    // const wxPoint pt
    const wxPoint pt = *(const wxPoint*)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call FindContainerAtPoint
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->FindContainerAtPoint(pt, *position, *hit, hitObj, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_FindNextWordPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_FindNextWordPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_FindNextWordPosition[1] = {{ wxLua_wxRichTextCtrl_FindNextWordPosition, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_FindNextWordPosition }};
//     virtual long FindNextWordPosition(int direction = 1) const;
static int LUACALL wxLua_wxRichTextCtrl_FindNextWordPosition(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int direction = 1
    int direction = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call FindNextWordPosition
    long returns = (self->FindNextWordPosition(direction));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_FindRangeForList[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCtrl_FindRangeForList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_FindRangeForList[1] = {{ wxLua_wxRichTextCtrl_FindRangeForList, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_FindRangeForList }};
//     virtual wxRichTextRange FindRangeForList(long pos, bool& isNumberedList);
static int LUACALL wxLua_wxRichTextCtrl_FindRangeForList(lua_State *L)
{
    // bool isNumberedList
    bool * isNumberedList = (bool *)wxlua_touserdata(L, 3);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call FindRangeForList
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->FindRangeForList(pos, *isNumberedList));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ForceDelayedLayout[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ForceDelayedLayout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ForceDelayedLayout[1] = {{ wxLua_wxRichTextCtrl_ForceDelayedLayout, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_ForceDelayedLayout }};
//     void ForceDelayedLayout();
static int LUACALL wxLua_wxRichTextCtrl_ForceDelayedLayout(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ForceDelayedLayout
    self->ForceDelayedLayout();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetAdjustedCaretPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetAdjustedCaretPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetAdjustedCaretPosition[1] = {{ wxLua_wxRichTextCtrl_GetAdjustedCaretPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetAdjustedCaretPosition }};
//     long GetAdjustedCaretPosition(long caretPos) const;
static int LUACALL wxLua_wxRichTextCtrl_GetAdjustedCaretPosition(lua_State *L)
{
    // long caretPos
    long caretPos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetAdjustedCaretPosition
    long returns = (self->GetAdjustedCaretPosition(caretPos));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static int LUACALL wxLua_wxRichTextCtrl_GetAvailableFontNames(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetAvailableFontNames[1] = {{ wxLua_wxRichTextCtrl_GetAvailableFontNames, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static const wxArrayString& GetAvailableFontNames();
static int LUACALL wxLua_wxRichTextCtrl_GetAvailableFontNames(lua_State *L)
{
    // call GetAvailableFontNames
    const wxArrayString* returns = (const wxArrayString*)&wxRichTextCtrl::GetAvailableFontNames();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBasicStyle[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetBasicStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetBasicStyle[1] = {{ wxLua_wxRichTextCtrl_GetBasicStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBasicStyle }};
//     virtual const wxRichTextAttr& GetBasicStyle() const;
static int LUACALL wxLua_wxRichTextCtrl_GetBasicStyle(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetBasicStyle
    const wxRichTextAttr* returns = (const wxRichTextAttr*)&self->GetBasicStyle();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBuffer1[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetBuffer1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetBuffer1[1] = {{ wxLua_wxRichTextCtrl_GetBuffer1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBuffer1 }};
//     const wxRichTextBuffer& GetBuffer() const;
static int LUACALL wxLua_wxRichTextCtrl_GetBuffer1(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetBuffer
    const wxRichTextBuffer* returns = (const wxRichTextBuffer*)&self->GetBuffer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBuffer[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetBuffer(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetBuffer[1] = {{ wxLua_wxRichTextCtrl_GetBuffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBuffer }};
//     wxRichTextBuffer& GetBuffer();
static int LUACALL wxLua_wxRichTextCtrl_GetBuffer(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetBuffer
    wxRichTextBuffer* returns = (wxRichTextBuffer*)&self->GetBuffer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBufferBitmap1[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetBufferBitmap1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetBufferBitmap1[1] = {{ wxLua_wxRichTextCtrl_GetBufferBitmap1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBufferBitmap1 }};
//     wxBitmap& GetBufferBitmap();
static int LUACALL wxLua_wxRichTextCtrl_GetBufferBitmap1(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetBufferBitmap
    wxBitmap* returns = (wxBitmap*)&self->GetBufferBitmap();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBufferBitmap[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetBufferBitmap(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetBufferBitmap[1] = {{ wxLua_wxRichTextCtrl_GetBufferBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBufferBitmap }};
//     const wxBitmap& GetBufferBitmap() const;
static int LUACALL wxLua_wxRichTextCtrl_GetBufferBitmap(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetBufferBitmap
    const wxBitmap* returns = (const wxBitmap*)&self->GetBufferBitmap();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretAtLineStart[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetCaretAtLineStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretAtLineStart[1] = {{ wxLua_wxRichTextCtrl_GetCaretAtLineStart, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretAtLineStart }};
//     bool GetCaretAtLineStart() const;
static int LUACALL wxLua_wxRichTextCtrl_GetCaretAtLineStart(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetCaretAtLineStart
    bool returns = (self->GetCaretAtLineStart());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretPosition[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetCaretPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretPosition[1] = {{ wxLua_wxRichTextCtrl_GetCaretPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretPosition }};
//     long GetCaretPosition() const;
static int LUACALL wxLua_wxRichTextCtrl_GetCaretPosition(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetCaretPosition
    long returns = (self->GetCaretPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretPositionForDefaultStyle[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetCaretPositionForDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretPositionForDefaultStyle[1] = {{ wxLua_wxRichTextCtrl_GetCaretPositionForDefaultStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretPositionForDefaultStyle }};
//     long GetCaretPositionForDefaultStyle() const;
static int LUACALL wxLua_wxRichTextCtrl_GetCaretPositionForDefaultStyle(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetCaretPositionForDefaultStyle
    long returns = (self->GetCaretPositionForDefaultStyle());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretPositionForIndex[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetCaretPositionForIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretPositionForIndex[1] = {{ wxLua_wxRichTextCtrl_GetCaretPositionForIndex, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCaretPositionForIndex }};
// %override wxLua_wxRichTextCtrl_GetCaretPositionForIndex
// C++: bool GetCaretPositionForIndex(long position, wxRect& rect, wxRichTextParagraphLayoutBox* container = NULL);
// Lua: %override [bool, wxRect] GetCaretPositionForIndex(long position, wxRect& rect, wxRichTextParagraphLayoutBox* container = NULL);
static int LUACALL wxLua_wxRichTextCtrl_GetCaretPositionForIndex(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextParagraphLayoutBox container = NULL
    wxRichTextParagraphLayoutBox * container = (argCount >= 3 ? (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox) : NULL);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // allocate a new object
    wxRect *rectp = new wxRect();
    // call GetCaretPositionForIndex
    bool returns = (self->GetCaretPositionForIndex(position, *rectp, container));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, rectp, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, rectp, wxluatype_wxRect);

    return 2;
}



#if (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCommandProcessor[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetCommandProcessor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetCommandProcessor[1] = {{ wxLua_wxRichTextCtrl_GetCommandProcessor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetCommandProcessor }};
//     wxCommandProcessor* GetCommandProcessor() const;
static int LUACALL wxLua_wxRichTextCtrl_GetCommandProcessor(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetCommandProcessor
    wxCommandProcessor* returns = (wxCommandProcessor*)self->GetCommandProcessor();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCommandProcessor);

    return 1;
}

#endif // (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenu[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetContextMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenu[1] = {{ wxLua_wxRichTextCtrl_GetContextMenu, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenu }};
//     wxMenu* GetContextMenu() const;
static int LUACALL wxLua_wxRichTextCtrl_GetContextMenu(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetContextMenu
    wxMenu* returns = (wxMenu*)self->GetContextMenu();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxMenu);

    return 1;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1[1] = {{ wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1 }};
//     const wxRichTextContextMenuPropertiesInfo& GetContextMenuPropertiesInfo() const;
static int LUACALL wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetContextMenuPropertiesInfo
    const wxRichTextContextMenuPropertiesInfo* returns = (const wxRichTextContextMenuPropertiesInfo*)&self->GetContextMenuPropertiesInfo();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextContextMenuPropertiesInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo[1] = {{ wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo }};
//     wxRichTextContextMenuPropertiesInfo& GetContextMenuPropertiesInfo();
static int LUACALL wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetContextMenuPropertiesInfo
    wxRichTextContextMenuPropertiesInfo* returns = (wxRichTextContextMenuPropertiesInfo*)&self->GetContextMenuPropertiesInfo();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextContextMenuPropertiesInfo);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDefaultStyleEx[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetDefaultStyleEx(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetDefaultStyleEx[1] = {{ wxLua_wxRichTextCtrl_GetDefaultStyleEx, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDefaultStyleEx }};
//     virtual const wxRichTextAttr& GetDefaultStyleEx() const;
static int LUACALL wxLua_wxRichTextCtrl_GetDefaultStyleEx(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetDefaultStyleEx
    const wxRichTextAttr* returns = (const wxRichTextAttr*)&self->GetDefaultStyleEx();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDelayedLayoutThreshold[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetDelayedLayoutThreshold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetDelayedLayoutThreshold[1] = {{ wxLua_wxRichTextCtrl_GetDelayedLayoutThreshold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDelayedLayoutThreshold }};
//     long GetDelayedLayoutThreshold() const;
static int LUACALL wxLua_wxRichTextCtrl_GetDelayedLayoutThreshold(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetDelayedLayoutThreshold
    long returns = (self->GetDelayedLayoutThreshold());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDimensionScale[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetDimensionScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetDimensionScale[1] = {{ wxLua_wxRichTextCtrl_GetDimensionScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDimensionScale }};
//     double GetDimensionScale() const;
static int LUACALL wxLua_wxRichTextCtrl_GetDimensionScale(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetDimensionScale
    double returns = (self->GetDimensionScale());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDragStartPoint[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetDragStartPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetDragStartPoint[1] = {{ wxLua_wxRichTextCtrl_GetDragStartPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDragStartPoint }};
//     wxPoint GetDragStartPoint() const;
static int LUACALL wxLua_wxRichTextCtrl_GetDragStartPoint(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetDragStartPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetDragStartPoint());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDragStartTime[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetDragStartTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetDragStartTime[1] = {{ wxLua_wxRichTextCtrl_GetDragStartTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDragStartTime }};
//     wxDateTime GetDragStartTime() const;
static int LUACALL wxLua_wxRichTextCtrl_GetDragStartTime(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetDragStartTime
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetDragStartTime());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDateTime);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDragging[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetDragging(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetDragging[1] = {{ wxLua_wxRichTextCtrl_GetDragging, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetDragging }};
//     bool GetDragging() const;
static int LUACALL wxLua_wxRichTextCtrl_GetDragging(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetDragging
    bool returns = (self->GetDragging());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFilename[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFilename(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFilename[1] = {{ wxLua_wxRichTextCtrl_GetFilename, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFilename }};
//     wxString GetFilename() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFilename(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFilename
    wxString returns = (self->GetFilename());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFirstVisiblePoint[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFirstVisiblePoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFirstVisiblePoint[1] = {{ wxLua_wxRichTextCtrl_GetFirstVisiblePoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFirstVisiblePoint }};
//     wxPoint GetFirstVisiblePoint() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFirstVisiblePoint(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFirstVisiblePoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetFirstVisiblePoint());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFirstVisiblePosition[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFirstVisiblePosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFirstVisiblePosition[1] = {{ wxLua_wxRichTextCtrl_GetFirstVisiblePosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFirstVisiblePosition }};
//     long GetFirstVisiblePosition() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFirstVisiblePosition(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFirstVisiblePosition
    long returns = (self->GetFirstVisiblePosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFocusObject[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFocusObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFocusObject[1] = {{ wxLua_wxRichTextCtrl_GetFocusObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFocusObject }};
//     wxRichTextParagraphLayoutBox* GetFocusObject() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFocusObject(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFocusObject
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->GetFocusObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFontScale[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFontScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFontScale[1] = {{ wxLua_wxRichTextCtrl_GetFontScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFontScale }};
//     double GetFontScale() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFontScale(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFontScale
    double returns = (self->GetFontScale());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFullLayoutRequired[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFullLayoutRequired(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFullLayoutRequired[1] = {{ wxLua_wxRichTextCtrl_GetFullLayoutRequired, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFullLayoutRequired }};
//     bool GetFullLayoutRequired() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFullLayoutRequired(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFullLayoutRequired
    bool returns = (self->GetFullLayoutRequired());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFullLayoutSavedPosition[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFullLayoutSavedPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFullLayoutSavedPosition[1] = {{ wxLua_wxRichTextCtrl_GetFullLayoutSavedPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFullLayoutSavedPosition }};
//     long GetFullLayoutSavedPosition() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFullLayoutSavedPosition(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFullLayoutSavedPosition
    long returns = (self->GetFullLayoutSavedPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFullLayoutTime[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetFullLayoutTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetFullLayoutTime[1] = {{ wxLua_wxRichTextCtrl_GetFullLayoutTime, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetFullLayoutTime }};
//     wxLongLong GetFullLayoutTime() const;
static int LUACALL wxLua_wxRichTextCtrl_GetFullLayoutTime(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetFullLayoutTime
    // allocate a new object using the copy constructor
    wxLongLong* returns = new wxLongLong(self->GetFullLayoutTime());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxLongLong);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLongLong);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetHandlerFlags[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetHandlerFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetHandlerFlags[1] = {{ wxLua_wxRichTextCtrl_GetHandlerFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetHandlerFlags }};
//     int GetHandlerFlags() const;
static int LUACALL wxLua_wxRichTextCtrl_GetHandlerFlags(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetHandlerFlags
    int returns = (self->GetHandlerFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetInsertionPoint[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetInsertionPoint[1] = {{ wxLua_wxRichTextCtrl_GetInsertionPoint, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetInsertionPoint }};
//     virtual long GetInsertionPoint() const;
static int LUACALL wxLua_wxRichTextCtrl_GetInsertionPoint(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetInsertionPoint
    long returns = (self->GetInsertionPoint());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetInternalSelectionRange[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetInternalSelectionRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetInternalSelectionRange[1] = {{ wxLua_wxRichTextCtrl_GetInternalSelectionRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetInternalSelectionRange }};
//     wxRichTextRange GetInternalSelectionRange() const;
static int LUACALL wxLua_wxRichTextCtrl_GetInternalSelectionRange(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetInternalSelectionRange
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->GetInternalSelectionRange());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLastPosition[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetLastPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetLastPosition[1] = {{ wxLua_wxRichTextCtrl_GetLastPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLastPosition }};
//     virtual wxTextPos GetLastPosition() const;
static int LUACALL wxLua_wxRichTextCtrl_GetLastPosition(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetLastPosition
    wxTextPos returns = (self->GetLastPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLineLength[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetLineLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetLineLength[1] = {{ wxLua_wxRichTextCtrl_GetLineLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLineLength }};
//     virtual int GetLineLength(long lineNo) const ;
static int LUACALL wxLua_wxRichTextCtrl_GetLineLength(lua_State *L)
{
    // long lineNo
    long lineNo = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetLineLength
    int returns = (self->GetLineLength(lineNo));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLineText[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetLineText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetLineText[1] = {{ wxLua_wxRichTextCtrl_GetLineText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLineText }};
//     virtual wxString GetLineText(long lineNo) const ;
static int LUACALL wxLua_wxRichTextCtrl_GetLineText(lua_State *L)
{
    // long lineNo
    long lineNo = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetLineText
    wxString returns = (self->GetLineText(lineNo));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLogicalPoint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetLogicalPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetLogicalPoint[1] = {{ wxLua_wxRichTextCtrl_GetLogicalPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetLogicalPoint }};
//     wxPoint GetLogicalPoint(const wxPoint& ptPhysical) const;
static int LUACALL wxLua_wxRichTextCtrl_GetLogicalPoint(lua_State *L)
{
    // const wxPoint ptPhysical
    const wxPoint * ptPhysical = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetLogicalPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetLogicalPoint(*ptPhysical));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetNumberOfLines[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetNumberOfLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetNumberOfLines[1] = {{ wxLua_wxRichTextCtrl_GetNumberOfLines, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetNumberOfLines }};
//     virtual int GetNumberOfLines() const ;
static int LUACALL wxLua_wxRichTextCtrl_GetNumberOfLines(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetNumberOfLines
    int returns = (self->GetNumberOfLines());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetPhysicalPoint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetPhysicalPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetPhysicalPoint[1] = {{ wxLua_wxRichTextCtrl_GetPhysicalPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetPhysicalPoint }};
//     wxPoint GetPhysicalPoint(const wxPoint& ptLogical) const;
static int LUACALL wxLua_wxRichTextCtrl_GetPhysicalPoint(lua_State *L)
{
    // const wxPoint ptLogical
    const wxPoint * ptLogical = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetPhysicalPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPhysicalPoint(*ptLogical));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetPreDrag[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetPreDrag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetPreDrag[1] = {{ wxLua_wxRichTextCtrl_GetPreDrag, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetPreDrag }};
//     bool GetPreDrag() const;
static int LUACALL wxLua_wxRichTextCtrl_GetPreDrag(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetPreDrag
    bool returns = (self->GetPreDrag());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetPropertiesMenuLabel[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetPropertiesMenuLabel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetPropertiesMenuLabel[1] = {{ wxLua_wxRichTextCtrl_GetPropertiesMenuLabel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetPropertiesMenuLabel }};
//     virtual wxString GetPropertiesMenuLabel(wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextCtrl_GetPropertiesMenuLabel(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetPropertiesMenuLabel
    wxString returns = (self->GetPropertiesMenuLabel(obj));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetRange[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetRange[1] = {{ wxLua_wxRichTextCtrl_GetRange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetRange }};
//     virtual wxString GetRange(long from, long to) const;
static int LUACALL wxLua_wxRichTextCtrl_GetRange(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetRange
    wxString returns = (self->GetRange(from, to));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScale[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetScale[1] = {{ wxLua_wxRichTextCtrl_GetScale, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScale }};
//     double GetScale() const;
static int LUACALL wxLua_wxRichTextCtrl_GetScale(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetScale
    double returns = (self->GetScale());
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScaledPoint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetScaledPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetScaledPoint[1] = {{ wxLua_wxRichTextCtrl_GetScaledPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScaledPoint }};
//     wxPoint GetScaledPoint(const wxPoint& pt) const;
static int LUACALL wxLua_wxRichTextCtrl_GetScaledPoint(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetScaledPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetScaledPoint(*pt));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScaledRect[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetScaledRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetScaledRect[1] = {{ wxLua_wxRichTextCtrl_GetScaledRect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScaledRect }};
//     wxRect GetScaledRect(const wxRect& rect) const;
static int LUACALL wxLua_wxRichTextCtrl_GetScaledRect(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetScaledRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetScaledRect(*rect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScaledSize[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetScaledSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetScaledSize[1] = {{ wxLua_wxRichTextCtrl_GetScaledSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetScaledSize }};
//     wxSize GetScaledSize(const wxSize& sz) const;
static int LUACALL wxLua_wxRichTextCtrl_GetScaledSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetScaledSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetScaledSize(*sz));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection2[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetSelection2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection2[1] = {{ wxLua_wxRichTextCtrl_GetSelection2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection2 }};
//     wxRichTextSelection& GetSelection();
static int LUACALL wxLua_wxRichTextCtrl_GetSelection2(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetSelection
    wxRichTextSelection* returns = (wxRichTextSelection*)&self->GetSelection();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextSelection);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection1[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetSelection1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection1[1] = {{ wxLua_wxRichTextCtrl_GetSelection1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection1 }};
//     const wxRichTextSelection& GetSelection() const;
static int LUACALL wxLua_wxRichTextCtrl_GetSelection1(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetSelection
    const wxRichTextSelection* returns = (const wxRichTextSelection*)&self->GetSelection();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextSelection);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetSelection(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection[1] = {{ wxLua_wxRichTextCtrl_GetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection }};
//     virtual void GetSelection(long* from, long* to) const;
static int LUACALL wxLua_wxRichTextCtrl_GetSelection(lua_State *L)
{
    // long to
    long * to = (long *)wxlua_touserdata(L, 3);
    // long from
    long * from = (long *)wxlua_touserdata(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetSelection
    self->GetSelection(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelectionAnchor[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetSelectionAnchor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetSelectionAnchor[1] = {{ wxLua_wxRichTextCtrl_GetSelectionAnchor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelectionAnchor }};
//     long GetSelectionAnchor() const;
static int LUACALL wxLua_wxRichTextCtrl_GetSelectionAnchor(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetSelectionAnchor
    long returns = (self->GetSelectionAnchor());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelectionAnchorObject[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetSelectionAnchorObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetSelectionAnchorObject[1] = {{ wxLua_wxRichTextCtrl_GetSelectionAnchorObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelectionAnchorObject }};
//     wxRichTextObject* GetSelectionAnchorObject() const;
static int LUACALL wxLua_wxRichTextCtrl_GetSelectionAnchorObject(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetSelectionAnchorObject
    wxRichTextObject* returns = (wxRichTextObject*)self->GetSelectionAnchorObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelectionRange[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetSelectionRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetSelectionRange[1] = {{ wxLua_wxRichTextCtrl_GetSelectionRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelectionRange }};
//     wxRichTextRange GetSelectionRange() const;
static int LUACALL wxLua_wxRichTextCtrl_GetSelectionRange(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetSelectionRange
    // allocate a new object using the copy constructor
    wxRichTextRange* returns = new wxRichTextRange(self->GetSelectionRange());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextRange);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStringSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStringSelection[1] = {{ wxLua_wxRichTextCtrl_GetStringSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStringSelection }};
//     virtual wxString GetStringSelection() const;
static int LUACALL wxLua_wxRichTextCtrl_GetStringSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetStringSelection
    wxString returns = (self->GetStringSelection());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyle1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStyle1[1] = {{ wxLua_wxRichTextCtrl_GetStyle1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyle1 }};
// %override wxLua_wxRichTextCtrl_GetStyle1
// C++: bool GetStyle(long position, wxRichTextAttr& style, wxRichTextParagraphLayoutBox* container);
// Lua: [bool, wxRichTextAttr] GetStyle(long position, wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextCtrl_GetStyle1(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    //  Call GetStyle
    bool returns = self->GetStyle(position, *stylep, container);
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStyle[1] = {{ wxLua_wxRichTextCtrl_GetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyle }};
// %override wxLua_wxRichTextCtrl_GetStyle
// C++: bool GetStyle(long position, wxRichTextAttr& style);
// Lua: [bool, wxRichTextAttr] GetStyle(long position);
static int LUACALL wxLua_wxRichTextCtrl_GetStyle(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    //  Call GetStyle
    bool returns = self->GetStyle(position, *stylep);
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleForRange1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetStyleForRange1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleForRange1[1] = {{ wxLua_wxRichTextCtrl_GetStyleForRange1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleForRange1 }};
// %override wxLua_wxRichTextCtrl_GetStyleForRange1
// C++: bool GetStyleForRange(const wxRichTextRange& range, wxRichTextAttr& style, wxRichTextParagraphLayoutBox* container);
// Lua: [bool, wxRichTextAttr] GetStyleForRange(const wxRichTextRange& range, wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextCtrl_GetStyleForRange1(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    // call GetStyleForRange
    bool returns = (self->GetStyleForRange(*range, *stylep, container));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleForRange[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetStyleForRange(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleForRange[1] = {{ wxLua_wxRichTextCtrl_GetStyleForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleForRange }};
// %override wxLua_wxRichTextCtrl_GetStyleForRange
// C++: bool GetStyleForRange(const wxRichTextRange& range, wxRichTextAttr& style);
// Lua: [bool, wxRichTextAttr] GetStyleForRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextCtrl_GetStyleForRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    // call GetStyleForRange
    bool returns = (self->GetStyleForRange(*range, *stylep));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleSheet[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleSheet[1] = {{ wxLua_wxRichTextCtrl_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleSheet }};
//     wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextCtrl_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}


#if (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetTextCursor[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetTextCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetTextCursor[1] = {{ wxLua_wxRichTextCtrl_GetTextCursor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetTextCursor }};
//     wxCursor GetTextCursor() const;
static int LUACALL wxLua_wxRichTextCtrl_GetTextCursor(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetTextCursor
    // allocate a new object using the copy constructor
    wxCursor* returns = new wxCursor(self->GetTextCursor());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCursor);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetURLCursor[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetURLCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetURLCursor[1] = {{ wxLua_wxRichTextCtrl_GetURLCursor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetURLCursor }};
//     wxCursor GetURLCursor() const;
static int LUACALL wxLua_wxRichTextCtrl_GetURLCursor(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetURLCursor
    // allocate a new object using the copy constructor
    wxCursor* returns = new wxCursor(self->GetURLCursor());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCursor);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCursor);

    return 1;
}

#endif // (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUncombinedStyle1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetUncombinedStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetUncombinedStyle1[1] = {{ wxLua_wxRichTextCtrl_GetUncombinedStyle1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUncombinedStyle1 }};
// %override wxLua_wxRichTextCtrl_GetUncombinedStyle1
// C++: bool GetUncombinedStyle(long position, wxRichTextAttr& style, wxRichTextParagraphLayoutBox* container);
// Lua: [bool, wxRichTextAttr] GetUncombinedStyle(long position, wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextCtrl_GetUncombinedStyle1(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextParagraphLayoutBox);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    // call GetUncombinedStyle
    bool returns = (self->GetUncombinedStyle(position, *stylep, container));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}



static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUncombinedStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetUncombinedStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetUncombinedStyle[1] = {{ wxLua_wxRichTextCtrl_GetUncombinedStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUncombinedStyle }};
// %override wxLua_wxRichTextCtrl_GetUncombinedStyle
// C++: bool GetUncombinedStyle(long position, wxRichTextAttr& style);
// Lua: [bool, wxRichTextAttr] GetUncombinedStyle(long position);
static int LUACALL wxLua_wxRichTextCtrl_GetUncombinedStyle(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // allocate a new object
    wxRichTextAttr *stylep = new wxRichTextAttr();
    // call GetUncombinedStyle
    bool returns = (self->GetUncombinedStyle(position, *stylep));
    // push the result flag
    lua_pushboolean(L, returns);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, stylep, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, stylep, wxluatype_wxRichTextAttr);

    return 2;
}



#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUnscaledPoint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetUnscaledPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetUnscaledPoint[1] = {{ wxLua_wxRichTextCtrl_GetUnscaledPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUnscaledPoint }};
//     wxPoint GetUnscaledPoint(const wxPoint& pt) const;
static int LUACALL wxLua_wxRichTextCtrl_GetUnscaledPoint(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetUnscaledPoint
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetUnscaledPoint(*pt));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUnscaledRect[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetUnscaledRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetUnscaledRect[1] = {{ wxLua_wxRichTextCtrl_GetUnscaledRect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUnscaledRect }};
//     wxRect GetUnscaledRect(const wxRect& rect) const;
static int LUACALL wxLua_wxRichTextCtrl_GetUnscaledRect(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetUnscaledRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetUnscaledRect(*rect));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUnscaledSize[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetUnscaledSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetUnscaledSize[1] = {{ wxLua_wxRichTextCtrl_GetUnscaledSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUnscaledSize }};
//     wxSize GetUnscaledSize(const wxSize& sz) const;
static int LUACALL wxLua_wxRichTextCtrl_GetUnscaledSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetUnscaledSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetUnscaledSize(*sz));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetVerticalScrollbarEnabled[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetVerticalScrollbarEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetVerticalScrollbarEnabled[1] = {{ wxLua_wxRichTextCtrl_GetVerticalScrollbarEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetVerticalScrollbarEnabled }};
//     virtual bool GetVerticalScrollbarEnabled() const;
static int LUACALL wxLua_wxRichTextCtrl_GetVerticalScrollbarEnabled(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetVerticalScrollbarEnabled
    bool returns = (self->GetVerticalScrollbarEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetVirtualAttributesEnabled[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetVirtualAttributesEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetVirtualAttributesEnabled[1] = {{ wxLua_wxRichTextCtrl_GetVirtualAttributesEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetVirtualAttributesEnabled }};
//     bool GetVirtualAttributesEnabled() const;
static int LUACALL wxLua_wxRichTextCtrl_GetVirtualAttributesEnabled(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetVirtualAttributesEnabled
    bool returns = (self->GetVirtualAttributesEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_GetVisibleLineForCaretPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_GetVisibleLineForCaretPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetVisibleLineForCaretPosition[1] = {{ wxLua_wxRichTextCtrl_GetVisibleLineForCaretPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetVisibleLineForCaretPosition }};
//     wxRichTextLine* GetVisibleLineForCaretPosition(long caretPosition) const;
static int LUACALL wxLua_wxRichTextCtrl_GetVisibleLineForCaretPosition(lua_State *L)
{
    // long caretPosition
    long caretPosition = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetVisibleLineForCaretPosition
    wxRichTextLine* returns = (wxRichTextLine*)self->GetVisibleLineForCaretPosition(caretPosition);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextLine);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_HasCharacterAttributes[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_HasCharacterAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_HasCharacterAttributes[1] = {{ wxLua_wxRichTextCtrl_HasCharacterAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_HasCharacterAttributes }};
//     virtual bool HasCharacterAttributes(const wxRichTextRange& range, const wxRichTextAttr& style) const;
static int LUACALL wxLua_wxRichTextCtrl_HasCharacterAttributes(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call HasCharacterAttributes
    bool returns = (self->HasCharacterAttributes(*range, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_HasParagraphAttributes[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_HasParagraphAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_HasParagraphAttributes[1] = {{ wxLua_wxRichTextCtrl_HasParagraphAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_HasParagraphAttributes }};
//     virtual bool HasParagraphAttributes(const wxRichTextRange& range, const wxRichTextAttr& style) const;
static int LUACALL wxLua_wxRichTextCtrl_HasParagraphAttributes(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call HasParagraphAttributes
    bool returns = (self->HasParagraphAttributes(*range, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_HasSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_HasSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_HasSelection[1] = {{ wxLua_wxRichTextCtrl_HasSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_HasSelection }};
//     virtual bool HasSelection() const;
static int LUACALL wxLua_wxRichTextCtrl_HasSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call HasSelection
    bool returns = (self->HasSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_HasUnfocusedSelection[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_HasUnfocusedSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_HasUnfocusedSelection[1] = {{ wxLua_wxRichTextCtrl_HasUnfocusedSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_HasUnfocusedSelection }};
//     virtual bool HasUnfocusedSelection() const;
static int LUACALL wxLua_wxRichTextCtrl_HasUnfocusedSelection(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call HasUnfocusedSelection
    bool returns = (self->HasUnfocusedSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_HitTest1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCtrl_HitTest1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_HitTest1[1] = {{ wxLua_wxRichTextCtrl_HitTest1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_HitTest1 }};
//                                             wxTextCoord *row) const;
static int LUACALL wxLua_wxRichTextCtrl_HitTest1(lua_State *L)
{
    // wxTextCoord row
    wxTextCoord * row = (wxTextCoord *)wxlua_touserdata(L, 4);
    // wxTextCoord col
    wxTextCoord * col = (wxTextCoord *)wxlua_touserdata(L, 3);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call HitTest
    wxTextCtrlHitTestResult returns = (self->HitTest(*pt, col, row));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_HitTest[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCtrl_HitTest(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_HitTest[1] = {{ wxLua_wxRichTextCtrl_HitTest, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_HitTest }};
//     virtual wxTextCtrlHitTestResult HitTest(const wxPoint& pt, long *pos) const;
static int LUACALL wxLua_wxRichTextCtrl_HitTest(lua_State *L)
{
    // long pos
    long * pos = (long *)wxlua_touserdata(L, 3);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call HitTest
    wxTextCtrlHitTestResult returns = (self->HitTest(*pt, pos));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Init[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Init[1] = {{ wxLua_wxRichTextCtrl_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextCtrl_Init(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Invalidate[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Invalidate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Invalidate[1] = {{ wxLua_wxRichTextCtrl_Invalidate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Invalidate }};
//     void Invalidate();
static int LUACALL wxLua_wxRichTextCtrl_Invalidate(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Invalidate
    self->Invalidate();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsDefaultStyleShowing[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsDefaultStyleShowing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsDefaultStyleShowing[1] = {{ wxLua_wxRichTextCtrl_IsDefaultStyleShowing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsDefaultStyleShowing }};
//     bool IsDefaultStyleShowing() const;
static int LUACALL wxLua_wxRichTextCtrl_IsDefaultStyleShowing(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsDefaultStyleShowing
    bool returns = (self->IsDefaultStyleShowing());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsEditable[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsEditable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsEditable[1] = {{ wxLua_wxRichTextCtrl_IsEditable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsEditable }};
//     virtual bool IsEditable() const ;
static int LUACALL wxLua_wxRichTextCtrl_IsEditable(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsEditable
    bool returns = (self->IsEditable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsModified[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsModified(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsModified[1] = {{ wxLua_wxRichTextCtrl_IsModified, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsModified }};
//     virtual bool IsModified() const ;
static int LUACALL wxLua_wxRichTextCtrl_IsModified(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsModified
    bool returns = (self->IsModified());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsMultiLine[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsMultiLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsMultiLine[1] = {{ wxLua_wxRichTextCtrl_IsMultiLine, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsMultiLine }};
//     bool IsMultiLine() const;
static int LUACALL wxLua_wxRichTextCtrl_IsMultiLine(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsMultiLine
    bool returns = (self->IsMultiLine());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsPositionVisible[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsPositionVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsPositionVisible[1] = {{ wxLua_wxRichTextCtrl_IsPositionVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsPositionVisible }};
//     bool IsPositionVisible(long pos) const;
static int LUACALL wxLua_wxRichTextCtrl_IsPositionVisible(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsPositionVisible
    bool returns = (self->IsPositionVisible(pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionAligned[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionAligned(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionAligned[1] = {{ wxLua_wxRichTextCtrl_IsSelectionAligned, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionAligned }};
//     virtual bool IsSelectionAligned(wxTextAttrAlignment alignment);
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionAligned(lua_State *L)
{
    // wxTextAttrAlignment alignment
    wxTextAttrAlignment alignment = (wxTextAttrAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsSelectionAligned
    bool returns = (self->IsSelectionAligned(alignment));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionBold[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionBold[1] = {{ wxLua_wxRichTextCtrl_IsSelectionBold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionBold }};
//     virtual bool IsSelectionBold();
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionBold(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsSelectionBold
    bool returns = (self->IsSelectionBold());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionItalics[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionItalics(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionItalics[1] = {{ wxLua_wxRichTextCtrl_IsSelectionItalics, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionItalics }};
//     virtual bool IsSelectionItalics();
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionItalics(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsSelectionItalics
    bool returns = (self->IsSelectionItalics());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionUnderlined[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionUnderlined(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionUnderlined[1] = {{ wxLua_wxRichTextCtrl_IsSelectionUnderlined, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSelectionUnderlined }};
//     virtual bool IsSelectionUnderlined();
static int LUACALL wxLua_wxRichTextCtrl_IsSelectionUnderlined(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsSelectionUnderlined
    bool returns = (self->IsSelectionUnderlined());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSingleLine[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_IsSingleLine(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_IsSingleLine[1] = {{ wxLua_wxRichTextCtrl_IsSingleLine, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_IsSingleLine }};
//     bool IsSingleLine() const;
static int LUACALL wxLua_wxRichTextCtrl_IsSingleLine(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call IsSingleLine
    bool returns = (self->IsSingleLine());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_KeyboardNavigate[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_KeyboardNavigate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_KeyboardNavigate[1] = {{ wxLua_wxRichTextCtrl_KeyboardNavigate, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_KeyboardNavigate }};
//     virtual bool KeyboardNavigate(int keyCode, int flags);
static int LUACALL wxLua_wxRichTextCtrl_KeyboardNavigate(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 3);
    // int keyCode
    int keyCode = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call KeyboardNavigate
    bool returns = (self->KeyboardNavigate(keyCode, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_LayoutContent[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_LayoutContent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_LayoutContent[1] = {{ wxLua_wxRichTextCtrl_LayoutContent, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_LayoutContent }};
//     virtual bool LayoutContent(bool onlyVisibleRect = false);
static int LUACALL wxLua_wxRichTextCtrl_LayoutContent(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool onlyVisibleRect = false
    bool onlyVisibleRect = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call LayoutContent
    bool returns = (self->LayoutContent(onlyVisibleRect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_LineBreak[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_LineBreak(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_LineBreak[1] = {{ wxLua_wxRichTextCtrl_LineBreak, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_LineBreak }};
//     virtual bool LineBreak();
static int LUACALL wxLua_wxRichTextCtrl_LineBreak(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call LineBreak
    bool returns = (self->LineBreak());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MarkDirty[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MarkDirty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MarkDirty[1] = {{ wxLua_wxRichTextCtrl_MarkDirty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_MarkDirty }};
//     virtual void MarkDirty();
static int LUACALL wxLua_wxRichTextCtrl_MarkDirty(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MarkDirty
    self->MarkDirty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveCaret[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveCaret(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveCaret[1] = {{ wxLua_wxRichTextCtrl_MoveCaret, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveCaret }};
//     virtual bool MoveCaret(long pos, bool showAtLineStart = false, wxRichTextParagraphLayoutBox* container = NULL);
static int LUACALL wxLua_wxRichTextCtrl_MoveCaret(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextParagraphLayoutBox container = NULL
    wxRichTextParagraphLayoutBox * container = (argCount >= 4 ? (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextParagraphLayoutBox) : NULL);
    // bool showAtLineStart = false
    bool showAtLineStart = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveCaret
    bool returns = (self->MoveCaret(pos, showAtLineStart, container));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveCaretBack[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveCaretBack(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveCaretBack[1] = {{ wxLua_wxRichTextCtrl_MoveCaretBack, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveCaretBack }};
//     void MoveCaretBack(long oldPosition) ;
static int LUACALL wxLua_wxRichTextCtrl_MoveCaretBack(lua_State *L)
{
    // long oldPosition
    long oldPosition = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveCaretBack
    self->MoveCaretBack(oldPosition);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveCaretForward[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveCaretForward(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveCaretForward[1] = {{ wxLua_wxRichTextCtrl_MoveCaretForward, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveCaretForward }};
//     void MoveCaretForward(long oldPosition) ;
static int LUACALL wxLua_wxRichTextCtrl_MoveCaretForward(lua_State *L)
{
    // long oldPosition
    long oldPosition = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveCaretForward
    self->MoveCaretForward(oldPosition);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveDown[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveDown[1] = {{ wxLua_wxRichTextCtrl_MoveDown, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveDown }};
//     virtual bool MoveDown(int noLines = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveDown(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noLines = 1
    int noLines = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveDown
    bool returns = (self->MoveDown(noLines, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveEnd[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveEnd[1] = {{ wxLua_wxRichTextCtrl_MoveEnd, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveEnd }};
//     virtual bool MoveEnd(int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveEnd(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveEnd
    bool returns = (self->MoveEnd(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveHome[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveHome(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveHome[1] = {{ wxLua_wxRichTextCtrl_MoveHome, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveHome }};
//     virtual bool MoveHome(int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveHome(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveHome
    bool returns = (self->MoveHome(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveLeft[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveLeft[1] = {{ wxLua_wxRichTextCtrl_MoveLeft, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveLeft }};
//     virtual bool MoveLeft(int noPositions = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveLeft(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noPositions = 1
    int noPositions = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveLeft
    bool returns = (self->MoveLeft(noPositions, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveRight[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveRight[1] = {{ wxLua_wxRichTextCtrl_MoveRight, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveRight }};
//     virtual bool MoveRight(int noPositions = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveRight(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noPositions = 1
    int noPositions = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveRight
    bool returns = (self->MoveRight(noPositions, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToLineEnd[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveToLineEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveToLineEnd[1] = {{ wxLua_wxRichTextCtrl_MoveToLineEnd, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToLineEnd }};
//     virtual bool MoveToLineEnd(int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveToLineEnd(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveToLineEnd
    bool returns = (self->MoveToLineEnd(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToLineStart[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveToLineStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveToLineStart[1] = {{ wxLua_wxRichTextCtrl_MoveToLineStart, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToLineStart }};
//     virtual bool MoveToLineStart(int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveToLineStart(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveToLineStart
    bool returns = (self->MoveToLineStart(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToParagraphEnd[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveToParagraphEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveToParagraphEnd[1] = {{ wxLua_wxRichTextCtrl_MoveToParagraphEnd, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToParagraphEnd }};
//     virtual bool MoveToParagraphEnd(int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveToParagraphEnd(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveToParagraphEnd
    bool returns = (self->MoveToParagraphEnd(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToParagraphStart[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveToParagraphStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveToParagraphStart[1] = {{ wxLua_wxRichTextCtrl_MoveToParagraphStart, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveToParagraphStart }};
//     virtual bool MoveToParagraphStart(int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveToParagraphStart(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveToParagraphStart
    bool returns = (self->MoveToParagraphStart(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveUp[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_MoveUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_MoveUp[1] = {{ wxLua_wxRichTextCtrl_MoveUp, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_MoveUp }};
//     virtual bool MoveUp(int noLines = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_MoveUp(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noLines = 1
    int noLines = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call MoveUp
    bool returns = (self->MoveUp(noLines, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Newline[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Newline(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Newline[1] = {{ wxLua_wxRichTextCtrl_Newline, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Newline }};
//     virtual bool Newline();
static int LUACALL wxLua_wxRichTextCtrl_Newline(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Newline
    bool returns = (self->Newline());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_NumberList1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_NumberList1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_NumberList1[1] = {{ wxLua_wxRichTextCtrl_NumberList1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_NumberList1 }};
//     virtual bool NumberList(const wxRichTextRange& range, const wxString& defName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextCtrl_NumberList1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxString defName
    const wxString defName = wxlua_getwxStringtype(L, 3);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call NumberList
    bool returns = (self->NumberList(*range, defName, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_NumberList[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_NumberList(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_NumberList[1] = {{ wxLua_wxRichTextCtrl_NumberList, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_NumberList }};
//     virtual bool NumberList(const wxRichTextRange& range, wxRichTextListStyleDefinition* def = NULL, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextCtrl_NumberList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextListStyleDefinition def = NULL
    wxRichTextListStyleDefinition * def = (argCount >= 3 ? (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextListStyleDefinition) : NULL);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call NumberList
    bool returns = (self->NumberList(*range, def, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnCaptureLost[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMouseCaptureLostEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnCaptureLost(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnCaptureLost[1] = {{ wxLua_wxRichTextCtrl_OnCaptureLost, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnCaptureLost }};
//     void OnCaptureLost(wxMouseCaptureLostEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnCaptureLost(lua_State *L)
{
    // wxMouseCaptureLostEvent event
    wxMouseCaptureLostEvent * event = (wxMouseCaptureLostEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseCaptureLostEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnCaptureLost
    self->OnCaptureLost(*event);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnChar[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnChar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnChar[1] = {{ wxLua_wxRichTextCtrl_OnChar, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnChar }};
//     void OnChar(wxKeyEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnChar(lua_State *L)
{
    // wxKeyEvent event
    wxKeyEvent * event = (wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnChar
    self->OnChar(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnClear[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnClear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnClear[1] = {{ wxLua_wxRichTextCtrl_OnClear, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnClear }};
//     void OnClear(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnClear(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnClear
    self->OnClear(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnContextMenu[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxContextMenuEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnContextMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnContextMenu[1] = {{ wxLua_wxRichTextCtrl_OnContextMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnContextMenu }};
//     void OnContextMenu(wxContextMenuEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnContextMenu(lua_State *L)
{
    // wxContextMenuEvent event
    wxContextMenuEvent * event = (wxContextMenuEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxContextMenuEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnContextMenu
    self->OnContextMenu(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnCopy[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnCopy[1] = {{ wxLua_wxRichTextCtrl_OnCopy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnCopy }};
//     void OnCopy(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnCopy(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnCopy
    self->OnCopy(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnCut[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnCut[1] = {{ wxLua_wxRichTextCtrl_OnCut, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnCut }};
//     void OnCut(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnCut(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnCut
    self->OnCut(*event);

    return 0;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnDrop[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_wxDataObject, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnDrop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnDrop[1] = {{ wxLua_wxRichTextCtrl_OnDrop, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnDrop }};
//     void OnDrop(wxCoord x, wxCoord y, wxDragResult def, wxDataObject* DataObj);
static int LUACALL wxLua_wxRichTextCtrl_OnDrop(lua_State *L)
{
    // wxDataObject DataObj
    wxDataObject * DataObj = (wxDataObject *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDataObject);
    // wxDragResult def
    wxDragResult def = (wxDragResult)wxlua_getenumtype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnDrop
    self->OnDrop(x, y, def, DataObj);

    return 0;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

#if (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnDropFiles[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxDropFilesEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnDropFiles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnDropFiles[1] = {{ wxLua_wxRichTextCtrl_OnDropFiles, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnDropFiles }};
//     void OnDropFiles(wxDropFilesEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnDropFiles(lua_State *L)
{
    // wxDropFilesEvent event
    wxDropFilesEvent * event = (wxDropFilesEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDropFilesEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnDropFiles
    self->OnDropFiles(*event);

    return 0;
}

#endif // (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnEraseBackground[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxEraseEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnEraseBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnEraseBackground[1] = {{ wxLua_wxRichTextCtrl_OnEraseBackground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnEraseBackground }};
//     void OnEraseBackground(wxEraseEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnEraseBackground(lua_State *L)
{
    // wxEraseEvent event
    wxEraseEvent * event = (wxEraseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxEraseEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnEraseBackground
    self->OnEraseBackground(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnIdle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxIdleEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnIdle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnIdle[1] = {{ wxLua_wxRichTextCtrl_OnIdle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnIdle }};
//     void OnIdle(wxIdleEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnIdle(lua_State *L)
{
    // wxIdleEvent event
    wxIdleEvent * event = (wxIdleEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIdleEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnIdle
    self->OnIdle(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnKillFocus[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxFocusEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnKillFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnKillFocus[1] = {{ wxLua_wxRichTextCtrl_OnKillFocus, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnKillFocus }};
//     void OnKillFocus(wxFocusEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnKillFocus(lua_State *L)
{
    // wxFocusEvent event
    wxFocusEvent * event = (wxFocusEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFocusEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnKillFocus
    self->OnKillFocus(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnLeftClick[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnLeftClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnLeftClick[1] = {{ wxLua_wxRichTextCtrl_OnLeftClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnLeftClick }};
//     void OnLeftClick(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnLeftClick(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnLeftClick
    self->OnLeftClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnLeftDClick[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnLeftDClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnLeftDClick[1] = {{ wxLua_wxRichTextCtrl_OnLeftDClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnLeftDClick }};
//     void OnLeftDClick(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnLeftDClick(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnLeftDClick
    self->OnLeftDClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnLeftUp[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnLeftUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnLeftUp[1] = {{ wxLua_wxRichTextCtrl_OnLeftUp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnLeftUp }};
//     void OnLeftUp(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnLeftUp(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnLeftUp
    self->OnLeftUp(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnMiddleClick[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnMiddleClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnMiddleClick[1] = {{ wxLua_wxRichTextCtrl_OnMiddleClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnMiddleClick }};
//     void OnMiddleClick(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnMiddleClick(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnMiddleClick
    self->OnMiddleClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnMoveMouse[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnMoveMouse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnMoveMouse[1] = {{ wxLua_wxRichTextCtrl_OnMoveMouse, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnMoveMouse }};
//     void OnMoveMouse(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnMoveMouse(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnMoveMouse
    self->OnMoveMouse(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnPaint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPaintEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnPaint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnPaint[1] = {{ wxLua_wxRichTextCtrl_OnPaint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnPaint }};
//     void OnPaint(wxPaintEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnPaint(lua_State *L)
{
    // wxPaintEvent event
    wxPaintEvent * event = (wxPaintEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPaintEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnPaint
    self->OnPaint(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnPaste[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnPaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnPaste[1] = {{ wxLua_wxRichTextCtrl_OnPaste, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnPaste }};
//     void OnPaste(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnPaste(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnPaste
    self->OnPaste(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnProperties[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnProperties[1] = {{ wxLua_wxRichTextCtrl_OnProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnProperties }};
//     void OnProperties(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnProperties(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnProperties
    self->OnProperties(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnRedo[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnRedo[1] = {{ wxLua_wxRichTextCtrl_OnRedo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnRedo }};
//     void OnRedo(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnRedo(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnRedo
    self->OnRedo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnRightClick[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnRightClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnRightClick[1] = {{ wxLua_wxRichTextCtrl_OnRightClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnRightClick }};
//     void OnRightClick(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnRightClick(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnRightClick
    self->OnRightClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnScroll[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxScrollWinEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnScroll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnScroll[1] = {{ wxLua_wxRichTextCtrl_OnScroll, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnScroll }};
//     void OnScroll(wxScrollWinEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnScroll(lua_State *L)
{
    // wxScrollWinEvent event
    wxScrollWinEvent * event = (wxScrollWinEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxScrollWinEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnScroll
    self->OnScroll(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSelectAll[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnSelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnSelectAll[1] = {{ wxLua_wxRichTextCtrl_OnSelectAll, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSelectAll }};
//     void OnSelectAll(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnSelectAll(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnSelectAll
    self->OnSelectAll(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSetFocus[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxFocusEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnSetFocus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnSetFocus[1] = {{ wxLua_wxRichTextCtrl_OnSetFocus, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSetFocus }};
//     void OnSetFocus(wxFocusEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnSetFocus(lua_State *L)
{
    // wxFocusEvent event
    wxFocusEvent * event = (wxFocusEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFocusEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnSetFocus
    self->OnSetFocus(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSize[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxSizeEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnSize[1] = {{ wxLua_wxRichTextCtrl_OnSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSize }};
//     void OnSize(wxSizeEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnSize(lua_State *L)
{
    // wxSizeEvent event
    wxSizeEvent * event = (wxSizeEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizeEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnSize
    self->OnSize(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSysColourChanged[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxSysColourChangedEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnSysColourChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnSysColourChanged[1] = {{ wxLua_wxRichTextCtrl_OnSysColourChanged, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnSysColourChanged }};
//     void OnSysColourChanged(wxSysColourChangedEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnSysColourChanged(lua_State *L)
{
    // wxSysColourChangedEvent event
    wxSysColourChangedEvent * event = (wxSysColourChangedEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSysColourChangedEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnSysColourChanged
    self->OnSysColourChanged(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUndo[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUndo[1] = {{ wxLua_wxRichTextCtrl_OnUndo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUndo }};
//     void OnUndo(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUndo(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUndo
    self->OnUndo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateClear[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateClear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateClear[1] = {{ wxLua_wxRichTextCtrl_OnUpdateClear, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateClear }};
//     void OnUpdateClear(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateClear(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdateClear
    self->OnUpdateClear(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateCopy[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateCopy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateCopy[1] = {{ wxLua_wxRichTextCtrl_OnUpdateCopy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateCopy }};
//     void OnUpdateCopy(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateCopy(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdateCopy
    self->OnUpdateCopy(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateCut[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateCut(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateCut[1] = {{ wxLua_wxRichTextCtrl_OnUpdateCut, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateCut }};
//     void OnUpdateCut(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateCut(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdateCut
    self->OnUpdateCut(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdatePaste[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdatePaste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdatePaste[1] = {{ wxLua_wxRichTextCtrl_OnUpdatePaste, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdatePaste }};
//     void OnUpdatePaste(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdatePaste(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdatePaste
    self->OnUpdatePaste(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateProperties[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateProperties[1] = {{ wxLua_wxRichTextCtrl_OnUpdateProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateProperties }};
//     void OnUpdateProperties(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateProperties(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdateProperties
    self->OnUpdateProperties(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateRedo[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateRedo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateRedo[1] = {{ wxLua_wxRichTextCtrl_OnUpdateRedo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateRedo }};
//     void OnUpdateRedo(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateRedo(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdateRedo
    self->OnUpdateRedo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateSelectAll[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateSelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateSelectAll[1] = {{ wxLua_wxRichTextCtrl_OnUpdateSelectAll, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateSelectAll }};
//     void OnUpdateSelectAll(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateSelectAll(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdateSelectAll
    self->OnUpdateSelectAll(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateUndo[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateUndo[1] = {{ wxLua_wxRichTextCtrl_OnUpdateUndo, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_OnUpdateUndo }};
//     void OnUpdateUndo(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextCtrl_OnUpdateUndo(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call OnUpdateUndo
    self->OnUpdateUndo(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PageDown[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PageDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PageDown[1] = {{ wxLua_wxRichTextCtrl_PageDown, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_PageDown }};
//     virtual bool PageDown(int noPages = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_PageDown(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noPages = 1
    int noPages = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PageDown
    bool returns = (self->PageDown(noPages, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PageUp[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PageUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PageUp[1] = {{ wxLua_wxRichTextCtrl_PageUp, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_PageUp }};
//     virtual bool PageUp(int noPages = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_PageUp(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noPages = 1
    int noPages = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PageUp
    bool returns = (self->PageUp(noPages, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PaintAboveContent[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PaintAboveContent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PaintAboveContent[1] = {{ wxLua_wxRichTextCtrl_PaintAboveContent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_PaintAboveContent }};
//     virtual void PaintAboveContent(wxDC& dc);
static int LUACALL wxLua_wxRichTextCtrl_PaintAboveContent(lua_State *L)
{
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PaintAboveContent
    self->PaintAboveContent(*dc);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PaintBackground[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxDC, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PaintBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PaintBackground[1] = {{ wxLua_wxRichTextCtrl_PaintBackground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_PaintBackground }};
//     virtual void PaintBackground(wxDC& dc);
static int LUACALL wxLua_wxRichTextCtrl_PaintBackground(lua_State *L)
{
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PaintBackground
    self->PaintBackground(*dc);

    return 0;
}

#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Paste[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Paste(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Paste[1] = {{ wxLua_wxRichTextCtrl_Paste, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Paste }};
//     virtual void Paste();
static int LUACALL wxLua_wxRichTextCtrl_Paste(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Paste
    self->Paste();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PopStyleSheet[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PopStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PopStyleSheet[1] = {{ wxLua_wxRichTextCtrl_PopStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_PopStyleSheet }};
//     wxRichTextStyleSheet* PopStyleSheet();
static int LUACALL wxLua_wxRichTextCtrl_PopStyleSheet(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PopStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->PopStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PositionCaret[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PositionCaret(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PositionCaret[1] = {{ wxLua_wxRichTextCtrl_PositionCaret, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_PositionCaret }};
//     virtual void PositionCaret(wxRichTextParagraphLayoutBox* container = NULL);
static int LUACALL wxLua_wxRichTextCtrl_PositionCaret(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextParagraphLayoutBox container = NULL
    wxRichTextParagraphLayoutBox * container = (argCount >= 2 ? (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox) : NULL);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PositionCaret
    self->PositionCaret(container);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PositionToXY[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PositionToXY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PositionToXY[1] = {{ wxLua_wxRichTextCtrl_PositionToXY, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_PositionToXY }};
//     virtual bool PositionToXY(long pos, long *x, long *y) const;
static int LUACALL wxLua_wxRichTextCtrl_PositionToXY(lua_State *L)
{
    // long y
    long * y = (long *)wxlua_touserdata(L, 4);
    // long x
    long * x = (long *)wxlua_touserdata(L, 3);
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PositionToXY
    bool returns = (self->PositionToXY(pos, x, y));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PrepareContent[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PrepareContent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PrepareContent[1] = {{ wxLua_wxRichTextCtrl_PrepareContent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_PrepareContent }};
//     virtual void PrepareContent(wxRichTextParagraphLayoutBox& container);
static int LUACALL wxLua_wxRichTextCtrl_PrepareContent(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PrepareContent
    self->PrepareContent(*container);

    return 0;
}


#if ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PrepareContextMenu[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMenu, &wxluatype_wxPoint, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PrepareContextMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PrepareContextMenu[1] = {{ wxLua_wxRichTextCtrl_PrepareContextMenu, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_PrepareContextMenu }};
//     virtual int PrepareContextMenu(wxMenu* menu, const wxPoint& pt, bool addPropertyCommands = true);
static int LUACALL wxLua_wxRichTextCtrl_PrepareContextMenu(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool addPropertyCommands = true
    bool addPropertyCommands = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PrepareContextMenu
    int returns = (self->PrepareContextMenu(menu, *pt, addPropertyCommands));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ProcessBackKey[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxKeyEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ProcessBackKey(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ProcessBackKey[1] = {{ wxLua_wxRichTextCtrl_ProcessBackKey, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_ProcessBackKey }};
//     virtual bool ProcessBackKey(wxKeyEvent& event, int flags);
static int LUACALL wxLua_wxRichTextCtrl_ProcessBackKey(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 3);
    // wxKeyEvent event
    wxKeyEvent * event = (wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ProcessBackKey
    bool returns = (self->ProcessBackKey(*event, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ProcessMouseMovement[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ProcessMouseMovement(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ProcessMouseMovement[1] = {{ wxLua_wxRichTextCtrl_ProcessMouseMovement, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_ProcessMouseMovement }};
//     virtual bool ProcessMouseMovement(wxRichTextParagraphLayoutBox* container, wxRichTextObject* obj, long position, const wxPoint& pos);
static int LUACALL wxLua_wxRichTextCtrl_ProcessMouseMovement(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint);
    // long position
    long position = (long)wxlua_getnumbertype(L, 4);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ProcessMouseMovement
    bool returns = (self->ProcessMouseMovement(container, obj, position, *pos));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PromoteList1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextRange, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PromoteList1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PromoteList1[1] = {{ wxLua_wxRichTextCtrl_PromoteList1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_PromoteList1 }};
//     virtual bool PromoteList(int promoteBy, const wxRichTextRange& range, const wxString& defName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextCtrl_PromoteList1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxString defName
    const wxString defName = wxlua_getwxStringtype(L, 4);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // int promoteBy
    int promoteBy = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PromoteList
    bool returns = (self->PromoteList(promoteBy, *range, defName, flags, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PromoteList[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PromoteList(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PromoteList[1] = {{ wxLua_wxRichTextCtrl_PromoteList, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_PromoteList }};
//     virtual bool PromoteList(int promoteBy, const wxRichTextRange& range, wxRichTextListStyleDefinition* def = NULL, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextCtrl_PromoteList(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextListStyleDefinition def = NULL
    wxRichTextListStyleDefinition * def = (argCount >= 4 ? (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextListStyleDefinition) : NULL);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // int promoteBy
    int promoteBy = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PromoteList
    bool returns = (self->PromoteList(promoteBy, *range, def, flags, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_PushStyleSheet[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextCtrl_PushStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PushStyleSheet[1] = {{ wxLua_wxRichTextCtrl_PushStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_PushStyleSheet }};
//     bool PushStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextCtrl_PushStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call PushStyleSheet
    bool returns = (self->PushStyleSheet(styleSheet));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_RecreateBuffer[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxRichTextCtrl_RecreateBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_RecreateBuffer[1] = {{ wxLua_wxRichTextCtrl_RecreateBuffer, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_RecreateBuffer }};
//     virtual bool RecreateBuffer(const wxSize& size = wxDefaultSize);
static int LUACALL wxLua_wxRichTextCtrl_RecreateBuffer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 2 ? (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize) : &wxDefaultSize);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call RecreateBuffer
    bool returns = (self->RecreateBuffer(*size));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Redo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Redo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Redo[1] = {{ wxLua_wxRichTextCtrl_Redo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Redo }};
//     virtual void Redo();
static int LUACALL wxLua_wxRichTextCtrl_Redo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Redo
    self->Redo();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_RefreshForSelectionChange[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextSelection, &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextCtrl_RefreshForSelectionChange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_RefreshForSelectionChange[1] = {{ wxLua_wxRichTextCtrl_RefreshForSelectionChange, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_RefreshForSelectionChange }};
//     bool RefreshForSelectionChange(const wxRichTextSelection& oldSelection, const wxRichTextSelection& newSelection);
static int LUACALL wxLua_wxRichTextCtrl_RefreshForSelectionChange(lua_State *L)
{
    // const wxRichTextSelection newSelection
    const wxRichTextSelection * newSelection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextSelection);
    // const wxRichTextSelection oldSelection
    const wxRichTextSelection * oldSelection = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextSelection);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call RefreshForSelectionChange
    bool returns = (self->RefreshForSelectionChange(*oldSelection, *newSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Remove[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Remove[1] = {{ wxLua_wxRichTextCtrl_Remove, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_Remove }};
//     virtual void Remove(long from, long to);
static int LUACALL wxLua_wxRichTextCtrl_Remove(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Remove
    self->Remove(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Replace[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Replace(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Replace[1] = {{ wxLua_wxRichTextCtrl_Replace, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_Replace }};
//     virtual void Replace(long from, long to, const wxString& value);
static int LUACALL wxLua_wxRichTextCtrl_Replace(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 4);
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Replace
    self->Replace(from, to, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ScrollIntoView[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ScrollIntoView(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ScrollIntoView[1] = {{ wxLua_wxRichTextCtrl_ScrollIntoView, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_ScrollIntoView }};
//     virtual bool ScrollIntoView(long position, int keyCode);
static int LUACALL wxLua_wxRichTextCtrl_ScrollIntoView(lua_State *L)
{
    // int keyCode
    int keyCode = (int)wxlua_getnumbertype(L, 3);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ScrollIntoView
    bool returns = (self->ScrollIntoView(position, keyCode));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SelectNone[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SelectNone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SelectNone[1] = {{ wxLua_wxRichTextCtrl_SelectNone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_SelectNone }};
//     virtual void SelectNone();
static int LUACALL wxLua_wxRichTextCtrl_SelectNone(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SelectNone
    self->SelectNone();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SelectWord[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SelectWord(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SelectWord[1] = {{ wxLua_wxRichTextCtrl_SelectWord, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SelectWord }};
//     virtual bool SelectWord(long position);
static int LUACALL wxLua_wxRichTextCtrl_SelectWord(lua_State *L)
{
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SelectWord
    bool returns = (self->SelectWord(position));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetAndShowDefaultStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetAndShowDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetAndShowDefaultStyle[1] = {{ wxLua_wxRichTextCtrl_SetAndShowDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetAndShowDefaultStyle }};
//     void SetAndShowDefaultStyle(const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextCtrl_SetAndShowDefaultStyle(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetAndShowDefaultStyle
    self->SetAndShowDefaultStyle(*attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetBasicStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetBasicStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetBasicStyle[1] = {{ wxLua_wxRichTextCtrl_SetBasicStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetBasicStyle }};
//     virtual void SetBasicStyle(const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_SetBasicStyle(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetBasicStyle
    self->SetBasicStyle(*style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretAtLineStart[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetCaretAtLineStart(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretAtLineStart[1] = {{ wxLua_wxRichTextCtrl_SetCaretAtLineStart, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretAtLineStart }};
//     void SetCaretAtLineStart(bool atStart);
static int LUACALL wxLua_wxRichTextCtrl_SetCaretAtLineStart(lua_State *L)
{
    // bool atStart
    bool atStart = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetCaretAtLineStart
    self->SetCaretAtLineStart(atStart);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetCaretPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretPosition[1] = {{ wxLua_wxRichTextCtrl_SetCaretPosition, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretPosition }};
//     void SetCaretPosition(long position, bool showAtLineStart = false) ;
static int LUACALL wxLua_wxRichTextCtrl_SetCaretPosition(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool showAtLineStart = false
    bool showAtLineStart = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // long position
    long position = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetCaretPosition
    self->SetCaretPosition(position, showAtLineStart);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretPositionAfterClick[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetCaretPositionAfterClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretPositionAfterClick[1] = {{ wxLua_wxRichTextCtrl_SetCaretPositionAfterClick, WXLUAMETHOD_METHOD, 4, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretPositionAfterClick }};
//     bool SetCaretPositionAfterClick(wxRichTextParagraphLayoutBox* container, long position, int hitTestFlags, bool extendSelection = false);
static int LUACALL wxLua_wxRichTextCtrl_SetCaretPositionAfterClick(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool extendSelection = false
    bool extendSelection = (argCount >= 5 ? wxlua_getbooleantype(L, 5) : false);
    // int hitTestFlags
    int hitTestFlags = (int)wxlua_getnumbertype(L, 4);
    // long position
    long position = (long)wxlua_getnumbertype(L, 3);
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetCaretPositionAfterClick
    bool returns = (self->SetCaretPositionAfterClick(container, position, hitTestFlags, extendSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretPositionForDefaultStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetCaretPositionForDefaultStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretPositionForDefaultStyle[1] = {{ wxLua_wxRichTextCtrl_SetCaretPositionForDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetCaretPositionForDefaultStyle }};
//     void SetCaretPositionForDefaultStyle(long pos);
static int LUACALL wxLua_wxRichTextCtrl_SetCaretPositionForDefaultStyle(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetCaretPositionForDefaultStyle
    self->SetCaretPositionForDefaultStyle(pos);

    return 0;
}


#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetContextMenu[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetContextMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetContextMenu[1] = {{ wxLua_wxRichTextCtrl_SetContextMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetContextMenu }};
//     void SetContextMenu(wxMenu* menu);
static int LUACALL wxLua_wxRichTextCtrl_SetContextMenu(lua_State *L)
{
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetContextMenu
    self->SetContextMenu(menu);

    return 0;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyle1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDefaultStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyle1[1] = {{ wxLua_wxRichTextCtrl_SetDefaultStyle1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyle1 }};
//     virtual bool SetDefaultStyle(const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_SetDefaultStyle1(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDefaultStyle
    bool returns = (self->SetDefaultStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDefaultStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyle[1] = {{ wxLua_wxRichTextCtrl_SetDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyle }};
//     virtual bool SetDefaultStyle(const wxTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_SetDefaultStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDefaultStyle
    bool returns = (self->SetDefaultStyle(*style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyleToCursorStyle[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDefaultStyleToCursorStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyleToCursorStyle[1] = {{ wxLua_wxRichTextCtrl_SetDefaultStyleToCursorStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyleToCursorStyle }};
//     bool SetDefaultStyleToCursorStyle();
static int LUACALL wxLua_wxRichTextCtrl_SetDefaultStyleToCursorStyle(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDefaultStyleToCursorStyle
    bool returns = (self->SetDefaultStyleToCursorStyle());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDelayedLayoutThreshold[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDelayedLayoutThreshold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDelayedLayoutThreshold[1] = {{ wxLua_wxRichTextCtrl_SetDelayedLayoutThreshold, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDelayedLayoutThreshold }};
//     void SetDelayedLayoutThreshold(long threshold);
static int LUACALL wxLua_wxRichTextCtrl_SetDelayedLayoutThreshold(lua_State *L)
{
    // long threshold
    long threshold = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDelayedLayoutThreshold
    self->SetDelayedLayoutThreshold(threshold);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDimensionScale[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDimensionScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDimensionScale[1] = {{ wxLua_wxRichTextCtrl_SetDimensionScale, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDimensionScale }};
//     void SetDimensionScale(double dimScale, bool refresh = false);
static int LUACALL wxLua_wxRichTextCtrl_SetDimensionScale(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool refresh = false
    bool refresh = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // double dimScale
    double dimScale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDimensionScale
    self->SetDimensionScale(dimScale, refresh);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDragStartPoint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDragStartPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDragStartPoint[1] = {{ wxLua_wxRichTextCtrl_SetDragStartPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDragStartPoint }};
//     void SetDragStartPoint(wxPoint sp);
static int LUACALL wxLua_wxRichTextCtrl_SetDragStartPoint(lua_State *L)
{
    // wxPoint sp
    wxPoint sp = *(wxPoint*)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDragStartPoint
    self->SetDragStartPoint(sp);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDragStartTime[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDragStartTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDragStartTime[1] = {{ wxLua_wxRichTextCtrl_SetDragStartTime, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDragStartTime }};
//     void SetDragStartTime(wxDateTime st);
static int LUACALL wxLua_wxRichTextCtrl_SetDragStartTime(lua_State *L)
{
    // wxDateTime st
    wxDateTime st = *(wxDateTime*)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDragStartTime
    self->SetDragStartTime(st);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDragging[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetDragging(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDragging[1] = {{ wxLua_wxRichTextCtrl_SetDragging, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDragging }};
//     void SetDragging(bool dragging);
static int LUACALL wxLua_wxRichTextCtrl_SetDragging(lua_State *L)
{
    // bool dragging
    bool dragging = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetDragging
    self->SetDragging(dragging);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetEditable[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetEditable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetEditable[1] = {{ wxLua_wxRichTextCtrl_SetEditable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetEditable }};
//     virtual void SetEditable(bool editable);
static int LUACALL wxLua_wxRichTextCtrl_SetEditable(lua_State *L)
{
    // bool editable
    bool editable = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetEditable
    self->SetEditable(editable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFilename[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetFilename(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetFilename[1] = {{ wxLua_wxRichTextCtrl_SetFilename, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFilename }};
//     void SetFilename(const wxString& filename);
static int LUACALL wxLua_wxRichTextCtrl_SetFilename(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetFilename
    self->SetFilename(filename);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFocusObject[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetFocusObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetFocusObject[1] = {{ wxLua_wxRichTextCtrl_SetFocusObject, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFocusObject }};
//     bool SetFocusObject(wxRichTextParagraphLayoutBox* obj, bool setCaretPosition = true);
static int LUACALL wxLua_wxRichTextCtrl_SetFocusObject(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool setCaretPosition = true
    bool setCaretPosition = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // wxRichTextParagraphLayoutBox obj
    wxRichTextParagraphLayoutBox * obj = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetFocusObject
    bool returns = (self->SetFocusObject(obj, setCaretPosition));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFont[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetFont[1] = {{ wxLua_wxRichTextCtrl_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFont }};
//     virtual bool SetFont(const wxFont& font);
static int LUACALL wxLua_wxRichTextCtrl_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetFont
    bool returns = (self->SetFont(*font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFontScale[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetFontScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetFontScale[1] = {{ wxLua_wxRichTextCtrl_SetFontScale, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFontScale }};
//     void SetFontScale(double fontScale, bool refresh = false);
static int LUACALL wxLua_wxRichTextCtrl_SetFontScale(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool refresh = false
    bool refresh = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // double fontScale
    double fontScale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetFontScale
    self->SetFontScale(fontScale, refresh);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFullLayoutRequired[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetFullLayoutRequired(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetFullLayoutRequired[1] = {{ wxLua_wxRichTextCtrl_SetFullLayoutRequired, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFullLayoutRequired }};
//     void SetFullLayoutRequired(bool b);
static int LUACALL wxLua_wxRichTextCtrl_SetFullLayoutRequired(lua_State *L)
{
    // bool b
    bool b = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetFullLayoutRequired
    self->SetFullLayoutRequired(b);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFullLayoutSavedPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetFullLayoutSavedPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetFullLayoutSavedPosition[1] = {{ wxLua_wxRichTextCtrl_SetFullLayoutSavedPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFullLayoutSavedPosition }};
//     void SetFullLayoutSavedPosition(long p);
static int LUACALL wxLua_wxRichTextCtrl_SetFullLayoutSavedPosition(lua_State *L)
{
    // long p
    long p = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetFullLayoutSavedPosition
    self->SetFullLayoutSavedPosition(p);

    return 0;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFullLayoutTime[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxLongLong, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetFullLayoutTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetFullLayoutTime[1] = {{ wxLua_wxRichTextCtrl_SetFullLayoutTime, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetFullLayoutTime }};
//     void SetFullLayoutTime(wxLongLong t);
static int LUACALL wxLua_wxRichTextCtrl_SetFullLayoutTime(lua_State *L)
{
    // wxLongLong t
    wxLongLong t = *(wxLongLong*)wxluaT_getuserdatatype(L, 2, wxluatype_wxLongLong);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetFullLayoutTime
    self->SetFullLayoutTime(t);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetHandlerFlags[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetHandlerFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetHandlerFlags[1] = {{ wxLua_wxRichTextCtrl_SetHandlerFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetHandlerFlags }};
//     void SetHandlerFlags(int flags);
static int LUACALL wxLua_wxRichTextCtrl_SetHandlerFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetHandlerFlags
    self->SetHandlerFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetInsertionPoint[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetInsertionPoint(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetInsertionPoint[1] = {{ wxLua_wxRichTextCtrl_SetInsertionPoint, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetInsertionPoint }};
//     virtual void SetInsertionPoint(long pos);
static int LUACALL wxLua_wxRichTextCtrl_SetInsertionPoint(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetInsertionPoint
    self->SetInsertionPoint(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetInsertionPointEnd[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetInsertionPointEnd(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetInsertionPointEnd[1] = {{ wxLua_wxRichTextCtrl_SetInsertionPointEnd, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetInsertionPointEnd }};
//     virtual void SetInsertionPointEnd();
static int LUACALL wxLua_wxRichTextCtrl_SetInsertionPointEnd(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetInsertionPointEnd
    self->SetInsertionPointEnd();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetInternalSelectionRange[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetInternalSelectionRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetInternalSelectionRange[1] = {{ wxLua_wxRichTextCtrl_SetInternalSelectionRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetInternalSelectionRange }};
//     void SetInternalSelectionRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextCtrl_SetInternalSelectionRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetInternalSelectionRange
    self->SetInternalSelectionRange(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetListStyle1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetListStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetListStyle1[1] = {{ wxLua_wxRichTextCtrl_SetListStyle1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetListStyle1 }};
//     virtual bool SetListStyle(const wxRichTextRange& range, const wxString& defName, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextCtrl_SetListStyle1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxString defName
    const wxString defName = wxlua_getwxStringtype(L, 3);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetListStyle
    bool returns = (self->SetListStyle(*range, defName, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetListStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetListStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetListStyle[1] = {{ wxLua_wxRichTextCtrl_SetListStyle, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetListStyle }};
//     virtual bool SetListStyle(const wxRichTextRange& range, wxRichTextListStyleDefinition* def, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO, int startFrom = 1, int specifiedLevel = -1);
static int LUACALL wxLua_wxRichTextCtrl_SetListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int specifiedLevel = -1
    int specifiedLevel = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int startFrom = 1
    int startFrom = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 1);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextListStyleDefinition def
    wxRichTextListStyleDefinition * def = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextListStyleDefinition);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetListStyle
    bool returns = (self->SetListStyle(*range, def, flags, startFrom, specifiedLevel));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetMaxLength[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetMaxLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetMaxLength[1] = {{ wxLua_wxRichTextCtrl_SetMaxLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetMaxLength }};
//     virtual void SetMaxLength(unsigned long len);
static int LUACALL wxLua_wxRichTextCtrl_SetMaxLength(lua_State *L)
{
    // unsigned long len
    unsigned long len = (unsigned long)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetMaxLength
    self->SetMaxLength(len);

    return 0;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetPreDrag[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetPreDrag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetPreDrag[1] = {{ wxLua_wxRichTextCtrl_SetPreDrag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetPreDrag }};
//     void SetPreDrag(bool pd);
static int LUACALL wxLua_wxRichTextCtrl_SetPreDrag(lua_State *L)
{
    // bool pd
    bool pd = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetPreDrag
    self->SetPreDrag(pd);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetProperties[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextProperties, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetProperties[1] = {{ wxLua_wxRichTextCtrl_SetProperties, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetProperties }};
//     virtual bool SetProperties(const wxRichTextRange& range, const wxRichTextProperties& properties, int flags = wxRICHTEXT_SETPROPERTIES_WITH_UNDO);
static int LUACALL wxLua_wxRichTextCtrl_SetProperties(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETPROPERTIES_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETPROPERTIES_WITH_UNDO);
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextProperties);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetProperties
    bool returns = (self->SetProperties(*range, *properties, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetScale[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetScale(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetScale[1] = {{ wxLua_wxRichTextCtrl_SetScale, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetScale }};
//     void SetScale(double scale, bool refresh = false);
static int LUACALL wxLua_wxRichTextCtrl_SetScale(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool refresh = false
    bool refresh = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // double scale
    double scale = (double)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetScale
    self->SetScale(scale, refresh);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelection1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextSelection, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetSelection1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetSelection1[1] = {{ wxLua_wxRichTextCtrl_SetSelection1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelection1 }};
//     void SetSelection(const wxRichTextSelection& sel);
static int LUACALL wxLua_wxRichTextCtrl_SetSelection1(lua_State *L)
{
    // const wxRichTextSelection sel
    const wxRichTextSelection * sel = (const wxRichTextSelection *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextSelection);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetSelection
    self->SetSelection(*sel);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelection[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetSelection(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetSelection[1] = {{ wxLua_wxRichTextCtrl_SetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelection }};
//     virtual void SetSelection(long from, long to);
static int LUACALL wxLua_wxRichTextCtrl_SetSelection(lua_State *L)
{
    // long to
    long to = (long)wxlua_getnumbertype(L, 3);
    // long from
    long from = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetSelection
    self->SetSelection(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelectionAnchor[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetSelectionAnchor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetSelectionAnchor[1] = {{ wxLua_wxRichTextCtrl_SetSelectionAnchor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelectionAnchor }};
//     void SetSelectionAnchor(long anchor);
static int LUACALL wxLua_wxRichTextCtrl_SetSelectionAnchor(lua_State *L)
{
    // long anchor
    long anchor = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetSelectionAnchor
    self->SetSelectionAnchor(anchor);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelectionAnchorObject[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetSelectionAnchorObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetSelectionAnchorObject[1] = {{ wxLua_wxRichTextCtrl_SetSelectionAnchorObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelectionAnchorObject }};
//     void SetSelectionAnchorObject(wxRichTextObject* anchor);
static int LUACALL wxLua_wxRichTextCtrl_SetSelectionAnchorObject(lua_State *L)
{
    // wxRichTextObject anchor
    wxRichTextObject * anchor = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetSelectionAnchorObject
    self->SetSelectionAnchorObject(anchor);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelectionRange[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetSelectionRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetSelectionRange[1] = {{ wxLua_wxRichTextCtrl_SetSelectionRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelectionRange }};
//     void SetSelectionRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextCtrl_SetSelectionRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetSelectionRange
    self->SetSelectionRange(*range);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle4[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextObject, &wxluatype_wxRichTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetStyle4(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle4[1] = {{ wxLua_wxRichTextCtrl_SetStyle4, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle4 }};
//     virtual void SetStyle(wxRichTextObject *obj, const wxRichTextAttr& textAttr, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextCtrl_SetStyle4(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxRichTextAttr textAttr
    const wxRichTextAttr * textAttr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetStyle
    self->SetStyle(obj, *textAttr, flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle3[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetStyle3(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle3[1] = {{ wxLua_wxRichTextCtrl_SetStyle3, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle3 }};
//     virtual bool SetStyle(const wxRichTextRange& range, const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_SetStyle3(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetStyle
    bool returns = (self->SetStyle(*range, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle2[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetStyle2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle2[1] = {{ wxLua_wxRichTextCtrl_SetStyle2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle2 }};
//     virtual bool SetStyle(const wxRichTextRange& range, const wxTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_SetStyle2(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetStyle
    bool returns = (self->SetStyle(*range, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle1[1] = {{ wxLua_wxRichTextCtrl_SetStyle1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle1 }};
//     virtual bool SetStyle(long start, long end, const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_SetStyle1(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr);
    // long end
    long end = (long)wxlua_getnumbertype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetStyle
    bool returns = (self->SetStyle(start, end, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle[1] = {{ wxLua_wxRichTextCtrl_SetStyle, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle }};
//     virtual bool SetStyle(long start, long end, const wxTextAttr& style);
static int LUACALL wxLua_wxRichTextCtrl_SetStyle(lua_State *L)
{
    // const wxTextAttr style
    const wxTextAttr * style = (const wxTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttr);
    // long end
    long end = (long)wxlua_getnumbertype(L, 3);
    // long start
    long start = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetStyle
    bool returns = (self->SetStyle(start, end, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyleEx[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_wxRichTextAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetStyleEx(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyleEx[1] = {{ wxLua_wxRichTextCtrl_SetStyleEx, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyleEx }};
//     virtual bool SetStyleEx(const wxRichTextRange& range, const wxRichTextAttr& style, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextCtrl_SetStyleEx(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetStyleEx
    bool returns = (self->SetStyleEx(*range, *style, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyleSheet[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyleSheet[1] = {{ wxLua_wxRichTextCtrl_SetStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyleSheet }};
//     void SetStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextCtrl_SetStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetStyleSheet
    self->SetStyleSheet(styleSheet);

    return 0;
}


#if (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetTextCursor[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetTextCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetTextCursor[1] = {{ wxLua_wxRichTextCtrl_SetTextCursor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetTextCursor }};
//     void SetTextCursor(const wxCursor& cursor );
static int LUACALL wxLua_wxRichTextCtrl_SetTextCursor(lua_State *L)
{
    // const wxCursor cursor
    const wxCursor * cursor = (const wxCursor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCursor);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetTextCursor
    self->SetTextCursor(*cursor);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetURLCursor[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxCursor, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetURLCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetURLCursor[1] = {{ wxLua_wxRichTextCtrl_SetURLCursor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetURLCursor }};
//     void SetURLCursor(const wxCursor& cursor );
static int LUACALL wxLua_wxRichTextCtrl_SetURLCursor(lua_State *L)
{
    // const wxCursor cursor
    const wxCursor * cursor = (const wxCursor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCursor);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetURLCursor
    self->SetURLCursor(*cursor);

    return 0;
}

#endif // (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SetupScrollbars[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SetupScrollbars(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetupScrollbars[1] = {{ wxLua_wxRichTextCtrl_SetupScrollbars, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetupScrollbars }};
//     virtual void SetupScrollbars(bool atTop = false);
static int LUACALL wxLua_wxRichTextCtrl_SetupScrollbars(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool atTop = false
    bool atTop = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SetupScrollbars
    self->SetupScrollbars(atTop);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ShouldInheritColours[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ShouldInheritColours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ShouldInheritColours[1] = {{ wxLua_wxRichTextCtrl_ShouldInheritColours, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_ShouldInheritColours }};
//     virtual bool ShouldInheritColours() const;
static int LUACALL wxLua_wxRichTextCtrl_ShouldInheritColours(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ShouldInheritColours
    bool returns = (self->ShouldInheritColours());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ShowContextMenu[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxMenu, &wxluatype_wxPoint, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ShowContextMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ShowContextMenu[1] = {{ wxLua_wxRichTextCtrl_ShowContextMenu, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_ShowContextMenu }};
//     virtual bool ShowContextMenu(wxMenu* menu, const wxPoint& pt, bool addPropertyCommands = true);
static int LUACALL wxLua_wxRichTextCtrl_ShowContextMenu(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool addPropertyCommands = true
    bool addPropertyCommands = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint);
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ShowContextMenu
    bool returns = (self->ShowContextMenu(menu, *pt, addPropertyCommands));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_ShowPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_ShowPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_ShowPosition[1] = {{ wxLua_wxRichTextCtrl_ShowPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_ShowPosition }};
//     virtual void ShowPosition(long pos);
static int LUACALL wxLua_wxRichTextCtrl_ShowPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call ShowPosition
    self->ShowPosition(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_StoreFocusObject[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextCtrl_StoreFocusObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_StoreFocusObject[1] = {{ wxLua_wxRichTextCtrl_StoreFocusObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_StoreFocusObject }};
//     void StoreFocusObject(wxRichTextParagraphLayoutBox* obj);
static int LUACALL wxLua_wxRichTextCtrl_StoreFocusObject(lua_State *L)
{
    // wxRichTextParagraphLayoutBox obj
    wxRichTextParagraphLayoutBox * obj = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call StoreFocusObject
    self->StoreFocusObject(obj);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_SuppressingUndo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_SuppressingUndo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SuppressingUndo[1] = {{ wxLua_wxRichTextCtrl_SuppressingUndo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_SuppressingUndo }};
//     virtual bool SuppressingUndo() const;
static int LUACALL wxLua_wxRichTextCtrl_SuppressingUndo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call SuppressingUndo
    bool returns = (self->SuppressingUndo());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_Undo[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextCtrl_Undo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_Undo[1] = {{ wxLua_wxRichTextCtrl_Undo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_Undo }};
//     virtual void Undo();
static int LUACALL wxLua_wxRichTextCtrl_Undo(lua_State *L)
{
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call Undo
    self->Undo();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WordLeft[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WordLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WordLeft[1] = {{ wxLua_wxRichTextCtrl_WordLeft, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_WordLeft }};
//     virtual bool WordLeft(int noPages = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_WordLeft(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noPages = 1
    int noPages = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WordLeft
    bool returns = (self->WordLeft(noPages, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WordRight[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WordRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WordRight[1] = {{ wxLua_wxRichTextCtrl_WordRight, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_WordRight }};
//     virtual bool WordRight(int noPages = 1, int flags = 0);
static int LUACALL wxLua_wxRichTextCtrl_WordRight(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = 0
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // int noPages = 1
    int noPages = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WordRight
    bool returns = (self->WordRight(noPages, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteField[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_wxRichTextProperties, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteField(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteField[1] = {{ wxLua_wxRichTextCtrl_WriteField, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteField }};
//                             const wxRichTextAttr& textAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextCtrl_WriteField(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr textAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * textAttr = (argCount >= 4 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextProperties);
    // const wxString fieldType
    const wxString fieldType = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteField
    wxRichTextField* returns = (wxRichTextField*)self->WriteField(fieldType, *properties, *textAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextField);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage3[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextImageBlock, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteImage3(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage3[1] = {{ wxLua_wxRichTextCtrl_WriteImage3, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage3 }};
//                             const wxRichTextAttr& textAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextCtrl_WriteImage3(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr textAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * textAttr = (argCount >= 3 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // const wxRichTextImageBlock imageBlock
    const wxRichTextImageBlock * imageBlock = (const wxRichTextImageBlock *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextImageBlock);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteImage
    bool returns = (self->WriteImage(*imageBlock, *textAttr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage2[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteImage2(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage2[1] = {{ wxLua_wxRichTextCtrl_WriteImage2, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage2 }};
//                             const wxRichTextAttr& textAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextCtrl_WriteImage2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr textAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * textAttr = (argCount >= 4 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // wxBitmapType bitmapType = wxBITMAP_TYPE_PNG
    wxBitmapType bitmapType = (argCount >= 3 ? (wxBitmapType)wxlua_getenumtype(L, 3) : wxBITMAP_TYPE_PNG);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteImage
    bool returns = (self->WriteImage(filename, bitmapType, *textAttr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage1[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteImage1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage1[1] = {{ wxLua_wxRichTextCtrl_WriteImage1, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage1 }};
//                             const wxRichTextAttr& textAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextCtrl_WriteImage1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr textAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * textAttr = (argCount >= 4 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // wxBitmapType bitmapType = wxBITMAP_TYPE_PNG
    wxBitmapType bitmapType = (argCount >= 3 ? (wxBitmapType)wxlua_getenumtype(L, 3) : wxBITMAP_TYPE_PNG);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteImage
    bool returns = (self->WriteImage(*bitmap, bitmapType, *textAttr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxImage, &wxluatype_TINTEGER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteImage(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage[1] = {{ wxLua_wxRichTextCtrl_WriteImage, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage }};
//                             const wxRichTextAttr& textAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextCtrl_WriteImage(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr textAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * textAttr = (argCount >= 4 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // wxBitmapType bitmapType = wxBITMAP_TYPE_PNG
    wxBitmapType bitmapType = (argCount >= 3 ? (wxBitmapType)wxlua_getenumtype(L, 3) : wxBITMAP_TYPE_PNG);
    // const wxImage image
    const wxImage * image = (const wxImage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxImage);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteImage
    bool returns = (self->WriteImage(*image, bitmapType, *textAttr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteTable[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteTable[1] = {{ wxLua_wxRichTextCtrl_WriteTable, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteTable }};
//     virtual wxRichTextTable* WriteTable(int rows, int cols, const wxRichTextAttr& tableAttr = wxDEFAULT_RICHTEXTATTR, const wxRichTextAttr& cellAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextCtrl_WriteTable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr cellAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * cellAttr = (argCount >= 5 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // const wxRichTextAttr tableAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * tableAttr = (argCount >= 4 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // int cols
    int cols = (int)wxlua_getnumbertype(L, 3);
    // int rows
    int rows = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteTable
    wxRichTextTable* returns = (wxRichTextTable*)self->WriteTable(rows, cols, *tableAttr, *cellAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextTable);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteText[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteText[1] = {{ wxLua_wxRichTextCtrl_WriteText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteText }};
//     virtual void WriteText(const wxString& text);
static int LUACALL wxLua_wxRichTextCtrl_WriteText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteText
    self->WriteText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteTextBox[] = { &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextCtrl_WriteTextBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteTextBox[1] = {{ wxLua_wxRichTextCtrl_WriteTextBox, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteTextBox }};
//     virtual wxRichTextBox* WriteTextBox(const wxRichTextAttr& textAttr = wxDEFAULT_RICHTEXTATTR);
static int LUACALL wxLua_wxRichTextCtrl_WriteTextBox(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxRichTextAttr textAttr = wxDEFAULT_RICHTEXTATTR
    const wxRichTextAttr * textAttr = (argCount >= 2 ? (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr) : &wxDEFAULT_RICHTEXTATTR);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call WriteTextBox
    wxRichTextBox* returns = (wxRichTextBox*)self->WriteTextBox(*textAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_XYToPosition[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextCtrl_XYToPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_XYToPosition[1] = {{ wxLua_wxRichTextCtrl_XYToPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_XYToPosition }};
//     virtual long XYToPosition(long x, long y) const;
static int LUACALL wxLua_wxRichTextCtrl_XYToPosition(lua_State *L)
{
    // long y
    long y = (long)wxlua_getnumbertype(L, 3);
    // long x
    long x = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextCtrl * self = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call XYToPosition
    long returns = (self->XYToPosition(x, y));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCtrl_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_constructor1[1] = {{ wxLua_wxRichTextCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 8, s_wxluatypeArray_wxLua_wxRichTextCtrl_constructor1 }};
//         long style = wxRE_MULTILINE, const wxValidator& validator = wxDefaultValidator, const wxString& name = wxTextCtrlNameStr);
static int LUACALL wxLua_wxRichTextCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxTextCtrlNameStr
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxTextCtrlNameStr));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxRE_MULTILINE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxRE_MULTILINE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value = wxEmptyString
    const wxString value = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxRichTextCtrl* returns = new wxRichTextCtrl(parent, id, value, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

static int LUACALL wxLua_wxRichTextCtrl_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_constructor[1] = {{ wxLua_wxRichTextCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextCtrl( );
static int LUACALL wxLua_wxRichTextCtrl_constructor(lua_State *L)
{
    // call constructor
    wxRichTextCtrl* returns = new wxRichTextCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCtrl);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetBuffer_overload[] =
{
    { wxLua_wxRichTextCtrl_GetBuffer1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBuffer1 },
    { wxLua_wxRichTextCtrl_GetBuffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBuffer },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_GetBuffer_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_GetBuffer_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetBufferBitmap_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap)
    { wxLua_wxRichTextCtrl_GetBufferBitmap1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBufferBitmap1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap)
    { wxLua_wxRichTextCtrl_GetBufferBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetBufferBitmap },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap)
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_GetBufferBitmap_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_GetBufferBitmap_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo_overload[] =
{
    { wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo1 },
    { wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection_overload[] =
{
    { wxLua_wxRichTextCtrl_GetSelection2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection2 },
    { wxLua_wxRichTextCtrl_GetSelection1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection1 },
    { wxLua_wxRichTextCtrl_GetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetSelection },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStyle_overload[] =
{
    { wxLua_wxRichTextCtrl_GetStyle1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyle1 },
    { wxLua_wxRichTextCtrl_GetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyle },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_GetStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_GetStyle_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleForRange_overload[] =
{
    { wxLua_wxRichTextCtrl_GetStyleForRange1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleForRange1 },
    { wxLua_wxRichTextCtrl_GetStyleForRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetStyleForRange },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleForRange_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleForRange_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_GetUncombinedStyle_overload[] =
{
    { wxLua_wxRichTextCtrl_GetUncombinedStyle1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUncombinedStyle1 },
    { wxLua_wxRichTextCtrl_GetUncombinedStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_GetUncombinedStyle },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_GetUncombinedStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_GetUncombinedStyle_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_HitTest_overload[] =
{

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextCtrl_HitTest1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_HitTest1 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextCtrl_HitTest, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_HitTest },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_HitTest_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_HitTest_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_NumberList_overload[] =
{
    { wxLua_wxRichTextCtrl_NumberList1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_NumberList1 },
    { wxLua_wxRichTextCtrl_NumberList, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_NumberList },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_NumberList_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_NumberList_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_PromoteList_overload[] =
{
    { wxLua_wxRichTextCtrl_PromoteList1, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_PromoteList1 },
    { wxLua_wxRichTextCtrl_PromoteList, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_PromoteList },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_PromoteList_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_PromoteList_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyle_overload[] =
{
    { wxLua_wxRichTextCtrl_SetDefaultStyle1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyle1 },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextCtrl_SetDefaultStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetDefaultStyle },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyle_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetListStyle_overload[] =
{
    { wxLua_wxRichTextCtrl_SetListStyle1, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetListStyle1 },
    { wxLua_wxRichTextCtrl_SetListStyle, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetListStyle },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_SetListStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_SetListStyle_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetSelection_overload[] =
{
    { wxLua_wxRichTextCtrl_SetSelection1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelection1 },
    { wxLua_wxRichTextCtrl_SetSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetSelection },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_SetSelection_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_SetSelection_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle_overload[] =
{
    { wxLua_wxRichTextCtrl_SetStyle4, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle4 },
    { wxLua_wxRichTextCtrl_SetStyle3, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle3 },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextCtrl_SetStyle2, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle2 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextCtrl_SetStyle1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle1 },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { wxLua_wxRichTextCtrl_SetStyle, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_SetStyle },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage_overload[] =
{
    { wxLua_wxRichTextCtrl_WriteImage3, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage3 },
    { wxLua_wxRichTextCtrl_WriteImage2, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage2 },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextCtrl_WriteImage1, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage1 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextCtrl_WriteImage, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextCtrl_WriteImage },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { wxLua_wxRichTextCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 8, s_wxluatypeArray_wxLua_wxRichTextCtrl_constructor1 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { wxLua_wxRichTextCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextCtrl_delete_function(void** p)
{
    wxRichTextCtrl* o = (wxRichTextCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextCtrl_methods[] = {
#if (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "AddImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_AddImage, 1, NULL },
#endif // (wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "AddParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_AddParagraph, 1, NULL },
    { "AppendText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_AppendText, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "ApplyAlignmentToSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ApplyAlignmentToSelection, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "ApplyBoldToSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ApplyBoldToSelection, 1, NULL },
    { "ApplyItalicToSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ApplyItalicToSelection, 1, NULL },
    { "ApplyStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ApplyStyle, 1, NULL },
    { "ApplyStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ApplyStyleSheet, 1, NULL },
    { "ApplyTextEffectToSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ApplyTextEffectToSelection, 1, NULL },
    { "ApplyUnderlineToSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ApplyUnderlineToSelection, 1, NULL },
    { "BatchingUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BatchingUndo, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "BeginAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginAlignment, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "BeginBatchUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginBatchUndo, 1, NULL },
    { "BeginBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginBold, 1, NULL },
    { "BeginCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginCharacterStyle, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "BeginFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "BeginFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginFontSize, 1, NULL },
    { "BeginItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginItalic, 1, NULL },
    { "BeginLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginLeftIndent, 1, NULL },
    { "BeginLineSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginLineSpacing, 1, NULL },
    { "BeginListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginListStyle, 1, NULL },
    { "BeginNumberedBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginNumberedBullet, 1, NULL },
    { "BeginParagraphSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginParagraphSpacing, 1, NULL },
    { "BeginParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginParagraphStyle, 1, NULL },
    { "BeginRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginRightIndent, 1, NULL },
    { "BeginStandardBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginStandardBullet, 1, NULL },
    { "BeginStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginStyle, 1, NULL },
    { "BeginSuppressUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginSuppressUndo, 1, NULL },
    { "BeginSymbolBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginSymbolBullet, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "BeginTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "BeginURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginURL, 1, NULL },
    { "BeginUnderline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_BeginUnderline, 1, NULL },
    { "CanCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanCopy, 1, NULL },
    { "CanCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanCut, 1, NULL },
    { "CanDeleteRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanDeleteRange, 1, NULL },
    { "CanDeleteSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanDeleteSelection, 1, NULL },
    { "CanEditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanEditProperties, 1, NULL },
    { "CanInsertContent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanInsertContent, 1, NULL },
    { "CanPaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanPaste, 1, NULL },
    { "CanRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanRedo, 1, NULL },
    { "CanUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_CanUndo, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Clear, 1, NULL },
    { "ClearAvailableFontNames", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextCtrl_ClearAvailableFontNames, 1, NULL },
    { "ClearListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ClearListStyle, 1, NULL },
    { "Command", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Command, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Copy, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

    { "Cut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Cut, 1, NULL },
    { "Delete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Delete, 1, NULL },
    { "DeleteSelectedContent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DeleteSelectedContent, 1, NULL },
    { "DeleteSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DeleteSelection, 1, NULL },
    { "DiscardEdits", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DiscardEdits, 1, NULL },
    { "DoGetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DoGetValue, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)
    { "DoLoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DoLoadFile, 1, NULL },
    { "DoSaveFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DoSaveFile, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)

    { "DoWriteText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DoWriteText, 1, NULL },
    { "DoesSelectionHaveTextEffectFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_DoesSelectionHaveTextEffectFlag, 1, NULL },
    { "EditProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EditProperties, 1, NULL },
    { "EnableVerticalScrollbar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EnableVerticalScrollbar, 1, NULL },
    { "EnableVirtualAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EnableVirtualAttributes, 1, NULL },
    { "EndAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndAlignment, 1, NULL },
    { "EndAllStyles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndAllStyles, 1, NULL },
    { "EndBatchUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndBatchUndo, 1, NULL },
    { "EndBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndBold, 1, NULL },
    { "EndCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndCharacterStyle, 1, NULL },
    { "EndFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndFont, 1, NULL },
    { "EndFontSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndFontSize, 1, NULL },
    { "EndItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndItalic, 1, NULL },
    { "EndLeftIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndLeftIndent, 1, NULL },
    { "EndLineSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndLineSpacing, 1, NULL },
    { "EndListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndListStyle, 1, NULL },
    { "EndNumberedBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndNumberedBullet, 1, NULL },
    { "EndParagraphSpacing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndParagraphSpacing, 1, NULL },
    { "EndParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndParagraphStyle, 1, NULL },
    { "EndRightIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndRightIndent, 1, NULL },
    { "EndStandardBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndStandardBullet, 1, NULL },
    { "EndStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndStyle, 1, NULL },
    { "EndSuppressUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndSuppressUndo, 1, NULL },
    { "EndSymbolBullet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndSymbolBullet, 1, NULL },
    { "EndTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndTextColour, 1, NULL },
    { "EndURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndURL, 1, NULL },
    { "EndUnderline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_EndUnderline, 1, NULL },
    { "ExtendSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ExtendSelection, 1, NULL },
    { "FindCaretPositionForCharacterPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_FindCaretPositionForCharacterPosition, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindContainerAtPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_FindContainerAtPoint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "FindNextWordPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_FindNextWordPosition, 1, NULL },
    { "FindRangeForList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_FindRangeForList, 1, NULL },
    { "ForceDelayedLayout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ForceDelayedLayout, 1, NULL },
    { "GetAdjustedCaretPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetAdjustedCaretPosition, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetAvailableFontNames", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextCtrl_GetAvailableFontNames, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetBasicStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetBasicStyle, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetBuffer_overload, s_wxluafunc_wxLua_wxRichTextCtrl_GetBuffer_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap))
    { "GetBufferBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetBufferBitmap_overload, s_wxluafunc_wxLua_wxRichTextCtrl_GetBufferBitmap_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxBitmap))

    { "GetCaretAtLineStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretAtLineStart, 1, NULL },
    { "GetCaretPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretPosition, 1, NULL },
    { "GetCaretPositionForDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretPositionForDefaultStyle, 1, NULL },
    { "GetCaretPositionForIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetCaretPositionForIndex, 1, NULL },

#if (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetCommandProcessor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetCommandProcessor, 1, NULL },
#endif // (wxLUA_USE_wxCommandProcessor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetContextMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenu, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetContextMenuPropertiesInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo_overload, s_wxluafunc_wxLua_wxRichTextCtrl_GetContextMenuPropertiesInfo_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetDefaultStyleEx", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetDefaultStyleEx, 1, NULL },
    { "GetDelayedLayoutThreshold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetDelayedLayoutThreshold, 1, NULL },
    { "GetDimensionScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetDimensionScale, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)
    { "GetDragStartPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetDragStartPoint, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "GetDragStartTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetDragStartTime, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { "GetDragging", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetDragging, 1, NULL },
    { "GetFilename", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFilename, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetFirstVisiblePoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFirstVisiblePoint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetFirstVisiblePosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFirstVisiblePosition, 1, NULL },
    { "GetFocusObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFocusObject, 1, NULL },
    { "GetFontScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFontScale, 1, NULL },
    { "GetFullLayoutRequired", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFullLayoutRequired, 1, NULL },
    { "GetFullLayoutSavedPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFullLayoutSavedPosition, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)
    { "GetFullLayoutTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetFullLayoutTime, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)

    { "GetHandlerFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetHandlerFlags, 1, NULL },
    { "GetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetInsertionPoint, 1, NULL },
    { "GetInternalSelectionRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetInternalSelectionRange, 1, NULL },
    { "GetLastPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetLastPosition, 1, NULL },
    { "GetLineLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetLineLength, 1, NULL },
    { "GetLineText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetLineText, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetLogicalPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetLogicalPoint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetNumberOfLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetNumberOfLines, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetPhysicalPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetPhysicalPoint, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
    { "GetPreDrag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetPreDrag, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)

    { "GetPropertiesMenuLabel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetPropertiesMenuLabel, 1, NULL },
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetRange, 1, NULL },
    { "GetScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetScale, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetScaledPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetScaledPoint, 1, NULL },
    { "GetScaledRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetScaledRect, 1, NULL },
    { "GetScaledSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetScaledSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection_overload, s_wxluafunc_wxLua_wxRichTextCtrl_GetSelection_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetSelectionAnchor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetSelectionAnchor, 1, NULL },
    { "GetSelectionAnchorObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetSelectionAnchorObject, 1, NULL },
    { "GetSelectionRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetSelectionRange, 1, NULL },
    { "GetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetStringSelection, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetStyle_overload, s_wxluafunc_wxLua_wxRichTextCtrl_GetStyle_overload_count, 0 },
    { "GetStyleForRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleForRange_overload, s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleForRange_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetStyleSheet, 1, NULL },

#if (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetTextCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetTextCursor, 1, NULL },
    { "GetURLCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetURLCursor, 1, NULL },
#endif // (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetUncombinedStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetUncombinedStyle_overload, s_wxluafunc_wxLua_wxRichTextCtrl_GetUncombinedStyle_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetUnscaledPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetUnscaledPoint, 1, NULL },
    { "GetUnscaledRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetUnscaledRect, 1, NULL },
    { "GetUnscaledSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetUnscaledSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetVerticalScrollbarEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetVerticalScrollbarEnabled, 1, NULL },
    { "GetVirtualAttributesEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetVirtualAttributesEnabled, 1, NULL },
    { "GetVisibleLineForCaretPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_GetVisibleLineForCaretPosition, 1, NULL },
    { "HasCharacterAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_HasCharacterAttributes, 1, NULL },
    { "HasParagraphAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_HasParagraphAttributes, 1, NULL },
    { "HasSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_HasSelection, 1, NULL },
    { "HasUnfocusedSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_HasUnfocusedSelection, 1, NULL },

#if (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_HitTest_overload, s_wxluafunc_wxLua_wxRichTextCtrl_HitTest_overload_count, 0 },
#endif // (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Init, 1, NULL },
    { "Invalidate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Invalidate, 1, NULL },
    { "IsDefaultStyleShowing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsDefaultStyleShowing, 1, NULL },
    { "IsEditable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsEditable, 1, NULL },
    { "IsModified", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsModified, 1, NULL },
    { "IsMultiLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsMultiLine, 1, NULL },
    { "IsPositionVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsPositionVisible, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "IsSelectionAligned", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionAligned, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "IsSelectionBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionBold, 1, NULL },
    { "IsSelectionItalics", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionItalics, 1, NULL },
    { "IsSelectionUnderlined", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsSelectionUnderlined, 1, NULL },
    { "IsSingleLine", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_IsSingleLine, 1, NULL },
    { "KeyboardNavigate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_KeyboardNavigate, 1, NULL },
    { "LayoutContent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_LayoutContent, 1, NULL },
    { "LineBreak", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_LineBreak, 1, NULL },
    { "MarkDirty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MarkDirty, 1, NULL },
    { "MoveCaret", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveCaret, 1, NULL },
    { "MoveCaretBack", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveCaretBack, 1, NULL },
    { "MoveCaretForward", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveCaretForward, 1, NULL },
    { "MoveDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveDown, 1, NULL },
    { "MoveEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveEnd, 1, NULL },
    { "MoveHome", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveHome, 1, NULL },
    { "MoveLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveLeft, 1, NULL },
    { "MoveRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveRight, 1, NULL },
    { "MoveToLineEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveToLineEnd, 1, NULL },
    { "MoveToLineStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveToLineStart, 1, NULL },
    { "MoveToParagraphEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveToParagraphEnd, 1, NULL },
    { "MoveToParagraphStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveToParagraphStart, 1, NULL },
    { "MoveUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_MoveUp, 1, NULL },
    { "Newline", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Newline, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "NumberList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_NumberList_overload, s_wxluafunc_wxLua_wxRichTextCtrl_NumberList_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "OnCaptureLost", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnCaptureLost, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "OnChar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnChar, 1, NULL },
    { "OnClear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnClear, 1, NULL },
    { "OnContextMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnContextMenu, 1, NULL },
    { "OnCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnCopy, 1, NULL },
    { "OnCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnCut, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "OnDrop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnDrop, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

#if (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "OnDropFiles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnDropFiles, 1, NULL },
#endif // (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "OnEraseBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnEraseBackground, 1, NULL },
    { "OnIdle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnIdle, 1, NULL },
    { "OnKillFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnKillFocus, 1, NULL },
    { "OnLeftClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnLeftClick, 1, NULL },
    { "OnLeftDClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnLeftDClick, 1, NULL },
    { "OnLeftUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnLeftUp, 1, NULL },
    { "OnMiddleClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnMiddleClick, 1, NULL },
    { "OnMoveMouse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnMoveMouse, 1, NULL },
    { "OnPaint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnPaint, 1, NULL },
    { "OnPaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnPaste, 1, NULL },
    { "OnProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnProperties, 1, NULL },
    { "OnRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnRedo, 1, NULL },
    { "OnRightClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnRightClick, 1, NULL },
    { "OnScroll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnScroll, 1, NULL },
    { "OnSelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnSelectAll, 1, NULL },
    { "OnSetFocus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnSetFocus, 1, NULL },
    { "OnSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnSize, 1, NULL },
    { "OnSysColourChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnSysColourChanged, 1, NULL },
    { "OnUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUndo, 1, NULL },
    { "OnUpdateClear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateClear, 1, NULL },
    { "OnUpdateCopy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateCopy, 1, NULL },
    { "OnUpdateCut", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateCut, 1, NULL },
    { "OnUpdatePaste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdatePaste, 1, NULL },
    { "OnUpdateProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateProperties, 1, NULL },
    { "OnUpdateRedo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateRedo, 1, NULL },
    { "OnUpdateSelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateSelectAll, 1, NULL },
    { "OnUpdateUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_OnUpdateUndo, 1, NULL },
    { "PageDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PageDown, 1, NULL },
    { "PageUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PageUp, 1, NULL },

#if (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "PaintAboveContent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PaintAboveContent, 1, NULL },
    { "PaintBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PaintBackground, 1, NULL },
#endif // (wxLUA_USE_wxDC) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Paste", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Paste, 1, NULL },
    { "PopStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PopStyleSheet, 1, NULL },
    { "PositionCaret", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PositionCaret, 1, NULL },
    { "PositionToXY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PositionToXY, 1, NULL },
    { "PrepareContent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PrepareContent, 1, NULL },

#if ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "PrepareContextMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PrepareContextMenu, 1, NULL },
#endif // ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "ProcessBackKey", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ProcessBackKey, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "ProcessMouseMovement", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ProcessMouseMovement, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "PromoteList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PromoteList_overload, s_wxluafunc_wxLua_wxRichTextCtrl_PromoteList_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "PushStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_PushStyleSheet, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxPointSizeRect)
    { "RecreateBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_RecreateBuffer, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_BUFFERED_PAINTING)) && (wxLUA_USE_wxPointSizeRect)

    { "Redo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Redo, 1, NULL },
    { "RefreshForSelectionChange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_RefreshForSelectionChange, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Remove, 1, NULL },
    { "Replace", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Replace, 1, NULL },
    { "ScrollIntoView", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ScrollIntoView, 1, NULL },
    { "SelectNone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SelectNone, 1, NULL },
    { "SelectWord", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SelectWord, 1, NULL },
    { "SetAndShowDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetAndShowDefaultStyle, 1, NULL },
    { "SetBasicStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetBasicStyle, 1, NULL },
    { "SetCaretAtLineStart", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretAtLineStart, 1, NULL },
    { "SetCaretPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretPosition, 1, NULL },
    { "SetCaretPositionAfterClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretPositionAfterClick, 1, NULL },
    { "SetCaretPositionForDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetCaretPositionForDefaultStyle, 1, NULL },

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetContextMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetContextMenu, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
    { "SetDefaultStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyle_overload, s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyle_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

    { "SetDefaultStyleToCursorStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetDefaultStyleToCursorStyle, 1, NULL },
    { "SetDelayedLayoutThreshold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetDelayedLayoutThreshold, 1, NULL },
    { "SetDimensionScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetDimensionScale, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)
    { "SetDragStartPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetDragStartPoint, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "SetDragStartTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetDragStartTime, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATETIME) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { "SetDragging", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetDragging, 1, NULL },
    { "SetEditable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetEditable, 1, NULL },
    { "SetFilename", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetFilename, 1, NULL },
    { "SetFocusObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetFocusObject, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetFontScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetFontScale, 1, NULL },
    { "SetFullLayoutRequired", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetFullLayoutRequired, 1, NULL },
    { "SetFullLayoutSavedPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetFullLayoutSavedPosition, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)
    { "SetFullLayoutTime", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetFullLayoutTime, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_LONGLONG)

    { "SetHandlerFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetHandlerFlags, 1, NULL },
    { "SetInsertionPoint", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetInsertionPoint, 1, NULL },
    { "SetInsertionPointEnd", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetInsertionPointEnd, 1, NULL },
    { "SetInternalSelectionRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetInternalSelectionRange, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetListStyle_overload, s_wxluafunc_wxLua_wxRichTextCtrl_SetListStyle_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetMaxLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetMaxLength, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
    { "SetPreDrag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetPreDrag, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)

    { "SetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetProperties, 1, NULL },
    { "SetScale", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetScale, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetSelection_overload, s_wxluafunc_wxLua_wxRichTextCtrl_SetSelection_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetSelectionAnchor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetSelectionAnchor, 1, NULL },
    { "SetSelectionAnchorObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetSelectionAnchorObject, 1, NULL },
    { "SetSelectionRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetSelectionRange, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle_overload, s_wxluafunc_wxLua_wxRichTextCtrl_SetStyle_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL))

    { "SetStyleEx", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetStyleEx, 1, NULL },
    { "SetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetStyleSheet, 1, NULL },

#if (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetTextCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetTextCursor, 1, NULL },
    { "SetURLCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetURLCursor, 1, NULL },
#endif // (wxLUA_USE_wxCursor) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetupScrollbars", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SetupScrollbars, 1, NULL },
    { "ShouldInheritColours", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ShouldInheritColours, 1, NULL },

#if ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "ShowContextMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ShowContextMenu, 1, NULL },
#endif // ((wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "ShowPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_ShowPosition, 1, NULL },
    { "StoreFocusObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_StoreFocusObject, 1, NULL },
    { "SuppressingUndo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_SuppressingUndo, 1, NULL },
    { "Undo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_Undo, 1, NULL },
    { "WordLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_WordLeft, 1, NULL },
    { "WordRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_WordRight, 1, NULL },
    { "WriteField", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_WriteField, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "WriteImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage_overload, s_wxluafunc_wxLua_wxRichTextCtrl_WriteImage_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxImage && wxUSE_IMAGE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "WriteTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_WriteTable, 1, NULL },
    { "WriteText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_WriteText, 1, NULL },
    { "WriteTextBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_WriteTextBox, 1, NULL },
    { "XYToPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCtrl_XYToPosition, 1, NULL },

#if (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextCtrl_constructor_overload, s_wxluafunc_wxLua_wxRichTextCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextCtrl_methodCount = sizeof(wxRichTextCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
// ---------------------------------------------------------------------------
// Bind class wxRichTextDropSource
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextDropSource'
int wxluatype_wxRichTextDropSource = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDropSource_delete[] = { &wxluatype_wxRichTextDropSource, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDropSource_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDropSource_delete }};


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDropSource_constructor[] = { &wxluatype_wxDataObject, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextDropSource_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDropSource_constructor[1] = {{ wxLua_wxRichTextDropSource_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxRichTextDropSource_constructor }};
//     wxRichTextDropSource(wxDataObject& data, wxRichTextCtrl* tc);
static int LUACALL wxLua_wxRichTextDropSource_constructor(lua_State *L)
{
    // wxRichTextCtrl tc
    wxRichTextCtrl * tc = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // wxDataObject data
    wxDataObject * data = (wxDataObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataObject);
    // call constructor
    wxRichTextDropSource* returns = new wxRichTextDropSource(*data, tc);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextDropSource);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextDropSource);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)



void wxLua_wxRichTextDropSource_delete_function(void** p)
{
    wxRichTextDropSource* o = (wxRichTextDropSource*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextDropSource_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextDropSource_delete, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextDropSource", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextDropSource_constructor, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextDropSource_methodCount = sizeof(wxRichTextDropSource_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
// ---------------------------------------------------------------------------
// Bind class wxRichTextDropTarget
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextDropTarget'
int wxluatype_wxRichTextDropTarget = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDropTarget_OnData[] = { &wxluatype_wxRichTextDropTarget, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextDropTarget_OnData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDropTarget_OnData[1] = {{ wxLua_wxRichTextDropTarget_OnData, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextDropTarget_OnData }};
//     virtual wxDragResult OnData(wxCoord x, wxCoord y, wxDragResult def);
static int LUACALL wxLua_wxRichTextDropTarget_OnData(lua_State *L)
{
    // wxDragResult def
    wxDragResult def = (wxDragResult)wxlua_getenumtype(L, 4);
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextDropTarget * self = (wxRichTextDropTarget *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextDropTarget);
    // call OnData
    wxDragResult returns = (self->OnData(x, y, def));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDropTarget_delete[] = { &wxluatype_wxRichTextDropTarget, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDropTarget_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDropTarget_delete }};


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextDropTarget_constructor[] = { &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextDropTarget_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextDropTarget_constructor[1] = {{ wxLua_wxRichTextDropTarget_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextDropTarget_constructor }};
//   wxRichTextDropTarget(wxRichTextCtrl* tc);
static int LUACALL wxLua_wxRichTextDropTarget_constructor(lua_State *L)
{
    // wxRichTextCtrl tc
    wxRichTextCtrl * tc = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call constructor
    wxRichTextDropTarget* returns = new wxRichTextDropTarget(tc);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextDropTarget);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextDropTarget);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)



void wxLua_wxRichTextDropTarget_delete_function(void** p)
{
    wxRichTextDropTarget* o = (wxRichTextDropTarget*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextDropTarget_methods[] = {
#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "OnData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextDropTarget_OnData, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextDropTarget_delete, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextDropTarget", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextDropTarget_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextDropTarget_methodCount = sizeof(wxRichTextDropTarget_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
// ---------------------------------------------------------------------------
// Bind class wxRichTextEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextEvent'
int wxluatype_wxRichTextEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_Clone[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_Clone[1] = {{ wxLua_wxRichTextEvent_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_Clone }};
//     virtual wxEvent *Clone() const;
static int LUACALL wxLua_wxRichTextEvent_Clone(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call Clone
    wxEvent* returns = (wxEvent*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetCharacter[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetCharacter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetCharacter[1] = {{ wxLua_wxRichTextEvent_GetCharacter, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetCharacter }};
//     wxChar GetCharacter() const;
static int LUACALL wxLua_wxRichTextEvent_GetCharacter(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetCharacter
    wxChar returns = (self->GetCharacter());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetContainer[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetContainer[1] = {{ wxLua_wxRichTextEvent_GetContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetContainer }};
//     wxRichTextParagraphLayoutBox* GetContainer() const;
static int LUACALL wxLua_wxRichTextEvent_GetContainer(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetContainer
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->GetContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetFlags[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetFlags[1] = {{ wxLua_wxRichTextEvent_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxRichTextEvent_GetFlags(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetNewStyleSheet[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetNewStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetNewStyleSheet[1] = {{ wxLua_wxRichTextEvent_GetNewStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetNewStyleSheet }};
//     wxRichTextStyleSheet* GetNewStyleSheet() const;
static int LUACALL wxLua_wxRichTextEvent_GetNewStyleSheet(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetNewStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetNewStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetOldContainer[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetOldContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetOldContainer[1] = {{ wxLua_wxRichTextEvent_GetOldContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetOldContainer }};
//     wxRichTextParagraphLayoutBox* GetOldContainer() const;
static int LUACALL wxLua_wxRichTextEvent_GetOldContainer(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetOldContainer
    wxRichTextParagraphLayoutBox* returns = (wxRichTextParagraphLayoutBox*)self->GetOldContainer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphLayoutBox);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetOldStyleSheet[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetOldStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetOldStyleSheet[1] = {{ wxLua_wxRichTextEvent_GetOldStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetOldStyleSheet }};
//     wxRichTextStyleSheet* GetOldStyleSheet() const;
static int LUACALL wxLua_wxRichTextEvent_GetOldStyleSheet(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetOldStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetOldStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetPosition[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetPosition[1] = {{ wxLua_wxRichTextEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetPosition }};
//     long GetPosition() const;
static int LUACALL wxLua_wxRichTextEvent_GetPosition(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetPosition
    long returns = (self->GetPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_GetRange[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_GetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_GetRange[1] = {{ wxLua_wxRichTextEvent_GetRange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_GetRange }};
//     const wxRichTextRange& GetRange() const;
static int LUACALL wxLua_wxRichTextEvent_GetRange(lua_State *L)
{
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call GetRange
    const wxRichTextRange* returns = (const wxRichTextRange*)&self->GetRange();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextRange);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetCharacter[] = { &wxluatype_wxRichTextEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetCharacter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetCharacter[1] = {{ wxLua_wxRichTextEvent_SetCharacter, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetCharacter }};
//     void SetCharacter(wxChar ch);
static int LUACALL wxLua_wxRichTextEvent_SetCharacter(lua_State *L)
{
    // wxChar ch
    wxChar ch = (wxChar)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetCharacter
    self->SetCharacter(ch);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetContainer[] = { &wxluatype_wxRichTextEvent, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetContainer[1] = {{ wxLua_wxRichTextEvent_SetContainer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetContainer }};
//     void SetContainer(wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextEvent_SetContainer(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetContainer
    self->SetContainer(container);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetFlags[] = { &wxluatype_wxRichTextEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetFlags[1] = {{ wxLua_wxRichTextEvent_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxRichTextEvent_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetNewStyleSheet[] = { &wxluatype_wxRichTextEvent, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetNewStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetNewStyleSheet[1] = {{ wxLua_wxRichTextEvent_SetNewStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetNewStyleSheet }};
//     void SetNewStyleSheet(wxRichTextStyleSheet* sheet);
static int LUACALL wxLua_wxRichTextEvent_SetNewStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetNewStyleSheet
    self->SetNewStyleSheet(sheet);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetOldContainer[] = { &wxluatype_wxRichTextEvent, &wxluatype_wxRichTextParagraphLayoutBox, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetOldContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetOldContainer[1] = {{ wxLua_wxRichTextEvent_SetOldContainer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetOldContainer }};
//     void SetOldContainer(wxRichTextParagraphLayoutBox* container);
static int LUACALL wxLua_wxRichTextEvent_SetOldContainer(lua_State *L)
{
    // wxRichTextParagraphLayoutBox container
    wxRichTextParagraphLayoutBox * container = (wxRichTextParagraphLayoutBox *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphLayoutBox);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetOldContainer
    self->SetOldContainer(container);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetOldStyleSheet[] = { &wxluatype_wxRichTextEvent, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetOldStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetOldStyleSheet[1] = {{ wxLua_wxRichTextEvent_SetOldStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetOldStyleSheet }};
//     void SetOldStyleSheet(wxRichTextStyleSheet* sheet);
static int LUACALL wxLua_wxRichTextEvent_SetOldStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetOldStyleSheet
    self->SetOldStyleSheet(sheet);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetPosition[] = { &wxluatype_wxRichTextEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetPosition[1] = {{ wxLua_wxRichTextEvent_SetPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetPosition }};
//     void SetPosition(long pos);
static int LUACALL wxLua_wxRichTextEvent_SetPosition(lua_State *L)
{
    // long pos
    long pos = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetPosition
    self->SetPosition(pos);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_SetRange[] = { &wxluatype_wxRichTextEvent, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextEvent_SetRange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_SetRange[1] = {{ wxLua_wxRichTextEvent_SetRange, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_SetRange }};
//     void SetRange(const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextEvent_SetRange(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextRange);
    // get this
    wxRichTextEvent * self = (wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call SetRange
    self->SetRange(*range);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_delete[] = { &wxluatype_wxRichTextEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_constructor1[] = { &wxluatype_wxRichTextEvent, NULL };
static int LUACALL wxLua_wxRichTextEvent_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_constructor1[1] = {{ wxLua_wxRichTextEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_constructor1 }};
//     wxRichTextEvent(const wxRichTextEvent& event);
static int LUACALL wxLua_wxRichTextEvent_constructor1(lua_State *L)
{
    // const wxRichTextEvent event
    const wxRichTextEvent * event = (const wxRichTextEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextEvent);
    // call constructor
    wxRichTextEvent* returns = new wxRichTextEvent(*event);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextEvent_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_constructor[1] = {{ wxLua_wxRichTextEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_constructor }};
//     wxRichTextEvent(wxEventType commandType = wxEVT_NULL, int winid = 0);
static int LUACALL wxLua_wxRichTextEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int winid = 0
    int winid = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType commandType = wxEVT_NULL
    wxEventType commandType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxRichTextEvent* returns = new wxRichTextEvent(commandType, winid);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextEvent);

    return 1;
}




#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextEvent_constructor_overload[] =
{
    { wxLua_wxRichTextEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextEvent_constructor1 },
    { wxLua_wxRichTextEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxRichTextEvent_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP))

void wxLua_wxRichTextEvent_delete_function(void** p)
{
    wxRichTextEvent* o = (wxRichTextEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextEvent_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_Clone, 1, NULL },
    { "GetCharacter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetCharacter, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetContainer, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetFlags, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetNewStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetNewStyleSheet, 1, NULL },
    { "GetOldContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetOldContainer, 1, NULL },
    { "GetOldStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetOldStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetPosition, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_GetRange, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetCharacter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetCharacter, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetContainer, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetFlags, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetNewStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetNewStyleSheet, 1, NULL },
    { "SetOldContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetOldContainer, 1, NULL },
    { "SetOldStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetOldStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetPosition, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetRange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextEvent_SetRange, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextEvent_delete, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP))
    { "wxRichTextEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextEvent_constructor_overload, s_wxluafunc_wxLua_wxRichTextEvent_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP))

    { 0, 0, 0, 0 },
};

int wxRichTextEvent_methodCount = sizeof(wxRichTextEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// ---------------------------------------------------------------------------
// Bind class wxRichTextFormattingDialogFactory
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFormattingDialogFactory'
int wxluatype_wxRichTextFormattingDialogFactory = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_CreateButtons[] = { &wxluatype_wxRichTextFormattingDialogFactory, &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_CreateButtons(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_CreateButtons[1] = {{ wxLua_wxRichTextFormattingDialogFactory_CreateButtons, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_CreateButtons }};
//     virtual bool CreateButtons(wxRichTextFormattingDialog* dialog);
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_CreateButtons(lua_State *L)
{
    // wxRichTextFormattingDialog dialog
    wxRichTextFormattingDialog * dialog = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFormattingDialog);
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call CreateButtons
    bool returns = (self->CreateButtons(dialog));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_CreatePage[] = { &wxluatype_wxRichTextFormattingDialogFactory, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_CreatePage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_CreatePage[1] = {{ wxLua_wxRichTextFormattingDialogFactory_CreatePage, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_CreatePage }};
//     virtual wxPanel* CreatePage(int page, wxString& title, wxRichTextFormattingDialog* dialog);
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_CreatePage(lua_State *L)
{
    // wxRichTextFormattingDialog dialog
    wxRichTextFormattingDialog * dialog = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextFormattingDialog);
    // wxString title
    wxString title = wxlua_getwxStringtype(L, 3);
    // int page
    int page = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call CreatePage
    wxPanel* returns = (wxPanel*)self->CreatePage(page, title, dialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPanel);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_CreatePages[] = { &wxluatype_wxRichTextFormattingDialogFactory, &wxluatype_TNUMBER, &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_CreatePages(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_CreatePages[1] = {{ wxLua_wxRichTextFormattingDialogFactory_CreatePages, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_CreatePages }};
//     virtual bool CreatePages(long pages, wxRichTextFormattingDialog* dialog);
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_CreatePages(lua_State *L)
{
    // wxRichTextFormattingDialog dialog
    wxRichTextFormattingDialog * dialog = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextFormattingDialog);
    // long pages
    long pages = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call CreatePages
    bool returns = (self->CreatePages(pages, dialog));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_GetPageId[] = { &wxluatype_wxRichTextFormattingDialogFactory, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_GetPageId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_GetPageId[1] = {{ wxLua_wxRichTextFormattingDialogFactory_GetPageId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_GetPageId }};
//     virtual int GetPageId(int i) const;
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_GetPageId(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call GetPageId
    int returns = (self->GetPageId(i));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_GetPageIdCount[] = { &wxluatype_wxRichTextFormattingDialogFactory, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_GetPageIdCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_GetPageIdCount[1] = {{ wxLua_wxRichTextFormattingDialogFactory_GetPageIdCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_GetPageIdCount }};
//     virtual int GetPageIdCount() const;
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_GetPageIdCount(lua_State *L)
{
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call GetPageIdCount
    int returns = (self->GetPageIdCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_GetPageImage[] = { &wxluatype_wxRichTextFormattingDialogFactory, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_GetPageImage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_GetPageImage[1] = {{ wxLua_wxRichTextFormattingDialogFactory_GetPageImage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_GetPageImage }};
//     virtual int GetPageImage(int id) const;
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_GetPageImage(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call GetPageImage
    int returns = (self->GetPageImage(id));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_SetSheetStyle[] = { &wxluatype_wxRichTextFormattingDialogFactory, &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_SetSheetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_SetSheetStyle[1] = {{ wxLua_wxRichTextFormattingDialogFactory_SetSheetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_SetSheetStyle }};
//     virtual bool SetSheetStyle(wxRichTextFormattingDialog* dialog);
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_SetSheetStyle(lua_State *L)
{
    // wxRichTextFormattingDialog dialog
    wxRichTextFormattingDialog * dialog = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextFormattingDialog);
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call SetSheetStyle
    bool returns = (self->SetSheetStyle(dialog));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_ShowHelp[] = { &wxluatype_wxRichTextFormattingDialogFactory, &wxluatype_TNUMBER, &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_ShowHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_ShowHelp[1] = {{ wxLua_wxRichTextFormattingDialogFactory_ShowHelp, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_ShowHelp }};
//     virtual bool ShowHelp(int page, wxRichTextFormattingDialog* dialog);
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_ShowHelp(lua_State *L)
{
    // wxRichTextFormattingDialog dialog
    wxRichTextFormattingDialog * dialog = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextFormattingDialog);
    // int page
    int page = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialogFactory * self = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call ShowHelp
    bool returns = (self->ShowHelp(page, dialog));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_delete[] = { &wxluatype_wxRichTextFormattingDialogFactory, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialogFactory_delete }};

static int LUACALL wxLua_wxRichTextFormattingDialogFactory_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_constructor[1] = {{ wxLua_wxRichTextFormattingDialogFactory_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextFormattingDialogFactory();
static int LUACALL wxLua_wxRichTextFormattingDialogFactory_constructor(lua_State *L)
{
    // call constructor
    wxRichTextFormattingDialogFactory* returns = new wxRichTextFormattingDialogFactory();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFormattingDialogFactory);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFormattingDialogFactory);

    return 1;
}




void wxLua_wxRichTextFormattingDialogFactory_delete_function(void** p)
{
    wxRichTextFormattingDialogFactory* o = (wxRichTextFormattingDialogFactory*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFormattingDialogFactory_methods[] = {
    { "CreateButtons", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_CreateButtons, 1, NULL },
    { "CreatePage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_CreatePage, 1, NULL },
    { "CreatePages", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_CreatePages, 1, NULL },
    { "GetPageId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_GetPageId, 1, NULL },
    { "GetPageIdCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_GetPageIdCount, 1, NULL },
    { "GetPageImage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_GetPageImage, 1, NULL },
    { "SetSheetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_SetSheetStyle, 1, NULL },
    { "ShowHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_ShowHelp, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_delete, 1, NULL },
    { "wxRichTextFormattingDialogFactory", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextFormattingDialogFactory_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextFormattingDialogFactory_methodCount = sizeof(wxRichTextFormattingDialogFactory_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// ---------------------------------------------------------------------------
// Bind class wxRichTextFormattingDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextFormattingDialog'
int wxluatype_wxRichTextFormattingDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_AddPageId[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_AddPageId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_AddPageId[1] = {{ wxLua_wxRichTextFormattingDialog_AddPageId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_AddPageId }};
//     void AddPageId(int id);
static int LUACALL wxLua_wxRichTextFormattingDialog_AddPageId(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call AddPageId
    self->AddPageId(id);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ApplyStyle1[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxRichTextCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_ApplyStyle1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_ApplyStyle1[1] = {{ wxLua_wxRichTextFormattingDialog_ApplyStyle1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ApplyStyle1 }};
//     virtual bool ApplyStyle(wxRichTextCtrl* ctrl, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO);
static int LUACALL wxLua_wxRichTextFormattingDialog_ApplyStyle1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO
    int flags = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRICHTEXT_SETSTYLE_WITH_UNDO);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call ApplyStyle
    bool returns = (self->ApplyStyle(ctrl, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ApplyStyle[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_ApplyStyle(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_ApplyStyle[1] = {{ wxLua_wxRichTextFormattingDialog_ApplyStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ApplyStyle }};
//     virtual bool ApplyStyle(wxRichTextCtrl* ctrl, const wxRichTextRange& range, int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO|wxRICHTEXT_SETSTYLE_OPTIMIZE);
static int LUACALL wxLua_wxRichTextFormattingDialog_ApplyStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO | wxRICHTEXT_SETSTYLE_OPTIMIZE
    int flags = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxRICHTEXT_SETSTYLE_WITH_UNDO | wxRICHTEXT_SETSTYLE_OPTIMIZE);
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call ApplyStyle
    bool returns = (self->ApplyStyle(ctrl, *range, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ConvertFromString[] = { &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_ConvertFromString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_ConvertFromString[1] = {{ wxLua_wxRichTextFormattingDialog_ConvertFromString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ConvertFromString }};
//     static bool ConvertFromString(const wxString& str, int& ret, int unit);
static int LUACALL wxLua_wxRichTextFormattingDialog_ConvertFromString(lua_State *L)
{
    // int unit
    int unit = (int)wxlua_getnumbertype(L, 3);
    // int ret
    int * ret = (int *)wxlua_touserdata(L, 2);
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 1);
    // call ConvertFromString
    bool returns = (wxRichTextFormattingDialog::ConvertFromString(str, *ret, unit));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_Create[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_TNUMBER, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_Create[1] = {{ wxLua_wxRichTextFormattingDialog_Create, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_Create }};
//         long style = wxDEFAULT_DIALOG_STYLE);
static int LUACALL wxLua_wxRichTextFormattingDialog_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxDEFAULT_DIALOG_STYLE
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : wxDEFAULT_DIALOG_STYLE);
    // const wxSize sz = wxDefaultSize
    const wxSize * sz = (argCount >= 7 ? (const wxSize *)wxluaT_getuserdatatype(L, 7, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 5 ? (wxWindowID)wxlua_getnumbertype(L, 5) : wxID_ANY);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 4);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // long flags
    long flags = (long)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call Create
    bool returns = (self->Create(flags, parent, title, id, *pos, *sz, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxClassInfo)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_FindPage[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxClassInfo, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_FindPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_FindPage[1] = {{ wxLua_wxRichTextFormattingDialog_FindPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_FindPage }};
//     wxWindow* FindPage(wxClassInfo* info) const;
static int LUACALL wxLua_wxRichTextFormattingDialog_FindPage(lua_State *L)
{
    // wxClassInfo info
    wxClassInfo * info = (wxClassInfo *)wxluaT_getuserdatatype(L, 2, wxluatype_wxClassInfo);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call FindPage
    wxWindow* returns = (wxWindow*)self->FindPage(info);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxClassInfo)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetAttributes1[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetAttributes1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetAttributes1[1] = {{ wxLua_wxRichTextFormattingDialog_GetAttributes1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetAttributes1 }};
//     wxRichTextAttr& GetAttributes();
static int LUACALL wxLua_wxRichTextFormattingDialog_GetAttributes1(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call GetAttributes
    wxRichTextAttr* returns = (wxRichTextAttr*)&self->GetAttributes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetAttributes[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetAttributes(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetAttributes[1] = {{ wxLua_wxRichTextFormattingDialog_GetAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetAttributes }};
//     const wxRichTextAttr& GetAttributes() const;
static int LUACALL wxLua_wxRichTextFormattingDialog_GetAttributes(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call GetAttributes
    const wxRichTextAttr* returns = (const wxRichTextAttr*)&self->GetAttributes();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDialog[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDialog(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDialog[1] = {{ wxLua_wxRichTextFormattingDialog_GetDialog, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDialog }};
//     static wxRichTextFormattingDialog* GetDialog(wxWindow* win);
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDialog(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetDialog
    wxRichTextFormattingDialog* returns = (wxRichTextFormattingDialog*)wxRichTextFormattingDialog::GetDialog(win);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFormattingDialog);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDialogAttributes[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDialogAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDialogAttributes[1] = {{ wxLua_wxRichTextFormattingDialog_GetDialogAttributes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDialogAttributes }};
//     static wxRichTextAttr* GetDialogAttributes(wxWindow* win);
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDialogAttributes(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetDialogAttributes
    wxRichTextAttr* returns = (wxRichTextAttr*)wxRichTextFormattingDialog::GetDialogAttributes(win);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDialogStyleDefinition[] = { &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDialogStyleDefinition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDialogStyleDefinition[1] = {{ wxLua_wxRichTextFormattingDialog_GetDialogStyleDefinition, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDialogStyleDefinition }};
//     static wxRichTextStyleDefinition* GetDialogStyleDefinition(wxWindow* win);
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDialogStyleDefinition(lua_State *L)
{
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call GetDialogStyleDefinition
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)wxRichTextFormattingDialog::GetDialogStyleDefinition(win);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDimensionValue[] = { &wxluatype_wxTextAttrDimension, &wxluatype_wxTextCtrl, &wxluatype_wxComboBox, &wxluatype_wxCheckBox, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDimensionValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDimensionValue[1] = {{ wxLua_wxRichTextFormattingDialog_GetDimensionValue, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 5, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetDimensionValue }};
//     static void GetDimensionValue(wxTextAttrDimension& dim, wxTextCtrl* valueCtrl, wxComboBox* unitsCtrl, wxCheckBox* checkBox, wxArrayInt* units = NULL);
static int LUACALL wxLua_wxRichTextFormattingDialog_GetDimensionValue(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt units = NULL
    wxArrayInt * units = (argCount >= 5 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 5, wxluatype_wxArrayInt) : NULL);
    // wxCheckBox checkBox
    wxCheckBox * checkBox = (wxCheckBox *)wxluaT_getuserdatatype(L, 4, wxluatype_wxCheckBox);
    // wxComboBox unitsCtrl
    wxComboBox * unitsCtrl = (wxComboBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxComboBox);
    // wxTextCtrl valueCtrl
    wxTextCtrl * valueCtrl = (wxTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextCtrl);
    // wxTextAttrDimension dim
    wxTextAttrDimension * dim = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call GetDimensionValue
    wxRichTextFormattingDialog::GetDimensionValue(*dim, valueCtrl, unitsCtrl, checkBox, units);

    return 0;
}

#endif // ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static int LUACALL wxLua_wxRichTextFormattingDialog_GetFormattingDialogFactory(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetFormattingDialogFactory[1] = {{ wxLua_wxRichTextFormattingDialog_GetFormattingDialogFactory, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxRichTextFormattingDialogFactory* GetFormattingDialogFactory();
static int LUACALL wxLua_wxRichTextFormattingDialog_GetFormattingDialogFactory(lua_State *L)
{
    // call GetFormattingDialogFactory
    wxRichTextFormattingDialogFactory* returns = (wxRichTextFormattingDialogFactory*)wxRichTextFormattingDialog::GetFormattingDialogFactory();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFormattingDialogFactory);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetObject[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetObject[1] = {{ wxLua_wxRichTextFormattingDialog_GetObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetObject }};
//     wxRichTextObject* GetObject() const;
static int LUACALL wxLua_wxRichTextFormattingDialog_GetObject(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call GetObject
    wxRichTextObject* returns = (wxRichTextObject*)self->GetObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetOptions[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetOptions(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetOptions[1] = {{ wxLua_wxRichTextFormattingDialog_GetOptions, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetOptions }};
//     int GetOptions() const;
static int LUACALL wxLua_wxRichTextFormattingDialog_GetOptions(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call GetOptions
    int returns = (self->GetOptions());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetStyle[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxRichTextCtrl, &wxluatype_wxRichTextRange, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetStyle[1] = {{ wxLua_wxRichTextFormattingDialog_GetStyle, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetStyle }};
//     virtual bool GetStyle(wxRichTextCtrl* ctrl, const wxRichTextRange& range);
static int LUACALL wxLua_wxRichTextFormattingDialog_GetStyle(lua_State *L)
{
    // const wxRichTextRange range
    const wxRichTextRange * range = (const wxRichTextRange *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextRange);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call GetStyle
    bool returns = (self->GetStyle(ctrl, *range));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetStyleDefinition[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetStyleDefinition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetStyleDefinition[1] = {{ wxLua_wxRichTextFormattingDialog_GetStyleDefinition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetStyleDefinition }};
//     virtual wxRichTextStyleDefinition* GetStyleDefinition() const;
static int LUACALL wxLua_wxRichTextFormattingDialog_GetStyleDefinition(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call GetStyleDefinition
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->GetStyleDefinition();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetStyleSheet[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetStyleSheet[1] = {{ wxLua_wxRichTextFormattingDialog_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetStyleSheet }};
//     virtual wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextFormattingDialog_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_HasOption[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_HasOption(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_HasOption[1] = {{ wxLua_wxRichTextFormattingDialog_HasOption, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_HasOption }};
//     bool HasOption(int option) const;
static int LUACALL wxLua_wxRichTextFormattingDialog_HasOption(lua_State *L)
{
    // int option
    int option = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call HasOption
    bool returns = (self->HasOption(option));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_Init[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_Init[1] = {{ wxLua_wxRichTextFormattingDialog_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextFormattingDialog_Init(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_OnHelp[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_OnHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_OnHelp[1] = {{ wxLua_wxRichTextFormattingDialog_OnHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_OnHelp }};
//     void OnHelp(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextFormattingDialog_OnHelp(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call OnHelp
    self->OnHelp(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_OnUpdateHelp[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_OnUpdateHelp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_OnUpdateHelp[1] = {{ wxLua_wxRichTextFormattingDialog_OnUpdateHelp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_OnUpdateHelp }};
//     void OnUpdateHelp(wxUpdateUIEvent& event);
static int LUACALL wxLua_wxRichTextFormattingDialog_OnUpdateHelp(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call OnUpdateHelp
    self->OnUpdateHelp(*event);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetAttributes[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetAttributes[1] = {{ wxLua_wxRichTextFormattingDialog_SetAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetAttributes }};
//     void SetAttributes(const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetAttributes(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call SetAttributes
    self->SetAttributes(*attr);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetDimensionValue[] = { &wxluatype_wxTextAttrDimension, &wxluatype_wxTextCtrl, &wxluatype_wxComboBox, &wxluatype_wxCheckBox, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetDimensionValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetDimensionValue[1] = {{ wxLua_wxRichTextFormattingDialog_SetDimensionValue, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 4, 5, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetDimensionValue }};
//     static void SetDimensionValue(wxTextAttrDimension& dim, wxTextCtrl* valueCtrl, wxComboBox* unitsCtrl, wxCheckBox* checkBox, wxArrayInt* units = NULL);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetDimensionValue(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxArrayInt units = NULL
    wxArrayInt * units = (argCount >= 5 ? (wxArrayInt *)wxluaT_getuserdatatype(L, 5, wxluatype_wxArrayInt) : NULL);
    // wxCheckBox checkBox
    wxCheckBox * checkBox = (wxCheckBox *)wxluaT_getuserdatatype(L, 4, wxluatype_wxCheckBox);
    // wxComboBox unitsCtrl
    wxComboBox * unitsCtrl = (wxComboBox *)wxluaT_getuserdatatype(L, 3, wxluatype_wxComboBox);
    // wxTextCtrl valueCtrl
    wxTextCtrl * valueCtrl = (wxTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextCtrl);
    // wxTextAttrDimension dim
    wxTextAttrDimension * dim = (wxTextAttrDimension *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttrDimension);
    // call SetDimensionValue
    wxRichTextFormattingDialog::SetDimensionValue(*dim, valueCtrl, unitsCtrl, checkBox, units);

    return 0;
}

#endif // ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetFormattingDialogFactory[] = { &wxluatype_wxRichTextFormattingDialogFactory, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetFormattingDialogFactory(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetFormattingDialogFactory[1] = {{ wxLua_wxRichTextFormattingDialog_SetFormattingDialogFactory, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetFormattingDialogFactory }};
//     static void SetFormattingDialogFactory(wxRichTextFormattingDialogFactory* factory);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetFormattingDialogFactory(lua_State *L)
{
    // wxRichTextFormattingDialogFactory factory
    wxRichTextFormattingDialogFactory * factory = (wxRichTextFormattingDialogFactory *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialogFactory);
    // call SetFormattingDialogFactory
    wxRichTextFormattingDialog::SetFormattingDialogFactory(factory);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetObject[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetObject[1] = {{ wxLua_wxRichTextFormattingDialog_SetObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetObject }};
//     void SetObject(wxRichTextObject* obj);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetObject(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call SetObject
    self->SetObject(obj);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetOptions[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetOptions(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetOptions[1] = {{ wxLua_wxRichTextFormattingDialog_SetOptions, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetOptions }};
//     void SetOptions(int options);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetOptions(lua_State *L)
{
    // int options
    int options = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call SetOptions
    self->SetOptions(options);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetShowToolTips[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetShowToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetShowToolTips[1] = {{ wxLua_wxRichTextFormattingDialog_SetShowToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetShowToolTips }};
//     static void SetShowToolTips(bool show);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetShowToolTips(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 1);
    // call SetShowToolTips
    wxRichTextFormattingDialog::SetShowToolTips(show);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetStyle[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxRichTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetStyle[1] = {{ wxLua_wxRichTextFormattingDialog_SetStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetStyle }};
//     virtual bool SetStyle(const wxRichTextAttr& style, bool update = true);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool update = true
    bool update = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call SetStyle
    bool returns = (self->SetStyle(*style, update));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetStyleDefinition[] = { &wxluatype_wxRichTextFormattingDialog, &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextStyleSheet, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_SetStyleDefinition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetStyleDefinition[1] = {{ wxLua_wxRichTextFormattingDialog_SetStyleDefinition, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_SetStyleDefinition }};
//     virtual bool SetStyleDefinition(const wxRichTextStyleDefinition& styleDef, wxRichTextStyleSheet* sheet, bool update = true);
static int LUACALL wxLua_wxRichTextFormattingDialog_SetStyleDefinition(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool update = true
    bool update = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleSheet);
    // const wxRichTextStyleDefinition styleDef
    const wxRichTextStyleDefinition * styleDef = (const wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call SetStyleDefinition
    bool returns = (self->SetStyleDefinition(*styleDef, sheet, update));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextFormattingDialog_ShowToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_ShowToolTips[1] = {{ wxLua_wxRichTextFormattingDialog_ShowToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool ShowToolTips();
static int LUACALL wxLua_wxRichTextFormattingDialog_ShowToolTips(lua_State *L)
{
    // call ShowToolTips
    bool returns = (wxRichTextFormattingDialog::ShowToolTips());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_TransferDataFromWindow[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_TransferDataFromWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_TransferDataFromWindow[1] = {{ wxLua_wxRichTextFormattingDialog_TransferDataFromWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_TransferDataFromWindow }};
//     virtual bool TransferDataFromWindow();
static int LUACALL wxLua_wxRichTextFormattingDialog_TransferDataFromWindow(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call TransferDataFromWindow
    bool returns = (self->TransferDataFromWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_TransferDataToWindow[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_TransferDataToWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_TransferDataToWindow[1] = {{ wxLua_wxRichTextFormattingDialog_TransferDataToWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_TransferDataToWindow }};
//     virtual bool TransferDataToWindow();
static int LUACALL wxLua_wxRichTextFormattingDialog_TransferDataToWindow(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call TransferDataToWindow
    bool returns = (self->TransferDataToWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_UpdateDisplay[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_UpdateDisplay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_UpdateDisplay[1] = {{ wxLua_wxRichTextFormattingDialog_UpdateDisplay, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_UpdateDisplay }};
//     virtual bool UpdateDisplay();
static int LUACALL wxLua_wxRichTextFormattingDialog_UpdateDisplay(lua_State *L)
{
    // get this
    wxRichTextFormattingDialog * self = (wxRichTextFormattingDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextFormattingDialog);
    // call UpdateDisplay
    bool returns = (self->UpdateDisplay());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_delete[] = { &wxluatype_wxRichTextFormattingDialog, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_delete }};


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_wxWindow, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextFormattingDialog_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_constructor1[1] = {{ wxLua_wxRichTextFormattingDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_constructor1 }};
//         long style = wxDEFAULT_DIALOG_STYLE);
static int LUACALL wxLua_wxRichTextFormattingDialog_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxDEFAULT_DIALOG_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDEFAULT_DIALOG_STYLE);
    // const wxSize sz = wxDefaultSize
    const wxSize * sz = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 4 ? (wxWindowID)wxlua_getnumbertype(L, 4) : wxID_ANY);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // long flags
    long flags = (long)wxlua_getnumbertype(L, 1);
    // call constructor
    wxRichTextFormattingDialog* returns = new wxRichTextFormattingDialog(flags, parent, title, id, *pos, *sz, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFormattingDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFormattingDialog);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxRichTextFormattingDialog_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_constructor[1] = {{ wxLua_wxRichTextFormattingDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextFormattingDialog();
static int LUACALL wxLua_wxRichTextFormattingDialog_constructor(lua_State *L)
{
    // call constructor
    wxRichTextFormattingDialog* returns = new wxRichTextFormattingDialog();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextFormattingDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextFormattingDialog);

    return 1;
}




#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_ApplyStyle_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFormattingDialog_ApplyStyle1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ApplyStyle1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFormattingDialog_ApplyStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_ApplyStyle },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextFormattingDialog_ApplyStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextFormattingDialog_ApplyStyle_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetAttributes_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFormattingDialog_GetAttributes1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetAttributes1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextFormattingDialog_GetAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_GetAttributes },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetAttributes_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetAttributes_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextFormattingDialog_constructor_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextFormattingDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxRichTextFormattingDialog_constructor1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextFormattingDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextFormattingDialog_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextFormattingDialog_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

void wxLua_wxRichTextFormattingDialog_delete_function(void** p)
{
    wxRichTextFormattingDialog* o = (wxRichTextFormattingDialog*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextFormattingDialog_methods[] = {
    { "AddPageId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_AddPageId, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "ApplyStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_ApplyStyle_overload, s_wxluafunc_wxLua_wxRichTextFormattingDialog_ApplyStyle_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "ConvertFromString", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_ConvertFromString, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_Create, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxClassInfo)
    { "FindPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_FindPage, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxClassInfo)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "GetAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetAttributes_overload, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetAttributes_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "GetDialog", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDialog, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetDialogAttributes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDialogAttributes, 1, NULL },
    { "GetDialogStyleDefinition", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDialogStyleDefinition, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "GetDimensionValue", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetDimensionValue, 1, NULL },
#endif // ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "GetFormattingDialogFactory", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetFormattingDialogFactory, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetObject, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetOptions", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetOptions, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetStyle, 1, NULL },
    { "GetStyleDefinition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetStyleDefinition, 1, NULL },
    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_GetStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "HasOption", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_HasOption, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_Init, 1, NULL },
    { "OnHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_OnHelp, 1, NULL },
    { "OnUpdateHelp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_OnUpdateHelp, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetAttributes, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "SetDimensionValue", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetDimensionValue, 1, NULL },
#endif // ((((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "SetFormattingDialogFactory", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetFormattingDialogFactory, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetObject, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetOptions", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetOptions, 1, NULL },
    { "SetShowToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetShowToolTips, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetStyle, 1, NULL },
    { "SetStyleDefinition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_SetStyleDefinition, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "ShowToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextFormattingDialog_ShowToolTips, 1, NULL },
    { "TransferDataFromWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_TransferDataFromWindow, 1, NULL },
    { "TransferDataToWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_TransferDataToWindow, 1, NULL },
    { "UpdateDisplay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextFormattingDialog_UpdateDisplay, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextFormattingDialog_delete, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "wxRichTextFormattingDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextFormattingDialog_constructor_overload, s_wxluafunc_wxLua_wxRichTextFormattingDialog_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { 0, 0, 0, 0 },
};

int wxRichTextFormattingDialog_methodCount = sizeof(wxRichTextFormattingDialog_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxRichTextFormattingDialog_enums[] = {
#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { "Option_AllowPixelFontSize", wxRichTextFormattingDialog::Option_AllowPixelFontSize },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { NULL, 0, },
};
int wxRichTextFormattingDialog_enumCount = sizeof(wxRichTextFormattingDialog_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// ---------------------------------------------------------------------------
// Bind class wxRichTextHTMLHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextHTMLHandler'
int wxluatype_wxRichTextHTMLHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_CanHandle[] = { &wxluatype_wxRichTextHTMLHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_CanHandle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_CanHandle[1] = {{ wxLua_wxRichTextHTMLHandler_CanHandle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_CanHandle }};
//     virtual bool CanHandle(const wxString& filename) const;
static int LUACALL wxLua_wxRichTextHTMLHandler_CanHandle(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call CanHandle
    bool returns = (self->CanHandle(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_CanLoad[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_CanLoad(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_CanLoad[1] = {{ wxLua_wxRichTextHTMLHandler_CanLoad, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_CanLoad }};
//     virtual bool CanLoad() const;
static int LUACALL wxLua_wxRichTextHTMLHandler_CanLoad(lua_State *L)
{
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call CanLoad
    bool returns = (self->CanLoad());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_CanSave[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_CanSave(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_CanSave[1] = {{ wxLua_wxRichTextHTMLHandler_CanSave, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_CanSave }};
//     virtual bool CanSave() const;
static int LUACALL wxLua_wxRichTextHTMLHandler_CanSave(lua_State *L)
{
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call CanSave
    bool returns = (self->CanSave());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_ClearTemporaryImageLocations[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_ClearTemporaryImageLocations(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_ClearTemporaryImageLocations[1] = {{ wxLua_wxRichTextHTMLHandler_ClearTemporaryImageLocations, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_ClearTemporaryImageLocations }};
//     void ClearTemporaryImageLocations();
static int LUACALL wxLua_wxRichTextHTMLHandler_ClearTemporaryImageLocations(lua_State *L)
{
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call ClearTemporaryImageLocations
    self->ClearTemporaryImageLocations();

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1[] = { &wxluatype_TNUMBER, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1[1] = {{ wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1 }};
//     static bool DeleteTemporaryImages(int flags, const wxArrayString& imageLocations);
static int LUACALL wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1(lua_State *L)
{
    // const wxArrayString imageLocations
    wxLuaSmartwxArrayString imageLocations = wxlua_getwxArrayString(L, 2);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 1);
    // call DeleteTemporaryImages
    bool returns = (wxRichTextHTMLHandler::DeleteTemporaryImages(flags, imageLocations));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages[1] = {{ wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages }};
//     bool DeleteTemporaryImages();
static int LUACALL wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages(lua_State *L)
{
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call DeleteTemporaryImages
    bool returns = (self->DeleteTemporaryImages());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_GetFontSizeMapping[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_GetFontSizeMapping(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_GetFontSizeMapping[1] = {{ wxLua_wxRichTextHTMLHandler_GetFontSizeMapping, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_GetFontSizeMapping }};
//     wxArrayInt GetFontSizeMapping() const;
static int LUACALL wxLua_wxRichTextHTMLHandler_GetFontSizeMapping(lua_State *L)
{
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call GetFontSizeMapping
    // allocate a new object using the copy constructor
    wxArrayInt* returns = new wxArrayInt(self->GetFontSizeMapping());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxArrayInt);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_GetTempDir[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_GetTempDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_GetTempDir[1] = {{ wxLua_wxRichTextHTMLHandler_GetTempDir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_GetTempDir }};
//     const wxString& GetTempDir() const;
static int LUACALL wxLua_wxRichTextHTMLHandler_GetTempDir(lua_State *L)
{
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call GetTempDir
    wxString returns = (self->GetTempDir());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_GetTemporaryImageLocations[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_GetTemporaryImageLocations(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_GetTemporaryImageLocations[1] = {{ wxLua_wxRichTextHTMLHandler_GetTemporaryImageLocations, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_GetTemporaryImageLocations }};
//     const wxArrayString& GetTemporaryImageLocations() const;
static int LUACALL wxLua_wxRichTextHTMLHandler_GetTemporaryImageLocations(lua_State *L)
{
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call GetTemporaryImageLocations
    const wxArrayString* returns = (const wxArrayString*)&self->GetTemporaryImageLocations();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetFileCounter[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_SetFileCounter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetFileCounter[1] = {{ wxLua_wxRichTextHTMLHandler_SetFileCounter, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetFileCounter }};
//     static void SetFileCounter(int counter);
static int LUACALL wxLua_wxRichTextHTMLHandler_SetFileCounter(lua_State *L)
{
    // int counter
    int counter = (int)wxlua_getnumbertype(L, 1);
    // call SetFileCounter
    wxRichTextHTMLHandler::SetFileCounter(counter);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetFontSizeMapping[] = { &wxluatype_wxRichTextHTMLHandler, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_SetFontSizeMapping(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetFontSizeMapping[1] = {{ wxLua_wxRichTextHTMLHandler_SetFontSizeMapping, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetFontSizeMapping }};
//     void SetFontSizeMapping(const wxArrayInt& fontSizeMapping);
static int LUACALL wxLua_wxRichTextHTMLHandler_SetFontSizeMapping(lua_State *L)
{
    // const wxArrayInt fontSizeMapping
    wxLuaSmartwxArrayInt fontSizeMapping = wxlua_getwxArrayInt(L, 2);
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call SetFontSizeMapping
    self->SetFontSizeMapping(fontSizeMapping);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetTempDir[] = { &wxluatype_wxRichTextHTMLHandler, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_SetTempDir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetTempDir[1] = {{ wxLua_wxRichTextHTMLHandler_SetTempDir, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetTempDir }};
//     void SetTempDir(const wxString& tempDir);
static int LUACALL wxLua_wxRichTextHTMLHandler_SetTempDir(lua_State *L)
{
    // const wxString tempDir
    const wxString tempDir = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call SetTempDir
    self->SetTempDir(tempDir);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetTemporaryImageLocations[] = { &wxluatype_wxRichTextHTMLHandler, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_SetTemporaryImageLocations(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetTemporaryImageLocations[1] = {{ wxLua_wxRichTextHTMLHandler_SetTemporaryImageLocations, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_SetTemporaryImageLocations }};
//     void SetTemporaryImageLocations(const wxArrayString& locations);
static int LUACALL wxLua_wxRichTextHTMLHandler_SetTemporaryImageLocations(lua_State *L)
{
    // const wxArrayString locations
    wxLuaSmartwxArrayString locations = wxlua_getwxArrayString(L, 2);
    // get this
    wxRichTextHTMLHandler * self = (wxRichTextHTMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHTMLHandler);
    // call SetTemporaryImageLocations
    self->SetTemporaryImageLocations(locations);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_delete[] = { &wxluatype_wxRichTextHTMLHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextHTMLHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_constructor[1] = {{ wxLua_wxRichTextHTMLHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_constructor }};
//     wxRichTextHTMLHandler(const wxString& name, const wxString& ext, int type = wxRICHTEXT_TYPE_HTML);
static int LUACALL wxLua_wxRichTextHTMLHandler_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int type = wxRICHTEXT_TYPE_HTML
    int type = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRICHTEXT_TYPE_HTML);
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextHTMLHandler* returns = new wxRichTextHTMLHandler(name, ext, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextHTMLHandler);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextHTMLHandler);

    return 1;
}




#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)
    { wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)
    { wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages },
};
static int s_wxluafunc_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

void wxLua_wxRichTextHTMLHandler_delete_function(void** p)
{
    wxRichTextHTMLHandler* o = (wxRichTextHTMLHandler*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextHTMLHandler_methods[] = {
    { "CanHandle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_CanHandle, 1, NULL },
    { "CanLoad", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_CanLoad, 1, NULL },
    { "CanSave", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_CanSave, 1, NULL },
    { "ClearTemporaryImageLocations", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_ClearTemporaryImageLocations, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "DeleteTemporaryImages", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages_overload, s_wxluafunc_wxLua_wxRichTextHTMLHandler_DeleteTemporaryImages_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
    { "GetFontSizeMapping", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_GetFontSizeMapping, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)

    { "GetTempDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_GetTempDir, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)
    { "GetTemporaryImageLocations", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_GetTemporaryImageLocations, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)

    { "SetFileCounter", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetFileCounter, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)
    { "SetFontSizeMapping", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetFontSizeMapping, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayInt)

    { "SetTempDir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetTempDir, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)
    { "SetTemporaryImageLocations", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHTMLHandler_SetTemporaryImageLocations, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxArrayString)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextHTMLHandler_delete, 1, NULL },
    { "wxRichTextHTMLHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextHTMLHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextHTMLHandler_methodCount = sizeof(wxRichTextHTMLHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// ---------------------------------------------------------------------------
// Bind class wxRichTextObjectPropertiesDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextObjectPropertiesDialog'
int wxluatype_wxRichTextObjectPropertiesDialog = WXLUA_TUNKNOWN;

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_Create[] = { &wxluatype_wxRichTextObjectPropertiesDialog, &wxluatype_wxRichTextObject, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_Create[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_Create }};
//     bool Create( wxRichTextObject* obj, wxWindow* parent, wxWindowID id = wxRichTextObjectPropertiesDialog::ID_RICHTEXTOBJECTPROPERTIESDIALOG, const wxString& caption = "Object Properties", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = SYMBOL_WXRICHTEXTOBJECTPROPERTIESDIALOG_STYLE );
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = SYMBOL_WXRICHTEXTOBJECTPROPERTIESDIALOG_STYLE
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : SYMBOL_WXRICHTEXTOBJECTPROPERTIESDIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 7 ? (const wxSize *)wxluaT_getuserdatatype(L, 7, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString caption = "Object Properties"
    const wxString caption = (argCount >= 5 ? wxlua_getwxStringtype(L, 5) : wxString(wxT("Object Properties")));
    // wxWindowID id = wxRichTextObjectPropertiesDialog::ID_RICHTEXTOBJECTPROPERTIESDIALOG
    wxWindowID id = (argCount >= 4 ? (wxWindowID)wxlua_getnumbertype(L, 4) : wxRichTextObjectPropertiesDialog::ID_RICHTEXTOBJECTPROPERTIESDIALOG);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextObjectPropertiesDialog * self = (wxRichTextObjectPropertiesDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPropertiesDialog);
    // call Create
    bool returns = (self->Create(obj, parent, id, caption, *pos, *size, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_CreateControls[] = { &wxluatype_wxRichTextObjectPropertiesDialog, NULL };
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_CreateControls(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_CreateControls[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_CreateControls, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_CreateControls }};
//     void CreateControls();
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_CreateControls(lua_State *L)
{
    // get this
    wxRichTextObjectPropertiesDialog * self = (wxRichTextObjectPropertiesDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPropertiesDialog);
    // call CreateControls
    self->CreateControls();

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_GetBitmapResource[] = { &wxluatype_wxRichTextObjectPropertiesDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_GetBitmapResource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_GetBitmapResource[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_GetBitmapResource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_GetBitmapResource }};
//     wxBitmap GetBitmapResource( const wxString& name );
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_GetBitmapResource(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextObjectPropertiesDialog * self = (wxRichTextObjectPropertiesDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPropertiesDialog);
    // call GetBitmapResource
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapResource(name));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxBitmap)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_GetIconResource[] = { &wxluatype_wxRichTextObjectPropertiesDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_GetIconResource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_GetIconResource[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_GetIconResource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_GetIconResource }};
//     wxIcon GetIconResource( const wxString& name );
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_GetIconResource(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextObjectPropertiesDialog * self = (wxRichTextObjectPropertiesDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPropertiesDialog);
    // call GetIconResource
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetIconResource(name));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_Init[] = { &wxluatype_wxRichTextObjectPropertiesDialog, NULL };
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_Init[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_Init(lua_State *L)
{
    // get this
    wxRichTextObjectPropertiesDialog * self = (wxRichTextObjectPropertiesDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObjectPropertiesDialog);
    // call Init
    self->Init();

    return 0;
}

static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_ShowToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_ShowToolTips[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_ShowToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool ShowToolTips();
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_ShowToolTips(lua_State *L)
{
    // call ShowToolTips
    bool returns = (wxRichTextObjectPropertiesDialog::ShowToolTips());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_delete[] = { &wxluatype_wxRichTextObjectPropertiesDialog, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_delete }};


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_constructor1[] = { &wxluatype_wxRichTextObject, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_constructor1(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_constructor1[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_constructor1 }};
//     wxRichTextObjectPropertiesDialog( wxRichTextObject* obj, wxWindow* parent, wxWindowID id = wxRichTextObjectPropertiesDialog::ID_RICHTEXTOBJECTPROPERTIESDIALOG, const wxString& caption = "Object Properties", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = SYMBOL_WXRICHTEXTOBJECTPROPERTIESDIALOG_STYLE );
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = SYMBOL_WXRICHTEXTOBJECTPROPERTIESDIALOG_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : SYMBOL_WXRICHTEXTOBJECTPROPERTIESDIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString caption = "Object Properties"
    const wxString caption = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxT("Object Properties")));
    // wxWindowID id = wxRichTextObjectPropertiesDialog::ID_RICHTEXTOBJECTPROPERTIESDIALOG
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxRichTextObjectPropertiesDialog::ID_RICHTEXTOBJECTPROPERTIESDIALOG);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextObject);
    // call constructor
    wxRichTextObjectPropertiesDialog* returns = new wxRichTextObjectPropertiesDialog(obj, parent, id, caption, *pos, *size, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectPropertiesDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPropertiesDialog);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_constructor(lua_State *L);
// // // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_constructor[1] = {{ wxLua_wxRichTextObjectPropertiesDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextObjectPropertiesDialog();
static int LUACALL wxLua_wxRichTextObjectPropertiesDialog_constructor(lua_State *L)
{
    // call constructor
    wxRichTextObjectPropertiesDialog* returns = new wxRichTextObjectPropertiesDialog();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextObjectPropertiesDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObjectPropertiesDialog);

    return 1;
}




#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_constructor_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObjectPropertiesDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxRichTextObjectPropertiesDialog_constructor1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextObjectPropertiesDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

void wxLua_wxRichTextObjectPropertiesDialog_delete_function(void** p)
{
    wxRichTextObjectPropertiesDialog* o = (wxRichTextObjectPropertiesDialog*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextObjectPropertiesDialog_methods[] = {
#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_Create, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "CreateControls", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_CreateControls, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxBitmap)
    { "GetBitmapResource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_GetBitmapResource, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxBitmap)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxIcon)
    { "GetIconResource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_GetIconResource, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxIcon)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_Init, 1, NULL },
    { "ShowToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_ShowToolTips, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_delete, 1, NULL },

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "wxRichTextObjectPropertiesDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_constructor_overload, s_wxluafunc_wxLua_wxRichTextObjectPropertiesDialog_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { 0, 0, 0, 0 },
};

int wxRichTextObjectPropertiesDialog_methodCount = sizeof(wxRichTextObjectPropertiesDialog_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxRichTextObjectPropertiesDialog_enums[] = {
#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { "ID_RICHTEXTOBJECTPROPERTIESDIALOG", wxRichTextObjectPropertiesDialog::ID_RICHTEXTOBJECTPROPERTIESDIALOG },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { NULL, 0, },
};
int wxRichTextObjectPropertiesDialog_enumCount = sizeof(wxRichTextObjectPropertiesDialog_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxrichtext_print.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------



#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextHeaderFooterData
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextHeaderFooterData'
int wxluatype_wxRichTextHeaderFooterData = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_Clear[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_Clear[1] = {{ wxLua_wxRichTextHeaderFooterData_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextHeaderFooterData_Clear(lua_State *L)
{
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_Copy[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_Copy[1] = {{ wxLua_wxRichTextHeaderFooterData_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_Copy }};
//     void Copy(const wxRichTextHeaderFooterData& data);
static int LUACALL wxLua_wxRichTextHeaderFooterData_Copy(lua_State *L)
{
    // const wxRichTextHeaderFooterData data
    const wxRichTextHeaderFooterData * data = (const wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextHeaderFooterData);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call Copy
    self->Copy(*data);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetFont[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetFont[1] = {{ wxLua_wxRichTextHeaderFooterData_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetFont }};
//     const wxFont& GetFont() const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetFont(lua_State *L)
{
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetFont
    const wxFont* returns = (const wxFont*)&self->GetFont();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetFooterMargin[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetFooterMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetFooterMargin[1] = {{ wxLua_wxRichTextHeaderFooterData_GetFooterMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetFooterMargin }};
//     int GetFooterMargin() const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetFooterMargin(lua_State *L)
{
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetFooterMargin
    int returns = (self->GetFooterMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetFooterText[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetFooterText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetFooterText[1] = {{ wxLua_wxRichTextHeaderFooterData_GetFooterText, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetFooterText }};
//     wxString GetFooterText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetFooterText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 3 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN
    wxRichTextOddEvenPage page = (argCount >= 2 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 2) : wxRICHTEXT_PAGE_EVEN);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetFooterText
    wxString returns = (self->GetFooterText(page, location));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetHeaderMargin[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetHeaderMargin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetHeaderMargin[1] = {{ wxLua_wxRichTextHeaderFooterData_GetHeaderMargin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetHeaderMargin }};
//     int GetHeaderMargin() const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetHeaderMargin(lua_State *L)
{
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetHeaderMargin
    int returns = (self->GetHeaderMargin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetHeaderText[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetHeaderText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetHeaderText[1] = {{ wxLua_wxRichTextHeaderFooterData_GetHeaderText, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetHeaderText }};
//     wxString GetHeaderText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetHeaderText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 3 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN
    wxRichTextOddEvenPage page = (argCount >= 2 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 2) : wxRICHTEXT_PAGE_EVEN);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetHeaderText
    wxString returns = (self->GetHeaderText(page, location));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetShowOnFirstPage[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetShowOnFirstPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetShowOnFirstPage[1] = {{ wxLua_wxRichTextHeaderFooterData_GetShowOnFirstPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetShowOnFirstPage }};
//     bool GetShowOnFirstPage() const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetShowOnFirstPage(lua_State *L)
{
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetShowOnFirstPage
    bool returns = (self->GetShowOnFirstPage());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetText[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetText[1] = {{ wxLua_wxRichTextHeaderFooterData_GetText, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetText }};
//     wxString GetText(int headerFooter, wxRichTextOddEvenPage page, wxRichTextPageLocation location) const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetText(lua_State *L)
{
    // wxRichTextPageLocation location
    wxRichTextPageLocation location = (wxRichTextPageLocation)wxlua_getenumtype(L, 4);
    // wxRichTextOddEvenPage page
    wxRichTextOddEvenPage page = (wxRichTextOddEvenPage)wxlua_getenumtype(L, 3);
    // int headerFooter
    int headerFooter = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetText
    wxString returns = (self->GetText(headerFooter, page, location));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetTextColour[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetTextColour[1] = {{ wxLua_wxRichTextHeaderFooterData_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_GetTextColour }};
//     const wxColour& GetTextColour() const;
static int LUACALL wxLua_wxRichTextHeaderFooterData_GetTextColour(lua_State *L)
{
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call GetTextColour
    const wxColour* returns = (const wxColour*)&self->GetTextColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_Init[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_Init[1] = {{ wxLua_wxRichTextHeaderFooterData_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextHeaderFooterData_Init(lua_State *L)
{
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call Init
    self->Init();

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetFont[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetFont[1] = {{ wxLua_wxRichTextHeaderFooterData_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetFont }};
//     void SetFont(const wxFont& font);
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetFooterText[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetFooterText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetFooterText[1] = {{ wxLua_wxRichTextHeaderFooterData_SetFooterText, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetFooterText }};
//     void SetFooterText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE);
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetFooterText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 4 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 4) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL
    wxRichTextOddEvenPage page = (argCount >= 3 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_ALL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call SetFooterText
    self->SetFooterText(text, page, location);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetHeaderText[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetHeaderText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetHeaderText[1] = {{ wxLua_wxRichTextHeaderFooterData_SetHeaderText, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetHeaderText }};
//     void SetHeaderText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE);
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetHeaderText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 4 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 4) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL
    wxRichTextOddEvenPage page = (argCount >= 3 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_ALL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call SetHeaderText
    self->SetHeaderText(text, page, location);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetMargins[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetMargins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetMargins[1] = {{ wxLua_wxRichTextHeaderFooterData_SetMargins, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetMargins }};
//     void SetMargins(int headerMargin, int footerMargin);
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetMargins(lua_State *L)
{
    // int footerMargin
    int footerMargin = (int)wxlua_getnumbertype(L, 3);
    // int headerMargin
    int headerMargin = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call SetMargins
    self->SetMargins(headerMargin, footerMargin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetShowOnFirstPage[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetShowOnFirstPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetShowOnFirstPage[1] = {{ wxLua_wxRichTextHeaderFooterData_SetShowOnFirstPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetShowOnFirstPage }};
//     void SetShowOnFirstPage(bool showOnFirstPage);
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetShowOnFirstPage(lua_State *L)
{
    // bool showOnFirstPage
    bool showOnFirstPage = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call SetShowOnFirstPage
    self->SetShowOnFirstPage(showOnFirstPage);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetText[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetText[1] = {{ wxLua_wxRichTextHeaderFooterData_SetText, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetText }};
//     void SetText(const wxString& text, int headerFooter, wxRichTextOddEvenPage page, wxRichTextPageLocation location);
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetText(lua_State *L)
{
    // wxRichTextPageLocation location
    wxRichTextPageLocation location = (wxRichTextPageLocation)wxlua_getenumtype(L, 5);
    // wxRichTextOddEvenPage page
    wxRichTextOddEvenPage page = (wxRichTextOddEvenPage)wxlua_getenumtype(L, 4);
    // int headerFooter
    int headerFooter = (int)wxlua_getnumbertype(L, 3);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call SetText
    self->SetText(text, headerFooter, page, location);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetTextColour[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetTextColour[1] = {{ wxLua_wxRichTextHeaderFooterData_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_SetTextColour }};
//     void SetTextColour(const wxColour& col);
static int LUACALL wxLua_wxRichTextHeaderFooterData_SetTextColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call SetTextColour
    self->SetTextColour(*col);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_delete[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_op_set[] = { &wxluatype_wxRichTextHeaderFooterData, &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_op_set[1] = {{ wxLua_wxRichTextHeaderFooterData_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_op_set }};
//     void operator= (const wxRichTextHeaderFooterData& data);
static int LUACALL wxLua_wxRichTextHeaderFooterData_op_set(lua_State *L)
{
    // const wxRichTextHeaderFooterData data
    const wxRichTextHeaderFooterData * data = (const wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextHeaderFooterData);
    // get this
    wxRichTextHeaderFooterData * self = (wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call op_set
    (*self)=(*data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_constructor1[] = { &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextHeaderFooterData_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_constructor1[1] = {{ wxLua_wxRichTextHeaderFooterData_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_constructor1 }};
//     wxRichTextHeaderFooterData(const wxRichTextHeaderFooterData& data);
static int LUACALL wxLua_wxRichTextHeaderFooterData_constructor1(lua_State *L)
{
    // const wxRichTextHeaderFooterData data
    const wxRichTextHeaderFooterData * data = (const wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextHeaderFooterData);
    // call constructor
    wxRichTextHeaderFooterData* returns = new wxRichTextHeaderFooterData(*data);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextHeaderFooterData);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextHeaderFooterData);

    return 1;
}

static int LUACALL wxLua_wxRichTextHeaderFooterData_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_constructor[1] = {{ wxLua_wxRichTextHeaderFooterData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextHeaderFooterData();
static int LUACALL wxLua_wxRichTextHeaderFooterData_constructor(lua_State *L)
{
    // call constructor
    wxRichTextHeaderFooterData* returns = new wxRichTextHeaderFooterData();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextHeaderFooterData);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextHeaderFooterData);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextHeaderFooterData_constructor_overload[] =
{
    { wxLua_wxRichTextHeaderFooterData_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextHeaderFooterData_constructor1 },
    { wxLua_wxRichTextHeaderFooterData_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextHeaderFooterData_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextHeaderFooterData_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextHeaderFooterData_delete_function(void** p)
{
    wxRichTextHeaderFooterData* o = (wxRichTextHeaderFooterData*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextHeaderFooterData_methods[] = {
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_Clear, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_Copy, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetFooterMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetFooterMargin, 1, NULL },
    { "GetFooterText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetFooterText, 1, NULL },
    { "GetHeaderMargin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetHeaderMargin, 1, NULL },
    { "GetHeaderText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetHeaderText, 1, NULL },
    { "GetShowOnFirstPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetShowOnFirstPage, 1, NULL },
    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetText, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_Init, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetFooterText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetFooterText, 1, NULL },
    { "SetHeaderText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetHeaderText, 1, NULL },
    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetMargins, 1, NULL },
    { "SetShowOnFirstPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetShowOnFirstPage, 1, NULL },
    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetText, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_delete, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextHeaderFooterData", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_constructor_overload, s_wxluafunc_wxLua_wxRichTextHeaderFooterData_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextHeaderFooterData_methodCount = sizeof(wxRichTextHeaderFooterData_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextPrintout
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextPrintout'
int wxluatype_wxRichTextPrintout = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_CalculateScaling[] = { &wxluatype_wxRichTextPrintout, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_wxRect, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextPrintout_CalculateScaling(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_CalculateScaling[1] = {{ wxLua_wxRichTextPrintout_CalculateScaling, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextPrintout_CalculateScaling }};
//     void CalculateScaling(wxDC* dc, wxRect& textRect, wxRect& headerRect, wxRect& footerRect);
static int LUACALL wxLua_wxRichTextPrintout_CalculateScaling(lua_State *L)
{
    // wxRect footerRect
    wxRect * footerRect = (wxRect *)wxluaT_getuserdatatype(L, 5, wxluatype_wxRect);
    // wxRect headerRect
    wxRect * headerRect = (wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // wxRect textRect
    wxRect * textRect = (wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call CalculateScaling
    self->CalculateScaling(dc, *textRect, *headerRect, *footerRect);

    return 0;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_GetHeaderFooterData[] = { &wxluatype_wxRichTextPrintout, NULL };
static int LUACALL wxLua_wxRichTextPrintout_GetHeaderFooterData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_GetHeaderFooterData[1] = {{ wxLua_wxRichTextPrintout_GetHeaderFooterData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrintout_GetHeaderFooterData }};
//     const wxRichTextHeaderFooterData& GetHeaderFooterData() const;
static int LUACALL wxLua_wxRichTextPrintout_GetHeaderFooterData(lua_State *L)
{
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call GetHeaderFooterData
    const wxRichTextHeaderFooterData* returns = (const wxRichTextHeaderFooterData*)&self->GetHeaderFooterData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextHeaderFooterData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_GetPageInfo[] = { &wxluatype_wxRichTextPrintout, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextPrintout_GetPageInfo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_GetPageInfo[1] = {{ wxLua_wxRichTextPrintout_GetPageInfo, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxRichTextPrintout_GetPageInfo }};
//     virtual void GetPageInfo(int *minPage, int *maxPage, int *selPageFrom, int *selPageTo);
static int LUACALL wxLua_wxRichTextPrintout_GetPageInfo(lua_State *L)
{
    // int selPageTo
    int * selPageTo = (int *)wxlua_touserdata(L, 5);
    // int selPageFrom
    int * selPageFrom = (int *)wxlua_touserdata(L, 4);
    // int maxPage
    int * maxPage = (int *)wxlua_touserdata(L, 3);
    // int minPage
    int * minPage = (int *)wxlua_touserdata(L, 2);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call GetPageInfo
    self->GetPageInfo(minPage, maxPage, selPageFrom, selPageTo);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_GetRichTextBuffer[] = { &wxluatype_wxRichTextPrintout, NULL };
static int LUACALL wxLua_wxRichTextPrintout_GetRichTextBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_GetRichTextBuffer[1] = {{ wxLua_wxRichTextPrintout_GetRichTextBuffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrintout_GetRichTextBuffer }};
//     wxRichTextBuffer* GetRichTextBuffer() const;
static int LUACALL wxLua_wxRichTextPrintout_GetRichTextBuffer(lua_State *L)
{
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call GetRichTextBuffer
    wxRichTextBuffer* returns = (wxRichTextBuffer*)self->GetRichTextBuffer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_HasPage[] = { &wxluatype_wxRichTextPrintout, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPrintout_HasPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_HasPage[1] = {{ wxLua_wxRichTextPrintout_HasPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrintout_HasPage }};
//     virtual bool HasPage(int page);
static int LUACALL wxLua_wxRichTextPrintout_HasPage(lua_State *L)
{
    // int page
    int page = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call HasPage
    bool returns = (self->HasPage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_OnBeginDocument[] = { &wxluatype_wxRichTextPrintout, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPrintout_OnBeginDocument(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_OnBeginDocument[1] = {{ wxLua_wxRichTextPrintout_OnBeginDocument, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextPrintout_OnBeginDocument }};
//     virtual bool OnBeginDocument(int startPage, int endPage);
static int LUACALL wxLua_wxRichTextPrintout_OnBeginDocument(lua_State *L)
{
    // int endPage
    int endPage = (int)wxlua_getnumbertype(L, 3);
    // int startPage
    int startPage = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call OnBeginDocument
    bool returns = (self->OnBeginDocument(startPage, endPage));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_OnPreparePrinting[] = { &wxluatype_wxRichTextPrintout, NULL };
static int LUACALL wxLua_wxRichTextPrintout_OnPreparePrinting(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_OnPreparePrinting[1] = {{ wxLua_wxRichTextPrintout_OnPreparePrinting, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrintout_OnPreparePrinting }};
//     virtual void OnPreparePrinting();
static int LUACALL wxLua_wxRichTextPrintout_OnPreparePrinting(lua_State *L)
{
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call OnPreparePrinting
    self->OnPreparePrinting();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_OnPrintPage[] = { &wxluatype_wxRichTextPrintout, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPrintout_OnPrintPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_OnPrintPage[1] = {{ wxLua_wxRichTextPrintout_OnPrintPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrintout_OnPrintPage }};
//     virtual bool OnPrintPage(int page);
static int LUACALL wxLua_wxRichTextPrintout_OnPrintPage(lua_State *L)
{
    // int page
    int page = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call OnPrintPage
    bool returns = (self->OnPrintPage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_SetHeaderFooterData[] = { &wxluatype_wxRichTextPrintout, &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextPrintout_SetHeaderFooterData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_SetHeaderFooterData[1] = {{ wxLua_wxRichTextPrintout_SetHeaderFooterData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrintout_SetHeaderFooterData }};
//     void SetHeaderFooterData(const wxRichTextHeaderFooterData& data);
static int LUACALL wxLua_wxRichTextPrintout_SetHeaderFooterData(lua_State *L)
{
    // const wxRichTextHeaderFooterData data
    const wxRichTextHeaderFooterData * data = (const wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextHeaderFooterData);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call SetHeaderFooterData
    self->SetHeaderFooterData(*data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_SetMargins[] = { &wxluatype_wxRichTextPrintout, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextPrintout_SetMargins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_SetMargins[1] = {{ wxLua_wxRichTextPrintout_SetMargins, WXLUAMETHOD_METHOD, 1, 5, s_wxluatypeArray_wxLua_wxRichTextPrintout_SetMargins }};
//     void SetMargins(int top = 254, int bottom = 254, int left = 254, int right = 254);
static int LUACALL wxLua_wxRichTextPrintout_SetMargins(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int right = 254
    int right = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : 254);
    // int left = 254
    int left = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 254);
    // int bottom = 254
    int bottom = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 254);
    // int top = 254
    int top = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 254);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call SetMargins
    self->SetMargins(top, bottom, left, right);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_SetRichTextBuffer[] = { &wxluatype_wxRichTextPrintout, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextPrintout_SetRichTextBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_SetRichTextBuffer[1] = {{ wxLua_wxRichTextPrintout_SetRichTextBuffer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrintout_SetRichTextBuffer }};
//     void SetRichTextBuffer(wxRichTextBuffer* buffer);
static int LUACALL wxLua_wxRichTextPrintout_SetRichTextBuffer(lua_State *L)
{
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextPrintout * self = (wxRichTextPrintout *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrintout);
    // call SetRichTextBuffer
    self->SetRichTextBuffer(buffer);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_delete[] = { &wxluatype_wxRichTextPrintout, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrintout_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrintout_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextPrintout_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrintout_constructor[1] = {{ wxLua_wxRichTextPrintout_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrintout_constructor }};
//     wxRichTextPrintout(const wxString& title);
static int LUACALL wxLua_wxRichTextPrintout_constructor(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextPrintout* returns = new wxRichTextPrintout(title);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextPrintout);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextPrintout);

    return 1;
}




void wxLua_wxRichTextPrintout_delete_function(void** p)
{
    wxRichTextPrintout* o = (wxRichTextPrintout*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextPrintout_methods[] = {
#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "CalculateScaling", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_CalculateScaling, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetHeaderFooterData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_GetHeaderFooterData, 1, NULL },
    { "GetPageInfo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_GetPageInfo, 1, NULL },
    { "GetRichTextBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_GetRichTextBuffer, 1, NULL },
    { "HasPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_HasPage, 1, NULL },
    { "OnBeginDocument", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_OnBeginDocument, 1, NULL },
    { "OnPreparePrinting", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_OnPreparePrinting, 1, NULL },
    { "OnPrintPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_OnPrintPage, 1, NULL },
    { "SetHeaderFooterData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_SetHeaderFooterData, 1, NULL },
    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_SetMargins, 1, NULL },
    { "SetRichTextBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrintout_SetRichTextBuffer, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextPrintout_delete, 1, NULL },
    { "wxRichTextPrintout", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextPrintout_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextPrintout_methodCount = sizeof(wxRichTextPrintout_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextPrinting
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextPrinting'
int wxluatype_wxRichTextPrinting = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetFooterText[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetFooterText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetFooterText[1] = {{ wxLua_wxRichTextPrinting_GetFooterText, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetFooterText }};
//     wxString GetFooterText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const;
static int LUACALL wxLua_wxRichTextPrinting_GetFooterText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 3 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN
    wxRichTextOddEvenPage page = (argCount >= 2 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 2) : wxRICHTEXT_PAGE_EVEN);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetFooterText
    wxString returns = (self->GetFooterText(page, location));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetHeaderFooterData[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetHeaderFooterData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetHeaderFooterData[1] = {{ wxLua_wxRichTextPrinting_GetHeaderFooterData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetHeaderFooterData }};
//     const wxRichTextHeaderFooterData& GetHeaderFooterData() const;
static int LUACALL wxLua_wxRichTextPrinting_GetHeaderFooterData(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetHeaderFooterData
    const wxRichTextHeaderFooterData* returns = (const wxRichTextHeaderFooterData*)&self->GetHeaderFooterData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextHeaderFooterData);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetHeaderText[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetHeaderText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetHeaderText[1] = {{ wxLua_wxRichTextPrinting_GetHeaderText, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetHeaderText }};
//     wxString GetHeaderText(wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE) const;
static int LUACALL wxLua_wxRichTextPrinting_GetHeaderText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 3 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_EVEN
    wxRichTextOddEvenPage page = (argCount >= 2 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 2) : wxRICHTEXT_PAGE_EVEN);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetHeaderText
    wxString returns = (self->GetHeaderText(page, location));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetPageSetupData[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetPageSetupData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetPageSetupData[1] = {{ wxLua_wxRichTextPrinting_GetPageSetupData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetPageSetupData }};
//     wxPageSetupDialogData *GetPageSetupData();
static int LUACALL wxLua_wxRichTextPrinting_GetPageSetupData(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetPageSetupData
    wxPageSetupDialogData* returns = (wxPageSetupDialogData*)self->GetPageSetupData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPageSetupDialogData);

    return 1;
}

#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetParentWindow[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetParentWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetParentWindow[1] = {{ wxLua_wxRichTextPrinting_GetParentWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetParentWindow }};
//     wxWindow* GetParentWindow() const;
static int LUACALL wxLua_wxRichTextPrinting_GetParentWindow(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetParentWindow
    wxWindow* returns = (wxWindow*)self->GetParentWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetPreviewRect[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetPreviewRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetPreviewRect[1] = {{ wxLua_wxRichTextPrinting_GetPreviewRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetPreviewRect }};
//     const wxRect& GetPreviewRect() const ;
static int LUACALL wxLua_wxRichTextPrinting_GetPreviewRect(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetPreviewRect
    const wxRect* returns = (const wxRect*)&self->GetPreviewRect();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetPrintData[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetPrintData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetPrintData[1] = {{ wxLua_wxRichTextPrinting_GetPrintData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetPrintData }};
//     wxPrintData *GetPrintData();
static int LUACALL wxLua_wxRichTextPrinting_GetPrintData(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetPrintData
    wxPrintData* returns = (wxPrintData*)self->GetPrintData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPrintData);

    return 1;
}

#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetRichTextBufferPreview[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetRichTextBufferPreview(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetRichTextBufferPreview[1] = {{ wxLua_wxRichTextPrinting_GetRichTextBufferPreview, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetRichTextBufferPreview }};
//     wxRichTextBuffer* GetRichTextBufferPreview() const;
static int LUACALL wxLua_wxRichTextPrinting_GetRichTextBufferPreview(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetRichTextBufferPreview
    wxRichTextBuffer* returns = (wxRichTextBuffer*)self->GetRichTextBufferPreview();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetRichTextBufferPrinting[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetRichTextBufferPrinting(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetRichTextBufferPrinting[1] = {{ wxLua_wxRichTextPrinting_GetRichTextBufferPrinting, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetRichTextBufferPrinting }};
//     wxRichTextBuffer* GetRichTextBufferPrinting() const;
static int LUACALL wxLua_wxRichTextPrinting_GetRichTextBufferPrinting(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetRichTextBufferPrinting
    wxRichTextBuffer* returns = (wxRichTextBuffer*)self->GetRichTextBufferPrinting();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBuffer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_GetTitle[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_GetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_GetTitle[1] = {{ wxLua_wxRichTextPrinting_GetTitle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_GetTitle }};
//     const wxString& GetTitle() const;
static int LUACALL wxLua_wxRichTextPrinting_GetTitle(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call GetTitle
    wxString returns = (self->GetTitle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_PageSetup[] = { &wxluatype_wxRichTextPrinting, NULL };
static int LUACALL wxLua_wxRichTextPrinting_PageSetup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_PageSetup[1] = {{ wxLua_wxRichTextPrinting_PageSetup, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_PageSetup }};
//     void PageSetup();
static int LUACALL wxLua_wxRichTextPrinting_PageSetup(lua_State *L)
{
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call PageSetup
    self->PageSetup();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_PreviewBuffer[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextPrinting_PreviewBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_PreviewBuffer[1] = {{ wxLua_wxRichTextPrinting_PreviewBuffer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_PreviewBuffer }};
//     bool PreviewBuffer(const wxRichTextBuffer& buffer);
static int LUACALL wxLua_wxRichTextPrinting_PreviewBuffer(lua_State *L)
{
    // const wxRichTextBuffer buffer
    const wxRichTextBuffer * buffer = (const wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call PreviewBuffer
    bool returns = (self->PreviewBuffer(*buffer));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_PreviewFile[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextPrinting_PreviewFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_PreviewFile[1] = {{ wxLua_wxRichTextPrinting_PreviewFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_PreviewFile }};
//     bool PreviewFile(const wxString& richTextFile);
static int LUACALL wxLua_wxRichTextPrinting_PreviewFile(lua_State *L)
{
    // const wxString richTextFile
    const wxString richTextFile = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call PreviewFile
    bool returns = (self->PreviewFile(richTextFile));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_PrintBuffer[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxRichTextBuffer, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextPrinting_PrintBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_PrintBuffer[1] = {{ wxLua_wxRichTextPrinting_PrintBuffer, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextPrinting_PrintBuffer }};
//     bool PrintBuffer(const wxRichTextBuffer& buffer, bool showPrintDialog = true);
static int LUACALL wxLua_wxRichTextPrinting_PrintBuffer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool showPrintDialog = true
    bool showPrintDialog = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxRichTextBuffer buffer
    const wxRichTextBuffer * buffer = (const wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call PrintBuffer
    bool returns = (self->PrintBuffer(*buffer, showPrintDialog));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_PrintFile[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextPrinting_PrintFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_PrintFile[1] = {{ wxLua_wxRichTextPrinting_PrintFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextPrinting_PrintFile }};
//     bool PrintFile(const wxString& richTextFile, bool showPrintDialog = true);
static int LUACALL wxLua_wxRichTextPrinting_PrintFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool showPrintDialog = true
    bool showPrintDialog = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString richTextFile
    const wxString richTextFile = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call PrintFile
    bool returns = (self->PrintFile(richTextFile, showPrintDialog));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetFooterText[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetFooterText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetFooterText[1] = {{ wxLua_wxRichTextPrinting_SetFooterText, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetFooterText }};
//     void SetFooterText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE);
static int LUACALL wxLua_wxRichTextPrinting_SetFooterText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 4 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 4) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL
    wxRichTextOddEvenPage page = (argCount >= 3 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_ALL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetFooterText
    self->SetFooterText(text, page, location);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderFooterData[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxRichTextHeaderFooterData, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderFooterData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderFooterData[1] = {{ wxLua_wxRichTextPrinting_SetHeaderFooterData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderFooterData }};
//     void SetHeaderFooterData(const wxRichTextHeaderFooterData& data);
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderFooterData(lua_State *L)
{
    // const wxRichTextHeaderFooterData data
    const wxRichTextHeaderFooterData * data = (const wxRichTextHeaderFooterData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextHeaderFooterData);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetHeaderFooterData
    self->SetHeaderFooterData(*data);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderFooterFont[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderFooterFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderFooterFont[1] = {{ wxLua_wxRichTextPrinting_SetHeaderFooterFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderFooterFont }};
//     void SetHeaderFooterFont(const wxFont& font);
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderFooterFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetHeaderFooterFont
    self->SetHeaderFooterFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderFooterTextColour[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderFooterTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderFooterTextColour[1] = {{ wxLua_wxRichTextPrinting_SetHeaderFooterTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderFooterTextColour }};
//     void SetHeaderFooterTextColour(const wxColour& font);
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderFooterTextColour(lua_State *L)
{
    // const wxColour font
    const wxColour * font = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetHeaderFooterTextColour
    self->SetHeaderFooterTextColour(*font);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderText[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderText[1] = {{ wxLua_wxRichTextPrinting_SetHeaderText, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetHeaderText }};
//     void SetHeaderText(const wxString& text, wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL, wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE);
static int LUACALL wxLua_wxRichTextPrinting_SetHeaderText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextPageLocation location = wxRICHTEXT_PAGE_CENTRE
    wxRichTextPageLocation location = (argCount >= 4 ? (wxRichTextPageLocation)wxlua_getenumtype(L, 4) : wxRICHTEXT_PAGE_CENTRE);
    // wxRichTextOddEvenPage page = wxRICHTEXT_PAGE_ALL
    wxRichTextOddEvenPage page = (argCount >= 3 ? (wxRichTextOddEvenPage)wxlua_getenumtype(L, 3) : wxRICHTEXT_PAGE_ALL);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetHeaderText
    self->SetHeaderText(text, page, location);

    return 0;
}


#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetPageSetupData[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxPageSetupDialogData, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetPageSetupData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetPageSetupData[1] = {{ wxLua_wxRichTextPrinting_SetPageSetupData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetPageSetupData }};
//     void SetPageSetupData(const wxPageSetupDialogData& pageSetupData);
static int LUACALL wxLua_wxRichTextPrinting_SetPageSetupData(lua_State *L)
{
    // const wxPageSetupDialogData pageSetupData
    const wxPageSetupDialogData * pageSetupData = (const wxPageSetupDialogData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPageSetupDialogData);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetPageSetupData
    self->SetPageSetupData(*pageSetupData);

    return 0;
}

#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetParentWindow[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetParentWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetParentWindow[1] = {{ wxLua_wxRichTextPrinting_SetParentWindow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetParentWindow }};
//     void SetParentWindow(wxWindow* parent);
static int LUACALL wxLua_wxRichTextPrinting_SetParentWindow(lua_State *L)
{
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetParentWindow
    self->SetParentWindow(parent);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetPreviewRect[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetPreviewRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetPreviewRect[1] = {{ wxLua_wxRichTextPrinting_SetPreviewRect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetPreviewRect }};
//     void SetPreviewRect(const wxRect& rect);
static int LUACALL wxLua_wxRichTextPrinting_SetPreviewRect(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetPreviewRect
    self->SetPreviewRect(*rect);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetPrintData[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxPrintData, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetPrintData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetPrintData[1] = {{ wxLua_wxRichTextPrinting_SetPrintData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetPrintData }};
//     void SetPrintData(const wxPrintData& printData);
static int LUACALL wxLua_wxRichTextPrinting_SetPrintData(lua_State *L)
{
    // const wxPrintData printData
    const wxPrintData * printData = (const wxPrintData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPrintData);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetPrintData
    self->SetPrintData(*printData);

    return 0;
}

#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetRichTextBufferPreview[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetRichTextBufferPreview(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetRichTextBufferPreview[1] = {{ wxLua_wxRichTextPrinting_SetRichTextBufferPreview, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetRichTextBufferPreview }};
//     void SetRichTextBufferPreview(wxRichTextBuffer* buf);
static int LUACALL wxLua_wxRichTextPrinting_SetRichTextBufferPreview(lua_State *L)
{
    // wxRichTextBuffer buf
    wxRichTextBuffer * buf = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetRichTextBufferPreview
    self->SetRichTextBufferPreview(buf);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetRichTextBufferPrinting[] = { &wxluatype_wxRichTextPrinting, &wxluatype_wxRichTextBuffer, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetRichTextBufferPrinting(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetRichTextBufferPrinting[1] = {{ wxLua_wxRichTextPrinting_SetRichTextBufferPrinting, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetRichTextBufferPrinting }};
//     void SetRichTextBufferPrinting(wxRichTextBuffer* buf);
static int LUACALL wxLua_wxRichTextPrinting_SetRichTextBufferPrinting(lua_State *L)
{
    // wxRichTextBuffer buf
    wxRichTextBuffer * buf = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetRichTextBufferPrinting
    self->SetRichTextBufferPrinting(buf);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetShowOnFirstPage[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetShowOnFirstPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetShowOnFirstPage[1] = {{ wxLua_wxRichTextPrinting_SetShowOnFirstPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetShowOnFirstPage }};
//     void SetShowOnFirstPage(bool show);
static int LUACALL wxLua_wxRichTextPrinting_SetShowOnFirstPage(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetShowOnFirstPage
    self->SetShowOnFirstPage(show);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_SetTitle[] = { &wxluatype_wxRichTextPrinting, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextPrinting_SetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_SetTitle[1] = {{ wxLua_wxRichTextPrinting_SetTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_SetTitle }};
//     void SetTitle(const wxString& title);
static int LUACALL wxLua_wxRichTextPrinting_SetTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextPrinting * self = (wxRichTextPrinting *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextPrinting);
    // call SetTitle
    self->SetTitle(title);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_delete[] = { &wxluatype_wxRichTextPrinting, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextPrinting_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextPrinting_constructor[] = { &wxluatype_TSTRING, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxRichTextPrinting_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextPrinting_constructor[1] = {{ wxLua_wxRichTextPrinting_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxRichTextPrinting_constructor }};
//     wxRichTextPrinting(const wxString& name, wxWindow *parentWindow = NULL);
static int LUACALL wxLua_wxRichTextPrinting_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow parentWindow = NULL
    wxWindow * parentWindow = (argCount >= 2 ? (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow) : NULL);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextPrinting* returns = new wxRichTextPrinting(name, parentWindow);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextPrinting);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextPrinting);

    return 1;
}




void wxLua_wxRichTextPrinting_delete_function(void** p)
{
    wxRichTextPrinting* o = (wxRichTextPrinting*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextPrinting_methods[] = {
    { "GetFooterText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetFooterText, 1, NULL },
    { "GetHeaderFooterData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetHeaderFooterData, 1, NULL },
    { "GetHeaderText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetHeaderText, 1, NULL },

#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetPageSetupData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetPageSetupData, 1, NULL },
#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetParentWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetParentWindow, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetPreviewRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetPreviewRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetPrintData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetPrintData, 1, NULL },
#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRichTextBufferPreview", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetRichTextBufferPreview, 1, NULL },
    { "GetRichTextBufferPrinting", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetRichTextBufferPrinting, 1, NULL },
    { "GetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_GetTitle, 1, NULL },
    { "PageSetup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_PageSetup, 1, NULL },
    { "PreviewBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_PreviewBuffer, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)
    { "PreviewFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_PreviewFile, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)

    { "PrintBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_PrintBuffer, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)
    { "PrintFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_PrintFile, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_FFILE && wxUSE_STREAMS)

    { "SetFooterText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetFooterText, 1, NULL },
    { "SetHeaderFooterData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderFooterData, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetHeaderFooterFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderFooterFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetHeaderFooterTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderFooterTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetHeaderText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetHeaderText, 1, NULL },

#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetPageSetupData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetPageSetupData, 1, NULL },
#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetParentWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetParentWindow, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetPreviewRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetPreviewRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetPrintData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetPrintData, 1, NULL },
#endif // (wxLUA_USE_wxPrint && wxUSE_PRINTING_ARCHITECTURE) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetRichTextBufferPreview", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetRichTextBufferPreview, 1, NULL },
    { "SetRichTextBufferPrinting", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetRichTextBufferPrinting, 1, NULL },
    { "SetShowOnFirstPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetShowOnFirstPage, 1, NULL },
    { "SetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextPrinting_SetTitle, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextPrinting_delete, 1, NULL },
    { "wxRichTextPrinting", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextPrinting_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextPrinting_methodCount = sizeof(wxRichTextPrinting_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxrichtext_style.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------



#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextStyleOrganiserDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextStyleOrganiserDialog'
int wxluatype_wxRichTextStyleOrganiserDialog = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_ApplyStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ApplyStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ApplyStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_ApplyStyle, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_ApplyStyle }};
//     bool ApplyStyle(wxRichTextCtrl* ctrl = NULL);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ApplyStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextCtrl ctrl = NULL
    wxRichTextCtrl * ctrl = (argCount >= 2 ? (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl) : NULL);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call ApplyStyle
    bool returns = (self->ApplyStyle(ctrl));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_ClearPreview[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ClearPreview(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ClearPreview[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_ClearPreview, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_ClearPreview }};
//     void ClearPreview();
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ClearPreview(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call ClearPreview
    self->ClearPreview();

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Create[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_TNUMBER, &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Create[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Create, WXLUAMETHOD_METHOD, 5, 10, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Create }};
//     bool Create( int flags, wxRichTextStyleSheet* sheet, wxRichTextCtrl* ctrl, wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = "Style Organiser", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = SYMBOL_WXRICHTEXTSTYLEORGANISERDIALOG_STYLE );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = SYMBOL_WXRICHTEXTSTYLEORGANISERDIALOG_STYLE
    long style = (argCount >= 10 ? (long)wxlua_getnumbertype(L, 10) : SYMBOL_WXRICHTEXTSTYLEORGANISERDIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString caption = "Style Organiser"
    const wxString caption = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("Style Organiser")));
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 6 ? (wxWindowID)wxlua_getnumbertype(L, 6) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 5, wxluatype_wxWindow);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextCtrl);
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleSheet);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call Create
    bool returns = (self->Create(flags, sheet, ctrl, parent, id, caption, *pos, *size, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_CreateControls[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_CreateControls(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_CreateControls[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_CreateControls, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_CreateControls }};
//     void CreateControls();
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_CreateControls(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call CreateControls
    self->CreateControls();

    return 0;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetBitmapResource[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetBitmapResource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetBitmapResource[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetBitmapResource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetBitmapResource }};
//     wxBitmap GetBitmapResource( const wxString& name );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetBitmapResource(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetBitmapResource
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapResource(name));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetFlags[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetFlags[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetFlags(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetIconResource[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetIconResource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetIconResource[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetIconResource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetIconResource }};
//     wxIcon GetIconResource( const wxString& name );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetIconResource(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetIconResource
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetIconResource(name));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetRestartNumbering[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetRestartNumbering(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetRestartNumbering[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetRestartNumbering, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetRestartNumbering }};
//     bool GetRestartNumbering() const;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetRestartNumbering(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetRestartNumbering
    bool returns = (self->GetRestartNumbering());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetRichTextCtrl[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetRichTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetRichTextCtrl }};
//     wxRichTextCtrl* GetRichTextCtrl() const;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetRichTextCtrl(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetRichTextCtrl
    wxRichTextCtrl* returns = (wxRichTextCtrl*)self->GetRichTextCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCtrl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyle }};
//     wxString GetSelectedStyle() const;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyle(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetSelectedStyle
    wxString returns = (self->GetSelectedStyle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyleDefinition[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyleDefinition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyleDefinition[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyleDefinition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyleDefinition }};
//     wxRichTextStyleDefinition* GetSelectedStyleDefinition() const;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyleDefinition(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetSelectedStyleDefinition
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->GetSelectedStyleDefinition();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetStyleSheet[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetStyleSheet[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_GetStyleSheet }};
//     wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle }};
//     wxButton* m_applyStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_applyStyle, wxluatype_wxButton);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer }};
//     wxBoxSizer* m_bottomButtonSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_bottomButtonSizer, wxluatype_wxBoxSizer);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer }};
//     wxBoxSizer* m_buttonSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_buttonSizer, wxluatype_wxBoxSizer);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent }};
//     wxBoxSizer* m_buttonSizerParent;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_buttonSizerParent, wxluatype_wxBoxSizer);
    // return the number of values
    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton }};
//     wxButton* m_cancelButton;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_cancelButton, wxluatype_wxButton);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton }};
//     wxButton* m_closeButton;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_closeButton, wxluatype_wxButton);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle }};
//     wxButton* m_deleteStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_deleteStyle, wxluatype_wxButton);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle }};
//     wxButton* m_editStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_editStyle, wxluatype_wxButton);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer }};
//     wxBoxSizer* m_innerSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_innerSizer, wxluatype_wxBoxSizer);
    // return the number of values
    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox }};
//     wxButton* m_newBox;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_newBox, wxluatype_wxButton);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter }};
//     wxButton* m_newCharacter;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_newCharacter, wxluatype_wxButton);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList }};
//     wxButton* m_newList;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_newList, wxluatype_wxButton);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph }};
//     wxButton* m_newParagraph;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_newParagraph, wxluatype_wxButton);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton }};
//     wxButton* m_okButton;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_okButton, wxluatype_wxButton);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl }};
//     wxRichTextCtrl* m_previewCtrl;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_previewCtrl, wxluatype_wxRichTextCtrl);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle }};
//     wxButton* m_renameStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_renameStyle, wxluatype_wxButton);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl }};
//     wxCheckBox* m_restartNumberingCtrl;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_restartNumberingCtrl, wxluatype_wxCheckBox);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer }};
//     wxStdDialogButtonSizer* m_stdButtonSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_stdButtonSizer, wxluatype_wxStdDialogButtonSizer);
    // return the number of values
    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox }};
//     wxRichTextStyleListCtrl* m_stylesListBox;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_stylesListBox, wxluatype_wxRichTextStyleListCtrl);
    // return the number of values
    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Init[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Init[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Init(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnApplyClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnApplyClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnApplyClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnApplyClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnApplyClick }};
//     void OnApplyClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnApplyClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnApplyClick
    self->OnApplyClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnApplyUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnApplyUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnApplyUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnApplyUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnApplyUpdate }};
//     void OnApplyUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnApplyUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnApplyUpdate
    self->OnApplyUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnDeleteClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnDeleteClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteClick }};
//     void OnDeleteClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnDeleteClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnDeleteClick
    self->OnDeleteClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnDeleteUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnDeleteUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteUpdate }};
//     void OnDeleteUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnDeleteUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnDeleteUpdate
    self->OnDeleteUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnEditClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnEditClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnEditClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnEditClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnEditClick }};
//     void OnEditClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnEditClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnEditClick
    self->OnEditClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnEditUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnEditUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnEditUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnEditUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnEditUpdate }};
//     void OnEditUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnEditUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnEditUpdate
    self->OnEditUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnHelpClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnHelpClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnHelpClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnHelpClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnHelpClick }};
//     void OnHelpClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnHelpClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnHelpClick
    self->OnHelpClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnListSelection[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnListSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnListSelection[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnListSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnListSelection }};
//     void OnListSelection(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnListSelection(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnListSelection
    self->OnListSelection(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxClick }};
//     void OnNewBoxClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewBoxClick
    self->OnNewBoxClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxUpdate }};
//     void OnNewBoxUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewBoxUpdate
    self->OnNewBoxUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewCharClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewCharClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharClick }};
//     void OnNewCharClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewCharClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewCharClick
    self->OnNewCharClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewCharUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewCharUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharUpdate }};
//     void OnNewCharUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewCharUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewCharUpdate
    self->OnNewCharUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewListClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewListClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewListClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewListClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewListClick }};
//     void OnNewListClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewListClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewListClick
    self->OnNewListClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewListUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewListUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewListUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewListUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewListUpdate }};
//     void OnNewListUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewListUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewListUpdate
    self->OnNewListUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewParaClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewParaClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaClick }};
//     void OnNewParaClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewParaClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewParaClick
    self->OnNewParaClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewParaUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnNewParaUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaUpdate }};
//     void OnNewParaUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnNewParaUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnNewParaUpdate
    self->OnNewParaUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnRenameClick[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnRenameClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnRenameClick[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnRenameClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnRenameClick }};
//     void OnRenameClick( wxCommandEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnRenameClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnRenameClick
    self->OnRenameClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnRenameUpdate[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnRenameUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnRenameUpdate[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_OnRenameUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_OnRenameUpdate }};
//     void OnRenameUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_OnRenameUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call OnRenameUpdate
    self->OnRenameUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetFlags[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetFlags[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetRestartNumbering[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetRestartNumbering(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetRestartNumbering[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_SetRestartNumbering, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetRestartNumbering }};
//     void SetRestartNumbering(bool restartNumbering);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetRestartNumbering(lua_State *L)
{
    // bool restartNumbering
    bool restartNumbering = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call SetRestartNumbering
    self->SetRestartNumbering(restartNumbering);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetRichTextCtrl[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_SetRichTextCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetRichTextCtrl }};
//     void SetRichTextCtrl(wxRichTextCtrl* ctrl);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetRichTextCtrl(lua_State *L)
{
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call SetRichTextCtrl
    self->SetRichTextCtrl(ctrl);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetShowToolTips[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetShowToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetShowToolTips[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_SetShowToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetShowToolTips }};
//     static void SetShowToolTips(bool show);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetShowToolTips(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 1);
    // call SetShowToolTips
    wxRichTextStyleOrganiserDialog::SetShowToolTips(show);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetStyleSheet[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetStyleSheet[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_SetStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_SetStyleSheet }};
//     void SetStyleSheet(wxRichTextStyleSheet* sheet);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_SetStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call SetStyleSheet
    self->SetStyleSheet(sheet);

    return 0;
}


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle }};
//     wxButton* m_applyStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_applyStyle = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxBoxSizer, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer }};
//     wxBoxSizer* m_bottomButtonSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer(lua_State *L)
{
    // get the data type value
    wxBoxSizer* val = (wxBoxSizer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBoxSizer);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_bottomButtonSizer = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxBoxSizer, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer }};
//     wxBoxSizer* m_buttonSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer(lua_State *L)
{
    // get the data type value
    wxBoxSizer* val = (wxBoxSizer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBoxSizer);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_buttonSizer = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxBoxSizer, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent }};
//     wxBoxSizer* m_buttonSizerParent;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent(lua_State *L)
{
    // get the data type value
    wxBoxSizer* val = (wxBoxSizer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBoxSizer);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_buttonSizerParent = val;
    // return the number of values
    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton }};
//     wxButton* m_cancelButton;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_cancelButton = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton }};
//     wxButton* m_closeButton;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_closeButton = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle }};
//     wxButton* m_deleteStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_deleteStyle = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle }};
//     wxButton* m_editStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_editStyle = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxBoxSizer, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer }};
//     wxBoxSizer* m_innerSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer(lua_State *L)
{
    // get the data type value
    wxBoxSizer* val = (wxBoxSizer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxBoxSizer);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_innerSizer = val;
    // return the number of values
    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox }};
//     wxButton* m_newBox;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_newBox = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter }};
//     wxButton* m_newCharacter;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_newCharacter = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList }};
//     wxButton* m_newList;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_newList = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph }};
//     wxButton* m_newParagraph;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_newParagraph = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton }};
//     wxButton* m_okButton;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_okButton = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl }};
//     wxRichTextCtrl* m_previewCtrl;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl(lua_State *L)
{
    // get the data type value
    wxRichTextCtrl* val = (wxRichTextCtrl*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_previewCtrl = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxButton, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle }};
//     wxButton* m_renameStyle;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle(lua_State *L)
{
    // get the data type value
    wxButton* val = (wxButton*)wxluaT_getuserdatatype(L, 2, wxluatype_wxButton);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_renameStyle = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxCheckBox, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl }};
//     wxCheckBox* m_restartNumberingCtrl;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl(lua_State *L)
{
    // get the data type value
    wxCheckBox* val = (wxCheckBox*)wxluaT_getuserdatatype(L, 2, wxluatype_wxCheckBox);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_restartNumberingCtrl = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer }};
//     wxStdDialogButtonSizer* m_stdButtonSizer;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer(lua_State *L)
{
    // get the data type value
    wxStdDialogButtonSizer* val = (wxStdDialogButtonSizer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxStdDialogButtonSizer);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_stdButtonSizer = val;
    // return the number of values
    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox }};
//     wxRichTextStyleListCtrl* m_stylesListBox;
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox(lua_State *L)
{
    // get the data type value
    wxRichTextStyleListCtrl* val = (wxRichTextStyleListCtrl*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleListCtrl);
    // get this
    wxRichTextStyleOrganiserDialog *self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    self->m_stylesListBox = val;
    // return the number of values
    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_ShowPreview[] = { &wxluatype_wxRichTextStyleOrganiserDialog, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ShowPreview(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ShowPreview[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_ShowPreview, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_ShowPreview }};
//     void ShowPreview(int sel = -1);
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ShowPreview(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int sel = -1
    int sel = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call ShowPreview
    self->ShowPreview(sel);

    return 0;
}

static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ShowToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ShowToolTips[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_ShowToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool ShowToolTips();
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_ShowToolTips(lua_State *L)
{
    // call ShowToolTips
    bool returns = (wxRichTextStyleOrganiserDialog::ShowToolTips());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_TransferDataFromWindow[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_TransferDataFromWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_TransferDataFromWindow[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_TransferDataFromWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_TransferDataFromWindow }};
//     virtual bool TransferDataFromWindow();
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_TransferDataFromWindow(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call TransferDataFromWindow
    bool returns = (self->TransferDataFromWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_TransferDataToWindow[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_TransferDataToWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_TransferDataToWindow[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_TransferDataToWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_TransferDataToWindow }};
//     virtual bool TransferDataToWindow();
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_TransferDataToWindow(lua_State *L)
{
    // get this
    wxRichTextStyleOrganiserDialog * self = (wxRichTextStyleOrganiserDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleOrganiserDialog);
    // call TransferDataToWindow
    bool returns = (self->TransferDataToWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_delete[] = { &wxluatype_wxRichTextStyleOrganiserDialog, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_delete }};


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)


#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_constructor1[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 9, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_constructor1 }};
//     wxRichTextStyleOrganiserDialog( int flags, wxRichTextStyleSheet* sheet, wxRichTextCtrl* ctrl, wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = "Style Organiser", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = SYMBOL_WXRICHTEXTSTYLEORGANISERDIALOG_STYLE );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = SYMBOL_WXRICHTEXTSTYLEORGANISERDIALOG_STYLE
    long style = (argCount >= 9 ? (long)wxlua_getnumbertype(L, 9) : SYMBOL_WXRICHTEXTSTYLEORGANISERDIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 8 ? (const wxSize *)wxluaT_getuserdatatype(L, 8, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 7 ? (const wxPoint *)wxluaT_getuserdatatype(L, 7, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString caption = "Style Organiser"
    const wxString caption = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("Style Organiser")));
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 5 ? (wxWindowID)wxlua_getnumbertype(L, 5) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 4, wxluatype_wxWindow);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextCtrl);
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxRichTextStyleOrganiserDialog* returns = new wxRichTextStyleOrganiserDialog(flags, sheet, ctrl, parent, id, caption, *pos, *size, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleOrganiserDialog);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_constructor[1] = {{ wxLua_wxRichTextStyleOrganiserDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextStyleOrganiserDialog( );
static int LUACALL wxLua_wxRichTextStyleOrganiserDialog_constructor(lua_State *L)
{
    // call constructor
    wxRichTextStyleOrganiserDialog* returns = new wxRichTextStyleOrganiserDialog();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleOrganiserDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleOrganiserDialog);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleOrganiserDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 9, s_wxluatypeArray_wxLua_wxRichTextStyleOrganiserDialog_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleOrganiserDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextStyleOrganiserDialog_delete_function(void** p)
{
    wxRichTextStyleOrganiserDialog* o = (wxRichTextStyleOrganiserDialog*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextStyleOrganiserDialog_methods[] = {
    { "ApplyStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ApplyStyle, 1, NULL },
    { "ClearPreview", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ClearPreview, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "CreateControls", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_CreateControls, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBitmapResource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetBitmapResource, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetFlags, 1, NULL },

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetIconResource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetIconResource, 1, NULL },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetRestartNumbering", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetRestartNumbering, 1, NULL },
    { "GetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetRichTextCtrl, 1, NULL },
    { "GetSelectedStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyle, 1, NULL },
    { "GetSelectedStyleDefinition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetSelectedStyleDefinition, 1, NULL },
    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_GetStyleSheet, 1, NULL },

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_applyStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_bottomButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer, 1, NULL },
    // %member    { "Get_m_buttonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer, 1, NULL },
    // %member    { "Get_m_buttonSizerParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_cancelButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton, 1, NULL },
    // %member    { "Get_m_closeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton, 1, NULL },
    // %member    { "Get_m_deleteStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle, 1, NULL },
    // %member    { "Get_m_editStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_innerSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_newBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox, 1, NULL },
    // %member    { "Get_m_newCharacter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter, 1, NULL },
    // %member    { "Get_m_newList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList, 1, NULL },
    // %member    { "Get_m_newParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph, 1, NULL },
    // %member    { "Get_m_okButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_previewCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl, 1, NULL },

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_renameStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_restartNumberingCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl, 1, NULL },
#endif // (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_stdButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_stylesListBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Init, 1, NULL },
    { "OnApplyClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnApplyClick, 1, NULL },
    { "OnApplyUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnApplyUpdate, 1, NULL },
    { "OnDeleteClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteClick, 1, NULL },
    { "OnDeleteUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnDeleteUpdate, 1, NULL },
    { "OnEditClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnEditClick, 1, NULL },
    { "OnEditUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnEditUpdate, 1, NULL },
    { "OnHelpClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnHelpClick, 1, NULL },
    { "OnListSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnListSelection, 1, NULL },
    { "OnNewBoxClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxClick, 1, NULL },
    { "OnNewBoxUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewBoxUpdate, 1, NULL },
    { "OnNewCharClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharClick, 1, NULL },
    { "OnNewCharUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewCharUpdate, 1, NULL },
    { "OnNewListClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewListClick, 1, NULL },
    { "OnNewListUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewListUpdate, 1, NULL },
    { "OnNewParaClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaClick, 1, NULL },
    { "OnNewParaUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnNewParaUpdate, 1, NULL },
    { "OnRenameClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnRenameClick, 1, NULL },
    { "OnRenameUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_OnRenameUpdate, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetFlags, 1, NULL },
    { "SetRestartNumbering", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetRestartNumbering, 1, NULL },
    { "SetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetRichTextCtrl, 1, NULL },
    { "SetShowToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetShowToolTips, 1, NULL },
    { "SetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_SetStyleSheet, 1, NULL },

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_applyStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_bottomButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer, 1, NULL },
    // %member    { "Set_m_buttonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer, 1, NULL },
    // %member    { "Set_m_buttonSizerParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_cancelButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton, 1, NULL },
    // %member    { "Set_m_closeButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton, 1, NULL },
    // %member    { "Set_m_deleteStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle, 1, NULL },
    // %member    { "Set_m_editStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_innerSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_newBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox, 1, NULL },
    // %member    { "Set_m_newCharacter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter, 1, NULL },
    // %member    { "Set_m_newList", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList, 1, NULL },
    // %member    { "Set_m_newParagraph", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph, 1, NULL },
    // %member    { "Set_m_okButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Set_m_previewCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl, 1, NULL },

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_renameStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_restartNumberingCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl, 1, NULL },
#endif // (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_stdButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_stylesListBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "ShowPreview", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ShowPreview, 1, NULL },
    { "ShowToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_ShowToolTips, 1, NULL },
    { "TransferDataFromWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_TransferDataFromWindow, 1, NULL },
    { "TransferDataToWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_TransferDataToWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_delete, 1, NULL },

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_applyStyle", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_applyStyle, 1, NULL },
    { "m_applyStyle", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_applyStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_bottomButtonSizer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_bottomButtonSizer, 1, NULL },
    { "m_bottomButtonSizer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_bottomButtonSizer, 1, NULL },
    { "m_buttonSizer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizer, 1, NULL },
    { "m_buttonSizer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizer, 1, NULL },
    { "m_buttonSizerParent", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_buttonSizerParent, 1, NULL },
    { "m_buttonSizerParent", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_buttonSizerParent, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_cancelButton", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_cancelButton, 1, NULL },
    { "m_cancelButton", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_cancelButton, 1, NULL },
    { "m_closeButton", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_closeButton, 1, NULL },
    { "m_closeButton", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_closeButton, 1, NULL },
    { "m_deleteStyle", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_deleteStyle, 1, NULL },
    { "m_deleteStyle", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_deleteStyle, 1, NULL },
    { "m_editStyle", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_editStyle, 1, NULL },
    { "m_editStyle", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_editStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_innerSizer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_innerSizer, 1, NULL },
    { "m_innerSizer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_innerSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_newBox", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newBox, 1, NULL },
    { "m_newBox", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newBox, 1, NULL },
    { "m_newCharacter", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newCharacter, 1, NULL },
    { "m_newCharacter", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newCharacter, 1, NULL },
    { "m_newList", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newList, 1, NULL },
    { "m_newList", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newList, 1, NULL },
    { "m_newParagraph", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_newParagraph, 1, NULL },
    { "m_newParagraph", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_newParagraph, 1, NULL },
    { "m_okButton", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_okButton, 1, NULL },
    { "m_okButton", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_okButton, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "m_previewCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_previewCtrl, 1, NULL },
    { "m_previewCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_previewCtrl, 1, NULL },

#if (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_renameStyle", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_renameStyle, 1, NULL },
    { "m_renameStyle", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_renameStyle, 1, NULL },
#endif // (wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_restartNumberingCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_restartNumberingCtrl, 1, NULL },
    { "m_restartNumberingCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_restartNumberingCtrl, 1, NULL },
#endif // (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_stdButtonSizer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stdButtonSizer, 1, NULL },
    { "m_stdButtonSizer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stdButtonSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_stylesListBox", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Set_m_stylesListBox, 1, NULL },
    { "m_stylesListBox", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_Get_m_stylesListBox, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextStyleOrganiserDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_constructor_overload, s_wxluafunc_wxLua_wxRichTextStyleOrganiserDialog_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextStyleOrganiserDialog_methodCount = sizeof(wxRichTextStyleOrganiserDialog_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxRichTextStyleOrganiserDialog_enums[] = {
#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "ID_RICHTEXTSTYLEORGANISERDIALOG", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_APPLY", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_APPLY },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_CURRENT_STYLE", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_CURRENT_STYLE },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_DELETE", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_DELETE },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_EDIT", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_EDIT },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_BOX", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_BOX },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_CHAR", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_CHAR },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_LIST", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_LIST },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_PARA", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_NEW_PARA },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_PREVIEW", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_PREVIEW },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_RENAME", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_RENAME },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_RESTART_NUMBERING", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_RESTART_NUMBERING },
        { "ID_RICHTEXTSTYLEORGANISERDIALOG_STYLES", wxRichTextStyleOrganiserDialog::ID_RICHTEXTSTYLEORGANISERDIALOG_STYLES },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

    { NULL, 0, },
};
int wxRichTextStyleOrganiserDialog_enumCount = sizeof(wxRichTextStyleOrganiserDialog_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextStyleDefinition
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextStyleDefinition'
int wxluatype_wxRichTextStyleDefinition = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Clone[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_Clone[1] = {{ wxLua_wxRichTextStyleDefinition_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Clone }};
//     virtual wxRichTextStyleDefinition* Clone() const;
static int LUACALL wxLua_wxRichTextStyleDefinition_Clone(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call Clone
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Copy[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_Copy[1] = {{ wxLua_wxRichTextStyleDefinition_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Copy }};
//     void Copy(const wxRichTextStyleDefinition& def);
static int LUACALL wxLua_wxRichTextStyleDefinition_Copy(lua_State *L)
{
    // const wxRichTextStyleDefinition def
    const wxRichTextStyleDefinition * def = (const wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call Copy
    self->Copy(*def);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Eq[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_Eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_Eq[1] = {{ wxLua_wxRichTextStyleDefinition_Eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Eq }};
//     bool Eq(const wxRichTextStyleDefinition& def) const;
static int LUACALL wxLua_wxRichTextStyleDefinition_Eq(lua_State *L)
{
    // const wxRichTextStyleDefinition def
    const wxRichTextStyleDefinition * def = (const wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call Eq
    bool returns = (self->Eq(*def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetBaseStyle[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetBaseStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetBaseStyle[1] = {{ wxLua_wxRichTextStyleDefinition_GetBaseStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetBaseStyle }};
//     const wxString& GetBaseStyle() const;
static int LUACALL wxLua_wxRichTextStyleDefinition_GetBaseStyle(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetBaseStyle
    wxString returns = (self->GetBaseStyle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetDescription[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetDescription[1] = {{ wxLua_wxRichTextStyleDefinition_GetDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetDescription }};
//     const wxString& GetDescription() const;
static int LUACALL wxLua_wxRichTextStyleDefinition_GetDescription(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetDescription
    wxString returns = (self->GetDescription());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetName[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetName[1] = {{ wxLua_wxRichTextStyleDefinition_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetName }};
//     const wxString& GetName() const;
static int LUACALL wxLua_wxRichTextStyleDefinition_GetName(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetProperties1[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetProperties1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetProperties1[1] = {{ wxLua_wxRichTextStyleDefinition_GetProperties1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetProperties1 }};
//     const wxRichTextProperties& GetProperties() const;
static int LUACALL wxLua_wxRichTextStyleDefinition_GetProperties1(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetProperties
    const wxRichTextProperties* returns = (const wxRichTextProperties*)&self->GetProperties();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetProperties[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetProperties(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetProperties[1] = {{ wxLua_wxRichTextStyleDefinition_GetProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetProperties }};
//     wxRichTextProperties& GetProperties();
static int LUACALL wxLua_wxRichTextStyleDefinition_GetProperties(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetProperties
    wxRichTextProperties* returns = (wxRichTextProperties*)&self->GetProperties();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyle1[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetStyle1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyle1[1] = {{ wxLua_wxRichTextStyleDefinition_GetStyle1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyle1 }};
//     wxRichTextAttr& GetStyle();
static int LUACALL wxLua_wxRichTextStyleDefinition_GetStyle1(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetStyle
    wxRichTextAttr* returns = (wxRichTextAttr*)&self->GetStyle();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyle[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetStyle(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyle[1] = {{ wxLua_wxRichTextStyleDefinition_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyle }};
//     const wxRichTextAttr& GetStyle() const;
static int LUACALL wxLua_wxRichTextStyleDefinition_GetStyle(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetStyle
    const wxRichTextAttr* returns = (const wxRichTextAttr*)&self->GetStyle();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyleMergedWithBase[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_GetStyleMergedWithBase(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyleMergedWithBase[1] = {{ wxLua_wxRichTextStyleDefinition_GetStyleMergedWithBase, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyleMergedWithBase }};
//     virtual wxRichTextAttr GetStyleMergedWithBase(const wxRichTextStyleSheet* sheet) const;
static int LUACALL wxLua_wxRichTextStyleDefinition_GetStyleMergedWithBase(lua_State *L)
{
    // const wxRichTextStyleSheet sheet
    const wxRichTextStyleSheet * sheet = (const wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call GetStyleMergedWithBase
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->GetStyleMergedWithBase(sheet));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Init[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_Init[1] = {{ wxLua_wxRichTextStyleDefinition_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextStyleDefinition_Init(lua_State *L)
{
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetBaseStyle[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_SetBaseStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetBaseStyle[1] = {{ wxLua_wxRichTextStyleDefinition_SetBaseStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetBaseStyle }};
//     void SetBaseStyle(const wxString& name);
static int LUACALL wxLua_wxRichTextStyleDefinition_SetBaseStyle(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call SetBaseStyle
    self->SetBaseStyle(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetDescription[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_SetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetDescription[1] = {{ wxLua_wxRichTextStyleDefinition_SetDescription, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetDescription }};
//     void SetDescription(const wxString& descr);
static int LUACALL wxLua_wxRichTextStyleDefinition_SetDescription(lua_State *L)
{
    // const wxString descr
    const wxString descr = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call SetDescription
    self->SetDescription(descr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetName[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetName[1] = {{ wxLua_wxRichTextStyleDefinition_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetName }};
//     void SetName(const wxString& name);
static int LUACALL wxLua_wxRichTextStyleDefinition_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call SetName
    self->SetName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetProperties[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_SetProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetProperties[1] = {{ wxLua_wxRichTextStyleDefinition_SetProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetProperties }};
//     void SetProperties(const wxRichTextProperties& props);
static int LUACALL wxLua_wxRichTextStyleDefinition_SetProperties(lua_State *L)
{
    // const wxRichTextProperties props
    const wxRichTextProperties * props = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call SetProperties
    self->SetProperties(*props);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetStyle[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_SetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetStyle[1] = {{ wxLua_wxRichTextStyleDefinition_SetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_SetStyle }};
//     void SetStyle(const wxRichTextAttr& style);
static int LUACALL wxLua_wxRichTextStyleDefinition_SetStyle(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call SetStyle
    self->SetStyle(*style);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_delete[] = { &wxluatype_wxRichTextStyleDefinition, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_op_eq[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_op_eq[1] = {{ wxLua_wxRichTextStyleDefinition_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_op_eq }};
//     bool operator ==(const wxRichTextStyleDefinition& def) const;
static int LUACALL wxLua_wxRichTextStyleDefinition_op_eq(lua_State *L)
{
    // const wxRichTextStyleDefinition def
    const wxRichTextStyleDefinition * def = (const wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call op_eq
    bool returns = ((*self)==(*def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_op_set[] = { &wxluatype_wxRichTextStyleDefinition, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleDefinition_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_op_set[1] = {{ wxLua_wxRichTextStyleDefinition_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_op_set }};
//     void operator =(const wxRichTextStyleDefinition& def);
static int LUACALL wxLua_wxRichTextStyleDefinition_op_set(lua_State *L)
{
    // const wxRichTextStyleDefinition def
    const wxRichTextStyleDefinition * def = (const wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleDefinition * self = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleDefinition);
    // call op_set
    (*self)=(*def);

    return 0;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetProperties_overload[] =
{
    { wxLua_wxRichTextStyleDefinition_GetProperties1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetProperties1 },
    { wxLua_wxRichTextStyleDefinition_GetProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetProperties },
};
static int s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetProperties_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetProperties_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyle_overload[] =
{
    { wxLua_wxRichTextStyleDefinition_GetStyle1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyle1 },
    { wxLua_wxRichTextStyleDefinition_GetStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleDefinition_GetStyle },
};
static int s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyle_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextStyleDefinition_delete_function(void** p)
{
    wxRichTextStyleDefinition* o = (wxRichTextStyleDefinition*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextStyleDefinition_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_Copy, 1, NULL },
    { "Eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_Eq, 1, NULL },
    { "GetBaseStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetBaseStyle, 1, NULL },
    { "GetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetDescription, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetName, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetProperties_overload, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetProperties_overload_count, 0 },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyle_overload, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyle_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetStyleMergedWithBase", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_GetStyleMergedWithBase, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_Init, 1, NULL },
    { "SetBaseStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetBaseStyle, 1, NULL },
    { "SetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetDescription, 1, NULL },
    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetName, 1, NULL },
    { "SetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetProperties, 1, NULL },
    { "SetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_SetStyle, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextStyleDefinition_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleDefinition_op_set, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextStyleDefinition_methodCount = sizeof(wxRichTextStyleDefinition_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextCharacterStyleDefinition
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextCharacterStyleDefinition'
int wxluatype_wxRichTextCharacterStyleDefinition = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_Clone[] = { &wxluatype_wxRichTextCharacterStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextCharacterStyleDefinition_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_Clone[1] = {{ wxLua_wxRichTextCharacterStyleDefinition_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_Clone }};
//     virtual wxRichTextStyleDefinition* Clone() const;
static int LUACALL wxLua_wxRichTextCharacterStyleDefinition_Clone(lua_State *L)
{
    // get this
    wxRichTextCharacterStyleDefinition * self = (wxRichTextCharacterStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCharacterStyleDefinition);
    // call Clone
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_delete[] = { &wxluatype_wxRichTextCharacterStyleDefinition, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextCharacterStyleDefinition_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_constructor1[1] = {{ wxLua_wxRichTextCharacterStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_constructor1 }};
//     wxRichTextCharacterStyleDefinition(const wxString& name = wxEmptyString);
static int LUACALL wxLua_wxRichTextCharacterStyleDefinition_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxEmptyString
    const wxString name = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxRichTextCharacterStyleDefinition* returns = new wxRichTextCharacterStyleDefinition(name);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextCharacterStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCharacterStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_constructor[] = { &wxluatype_wxRichTextCharacterStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextCharacterStyleDefinition_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_constructor[1] = {{ wxLua_wxRichTextCharacterStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_constructor }};
//     wxRichTextCharacterStyleDefinition(const wxRichTextCharacterStyleDefinition& def);
static int LUACALL wxLua_wxRichTextCharacterStyleDefinition_constructor(lua_State *L)
{
    // const wxRichTextCharacterStyleDefinition def
    const wxRichTextCharacterStyleDefinition * def = (const wxRichTextCharacterStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCharacterStyleDefinition);
    // call constructor
    wxRichTextCharacterStyleDefinition* returns = new wxRichTextCharacterStyleDefinition(*def);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextCharacterStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCharacterStyleDefinition);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_constructor_overload[] =
{
    { wxLua_wxRichTextCharacterStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_constructor1 },
    { wxLua_wxRichTextCharacterStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextCharacterStyleDefinition_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextCharacterStyleDefinition_delete_function(void** p)
{
    wxRichTextCharacterStyleDefinition* o = (wxRichTextCharacterStyleDefinition*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextCharacterStyleDefinition_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_Clone, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextCharacterStyleDefinition", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_constructor_overload, s_wxluafunc_wxLua_wxRichTextCharacterStyleDefinition_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextCharacterStyleDefinition_methodCount = sizeof(wxRichTextCharacterStyleDefinition_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextParagraphStyleDefinition
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextParagraphStyleDefinition'
int wxluatype_wxRichTextParagraphStyleDefinition = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_Clone[] = { &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_Clone[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_Clone }};
//     virtual wxRichTextStyleDefinition* Clone() const;
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_Clone(lua_State *L)
{
    // get this
    wxRichTextParagraphStyleDefinition * self = (wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphStyleDefinition);
    // call Clone
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_Copy[] = { &wxluatype_wxRichTextParagraphStyleDefinition, &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_Copy[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_Copy }};
//     void Copy(const wxRichTextParagraphStyleDefinition& def);
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_Copy(lua_State *L)
{
    // const wxRichTextParagraphStyleDefinition def
    const wxRichTextParagraphStyleDefinition * def = (const wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphStyleDefinition);
    // get this
    wxRichTextParagraphStyleDefinition * self = (wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphStyleDefinition);
    // call Copy
    self->Copy(*def);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_GetNextStyle[] = { &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_GetNextStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_GetNextStyle[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_GetNextStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_GetNextStyle }};
//     const wxString& GetNextStyle() const;
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_GetNextStyle(lua_State *L)
{
    // get this
    wxRichTextParagraphStyleDefinition * self = (wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphStyleDefinition);
    // call GetNextStyle
    wxString returns = (self->GetNextStyle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_SetNextStyle[] = { &wxluatype_wxRichTextParagraphStyleDefinition, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_SetNextStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_SetNextStyle[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_SetNextStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_SetNextStyle }};
//     void SetNextStyle(const wxString& name);
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_SetNextStyle(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextParagraphStyleDefinition * self = (wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphStyleDefinition);
    // call SetNextStyle
    self->SetNextStyle(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_delete[] = { &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_op_eq[] = { &wxluatype_wxRichTextParagraphStyleDefinition, &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_op_eq[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_op_eq }};
//     bool operator ==(const wxRichTextParagraphStyleDefinition& def) const;
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_op_eq(lua_State *L)
{
    // const wxRichTextParagraphStyleDefinition def
    const wxRichTextParagraphStyleDefinition * def = (const wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphStyleDefinition);
    // get this
    wxRichTextParagraphStyleDefinition * self = (wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphStyleDefinition);
    // call op_eq
    bool returns = ((*self)==(*def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_op_set[] = { &wxluatype_wxRichTextParagraphStyleDefinition, &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_op_set[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_op_set }};
//     void operator =(const wxRichTextParagraphStyleDefinition& def);
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_op_set(lua_State *L)
{
    // const wxRichTextParagraphStyleDefinition def
    const wxRichTextParagraphStyleDefinition * def = (const wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphStyleDefinition);
    // get this
    wxRichTextParagraphStyleDefinition * self = (wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphStyleDefinition);
    // call op_set
    (*self)=(*def);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_constructor1[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_constructor1 }};
//     wxRichTextParagraphStyleDefinition(const wxString& name = wxEmptyString);
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxEmptyString
    const wxString name = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxRichTextParagraphStyleDefinition* returns = new wxRichTextParagraphStyleDefinition(name);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextParagraphStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_constructor[] = { &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_constructor[1] = {{ wxLua_wxRichTextParagraphStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_constructor }};
//     wxRichTextParagraphStyleDefinition(const wxRichTextParagraphStyleDefinition& def);
static int LUACALL wxLua_wxRichTextParagraphStyleDefinition_constructor(lua_State *L)
{
    // const wxRichTextParagraphStyleDefinition def
    const wxRichTextParagraphStyleDefinition * def = (const wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextParagraphStyleDefinition);
    // call constructor
    wxRichTextParagraphStyleDefinition* returns = new wxRichTextParagraphStyleDefinition(*def);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextParagraphStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphStyleDefinition);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_constructor_overload[] =
{
    { wxLua_wxRichTextParagraphStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_constructor1 },
    { wxLua_wxRichTextParagraphStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextParagraphStyleDefinition_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextParagraphStyleDefinition_delete_function(void** p)
{
    wxRichTextParagraphStyleDefinition* o = (wxRichTextParagraphStyleDefinition*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextParagraphStyleDefinition_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_Copy, 1, NULL },
    { "GetNextStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_GetNextStyle, 1, NULL },
    { "SetNextStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_SetNextStyle, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextParagraphStyleDefinition", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_constructor_overload, s_wxluafunc_wxLua_wxRichTextParagraphStyleDefinition_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextParagraphStyleDefinition_methodCount = sizeof(wxRichTextParagraphStyleDefinition_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextListStyleDefinition
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextListStyleDefinition'
int wxluatype_wxRichTextListStyleDefinition = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_Clone[] = { &wxluatype_wxRichTextListStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_Clone[1] = {{ wxLua_wxRichTextListStyleDefinition_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_Clone }};
//     virtual wxRichTextStyleDefinition* Clone() const;
static int LUACALL wxLua_wxRichTextListStyleDefinition_Clone(lua_State *L)
{
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call Clone
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_CombineWithParagraphStyle[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_CombineWithParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_CombineWithParagraphStyle[1] = {{ wxLua_wxRichTextListStyleDefinition_CombineWithParagraphStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_CombineWithParagraphStyle }};
//     wxRichTextAttr CombineWithParagraphStyle(int indent, const wxRichTextAttr& paraStyle, wxRichTextStyleSheet* styleSheet = NULL);
static int LUACALL wxLua_wxRichTextListStyleDefinition_CombineWithParagraphStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextStyleSheet styleSheet = NULL
    wxRichTextStyleSheet * styleSheet = (argCount >= 4 ? (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRichTextStyleSheet) : NULL);
    // const wxRichTextAttr paraStyle
    const wxRichTextAttr * paraStyle = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call CombineWithParagraphStyle
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->CombineWithParagraphStyle(indent, *paraStyle, styleSheet));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_Copy[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_wxRichTextListStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_Copy[1] = {{ wxLua_wxRichTextListStyleDefinition_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_Copy }};
//     void Copy(const wxRichTextListStyleDefinition& def);
static int LUACALL wxLua_wxRichTextListStyleDefinition_Copy(lua_State *L)
{
    // const wxRichTextListStyleDefinition def
    const wxRichTextListStyleDefinition * def = (const wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextListStyleDefinition);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call Copy
    self->Copy(*def);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_FindLevelForIndent[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_FindLevelForIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_FindLevelForIndent[1] = {{ wxLua_wxRichTextListStyleDefinition_FindLevelForIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_FindLevelForIndent }};
//     int FindLevelForIndent(int indent) const;
static int LUACALL wxLua_wxRichTextListStyleDefinition_FindLevelForIndent(lua_State *L)
{
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call FindLevelForIndent
    int returns = (self->FindLevelForIndent(indent));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetCombinedStyle[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetCombinedStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetCombinedStyle[1] = {{ wxLua_wxRichTextListStyleDefinition_GetCombinedStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetCombinedStyle }};
//     wxRichTextAttr GetCombinedStyle(int indent, wxRichTextStyleSheet* styleSheet = NULL);
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetCombinedStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextStyleSheet styleSheet = NULL
    wxRichTextStyleSheet * styleSheet = (argCount >= 3 ? (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleSheet) : NULL);
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call GetCombinedStyle
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->GetCombinedStyle(indent, styleSheet));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetCombinedStyleForLevel[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetCombinedStyleForLevel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetCombinedStyleForLevel[1] = {{ wxLua_wxRichTextListStyleDefinition_GetCombinedStyleForLevel, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetCombinedStyleForLevel }};
//     wxRichTextAttr GetCombinedStyleForLevel(int level, wxRichTextStyleSheet* styleSheet = NULL);
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetCombinedStyleForLevel(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextStyleSheet styleSheet = NULL
    wxRichTextStyleSheet * styleSheet = (argCount >= 3 ? (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleSheet) : NULL);
    // int level
    int level = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call GetCombinedStyleForLevel
    // allocate a new object using the copy constructor
    wxRichTextAttr* returns = new wxRichTextAttr(self->GetCombinedStyleForLevel(level, styleSheet));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1[1] = {{ wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1 }};
//     const wxRichTextAttr* GetLevelAttributes(int i) const;
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call GetLevelAttributes
    const wxRichTextAttr* returns = (const wxRichTextAttr*)self->GetLevelAttributes(i);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetLevelAttributes(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes[1] = {{ wxLua_wxRichTextListStyleDefinition_GetLevelAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes }};
//     wxRichTextAttr* GetLevelAttributes(int i);
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetLevelAttributes(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call GetLevelAttributes
    wxRichTextAttr* returns = (wxRichTextAttr*)self->GetLevelAttributes(i);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelCount[] = { &wxluatype_wxRichTextListStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetLevelCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelCount[1] = {{ wxLua_wxRichTextListStyleDefinition_GetLevelCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelCount }};
//     int GetLevelCount() const;
static int LUACALL wxLua_wxRichTextListStyleDefinition_GetLevelCount(lua_State *L)
{
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call GetLevelCount
    int returns = (self->GetLevelCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_IsNumbered[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_IsNumbered(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_IsNumbered[1] = {{ wxLua_wxRichTextListStyleDefinition_IsNumbered, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_IsNumbered }};
//     bool IsNumbered(int i) const;
static int LUACALL wxLua_wxRichTextListStyleDefinition_IsNumbered(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call IsNumbered
    bool returns = (self->IsNumbered(i));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_SetAttributes[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_SetAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_SetAttributes[1] = {{ wxLua_wxRichTextListStyleDefinition_SetAttributes, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_SetAttributes }};
//     void SetAttributes(int i, int leftIndent, int leftSubIndent, int bulletStyle, const wxString& bulletSymbol = wxEmptyString);
static int LUACALL wxLua_wxRichTextListStyleDefinition_SetAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString bulletSymbol = wxEmptyString
    const wxString bulletSymbol = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxEmptyString));
    // int bulletStyle
    int bulletStyle = (int)wxlua_getnumbertype(L, 5);
    // int leftSubIndent
    int leftSubIndent = (int)wxlua_getnumbertype(L, 4);
    // int leftIndent
    int leftIndent = (int)wxlua_getnumbertype(L, 3);
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call SetAttributes
    self->SetAttributes(i, leftIndent, leftSubIndent, bulletStyle, bulletSymbol);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_SetLevelAttributes[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_TNUMBER, &wxluatype_wxRichTextAttr, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_SetLevelAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_SetLevelAttributes[1] = {{ wxLua_wxRichTextListStyleDefinition_SetLevelAttributes, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_SetLevelAttributes }};
//     void SetLevelAttributes(int i, const wxRichTextAttr& attr);
static int LUACALL wxLua_wxRichTextListStyleDefinition_SetLevelAttributes(lua_State *L)
{
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call SetLevelAttributes
    self->SetLevelAttributes(i, *attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_delete[] = { &wxluatype_wxRichTextListStyleDefinition, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_op_eq[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_wxRichTextListStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_op_eq[1] = {{ wxLua_wxRichTextListStyleDefinition_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_op_eq }};
//     bool operator ==(const wxRichTextListStyleDefinition& def) const;
static int LUACALL wxLua_wxRichTextListStyleDefinition_op_eq(lua_State *L)
{
    // const wxRichTextListStyleDefinition def
    const wxRichTextListStyleDefinition * def = (const wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextListStyleDefinition);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call op_eq
    bool returns = ((*self)==(*def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_op_set[] = { &wxluatype_wxRichTextListStyleDefinition, &wxluatype_wxRichTextListStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_op_set[1] = {{ wxLua_wxRichTextListStyleDefinition_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_op_set }};
//     void operator =(const wxRichTextListStyleDefinition& def);
static int LUACALL wxLua_wxRichTextListStyleDefinition_op_set(lua_State *L)
{
    // const wxRichTextListStyleDefinition def
    const wxRichTextListStyleDefinition * def = (const wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextListStyleDefinition);
    // get this
    wxRichTextListStyleDefinition * self = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call op_set
    (*self)=(*def);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_constructor1[1] = {{ wxLua_wxRichTextListStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_constructor1 }};
//     wxRichTextListStyleDefinition(const wxString& name = wxEmptyString);
static int LUACALL wxLua_wxRichTextListStyleDefinition_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxEmptyString
    const wxString name = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxRichTextListStyleDefinition* returns = new wxRichTextListStyleDefinition(name);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextListStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextListStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_constructor[] = { &wxluatype_wxRichTextListStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextListStyleDefinition_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_constructor[1] = {{ wxLua_wxRichTextListStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_constructor }};
//     wxRichTextListStyleDefinition(const wxRichTextListStyleDefinition& def);
static int LUACALL wxLua_wxRichTextListStyleDefinition_constructor(lua_State *L)
{
    // const wxRichTextListStyleDefinition def
    const wxRichTextListStyleDefinition * def = (const wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextListStyleDefinition);
    // call constructor
    wxRichTextListStyleDefinition* returns = new wxRichTextListStyleDefinition(*def);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextListStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextListStyleDefinition);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes_overload[] =
{
    { wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes1 },
    { wxLua_wxRichTextListStyleDefinition_GetLevelAttributes, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes },
};
static int s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextListStyleDefinition_constructor_overload[] =
{
    { wxLua_wxRichTextListStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_constructor1 },
    { wxLua_wxRichTextListStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextListStyleDefinition_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextListStyleDefinition_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextListStyleDefinition_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextListStyleDefinition_delete_function(void** p)
{
    wxRichTextListStyleDefinition* o = (wxRichTextListStyleDefinition*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextListStyleDefinition_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_Clone, 1, NULL },
    { "CombineWithParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_CombineWithParagraphStyle, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_Copy, 1, NULL },
    { "FindLevelForIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_FindLevelForIndent, 1, NULL },
    { "GetCombinedStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetCombinedStyle, 1, NULL },
    { "GetCombinedStyleForLevel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetCombinedStyleForLevel, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetLevelAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes_overload, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelAttributes_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetLevelCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_GetLevelCount, 1, NULL },
    { "IsNumbered", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_IsNumbered, 1, NULL },
    { "SetAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_SetAttributes, 1, NULL },
    { "SetLevelAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_SetLevelAttributes, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextListStyleDefinition", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_constructor_overload, s_wxluafunc_wxLua_wxRichTextListStyleDefinition_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextListStyleDefinition_methodCount = sizeof(wxRichTextListStyleDefinition_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextBoxStyleDefinition
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextBoxStyleDefinition'
int wxluatype_wxRichTextBoxStyleDefinition = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_Clone[] = { &wxluatype_wxRichTextBoxStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_Clone[1] = {{ wxLua_wxRichTextBoxStyleDefinition_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_Clone }};
//     virtual wxRichTextStyleDefinition* Clone() const;
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_Clone(lua_State *L)
{
    // get this
    wxRichTextBoxStyleDefinition * self = (wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBoxStyleDefinition);
    // call Clone
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_Copy[] = { &wxluatype_wxRichTextBoxStyleDefinition, &wxluatype_wxRichTextBoxStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_Copy[1] = {{ wxLua_wxRichTextBoxStyleDefinition_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_Copy }};
//     void Copy(const wxRichTextBoxStyleDefinition& def);
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_Copy(lua_State *L)
{
    // const wxRichTextBoxStyleDefinition def
    const wxRichTextBoxStyleDefinition * def = (const wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBoxStyleDefinition);
    // get this
    wxRichTextBoxStyleDefinition * self = (wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBoxStyleDefinition);
    // call Copy
    self->Copy(*def);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_delete[] = { &wxluatype_wxRichTextBoxStyleDefinition, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_op_eq[] = { &wxluatype_wxRichTextBoxStyleDefinition, &wxluatype_wxRichTextBoxStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_op_eq[1] = {{ wxLua_wxRichTextBoxStyleDefinition_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_op_eq }};
//     bool operator ==(const wxRichTextBoxStyleDefinition& def) const;
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_op_eq(lua_State *L)
{
    // const wxRichTextBoxStyleDefinition def
    const wxRichTextBoxStyleDefinition * def = (const wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBoxStyleDefinition);
    // get this
    wxRichTextBoxStyleDefinition * self = (wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBoxStyleDefinition);
    // call op_eq
    bool returns = ((*self)==(*def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_op_set[] = { &wxluatype_wxRichTextBoxStyleDefinition, &wxluatype_wxRichTextBoxStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_op_set[1] = {{ wxLua_wxRichTextBoxStyleDefinition_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_op_set }};
//     void operator =(const wxRichTextBoxStyleDefinition& def);
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_op_set(lua_State *L)
{
    // const wxRichTextBoxStyleDefinition def
    const wxRichTextBoxStyleDefinition * def = (const wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBoxStyleDefinition);
    // get this
    wxRichTextBoxStyleDefinition * self = (wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBoxStyleDefinition);
    // call op_set
    (*self)=(*def);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_constructor1[1] = {{ wxLua_wxRichTextBoxStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_constructor1 }};
//     wxRichTextBoxStyleDefinition(const wxString& name = wxEmptyString);
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxEmptyString
    const wxString name = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxRichTextBoxStyleDefinition* returns = new wxRichTextBoxStyleDefinition(name);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextBoxStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBoxStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_constructor[] = { &wxluatype_wxRichTextBoxStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_constructor[1] = {{ wxLua_wxRichTextBoxStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_constructor }};
//     wxRichTextBoxStyleDefinition(const wxRichTextBoxStyleDefinition& def);
static int LUACALL wxLua_wxRichTextBoxStyleDefinition_constructor(lua_State *L)
{
    // const wxRichTextBoxStyleDefinition def
    const wxRichTextBoxStyleDefinition * def = (const wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextBoxStyleDefinition);
    // call constructor
    wxRichTextBoxStyleDefinition* returns = new wxRichTextBoxStyleDefinition(*def);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextBoxStyleDefinition);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBoxStyleDefinition);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_constructor_overload[] =
{
    { wxLua_wxRichTextBoxStyleDefinition_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_constructor1 },
    { wxLua_wxRichTextBoxStyleDefinition_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextBoxStyleDefinition_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextBoxStyleDefinition_delete_function(void** p)
{
    wxRichTextBoxStyleDefinition* o = (wxRichTextBoxStyleDefinition*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextBoxStyleDefinition_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_Clone, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_Copy, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextBoxStyleDefinition", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_constructor_overload, s_wxluafunc_wxLua_wxRichTextBoxStyleDefinition_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextBoxStyleDefinition_methodCount = sizeof(wxRichTextBoxStyleDefinition_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxRichTextStyleSheet
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextStyleSheet'
int wxluatype_wxRichTextStyleSheet = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddBoxStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextBoxStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_AddBoxStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AddBoxStyle[1] = {{ wxLua_wxRichTextStyleSheet_AddBoxStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddBoxStyle }};
//     bool AddBoxStyle(wxRichTextBoxStyleDefinition* def);
static int LUACALL wxLua_wxRichTextStyleSheet_AddBoxStyle(lua_State *L)
{
    // wxRichTextBoxStyleDefinition def
    wxRichTextBoxStyleDefinition * def = (wxRichTextBoxStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBoxStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call AddBoxStyle
    bool returns = (self->AddBoxStyle(def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddCharacterStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextCharacterStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_AddCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AddCharacterStyle[1] = {{ wxLua_wxRichTextStyleSheet_AddCharacterStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddCharacterStyle }};
//     bool AddCharacterStyle(wxRichTextCharacterStyleDefinition* def);
static int LUACALL wxLua_wxRichTextStyleSheet_AddCharacterStyle(lua_State *L)
{
    // wxRichTextCharacterStyleDefinition def
    wxRichTextCharacterStyleDefinition * def = (wxRichTextCharacterStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCharacterStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call AddCharacterStyle
    bool returns = (self->AddCharacterStyle(def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddListStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextListStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_AddListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AddListStyle[1] = {{ wxLua_wxRichTextStyleSheet_AddListStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddListStyle }};
//     bool AddListStyle(wxRichTextListStyleDefinition* def);
static int LUACALL wxLua_wxRichTextStyleSheet_AddListStyle(lua_State *L)
{
    // wxRichTextListStyleDefinition def
    wxRichTextListStyleDefinition * def = (wxRichTextListStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextListStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call AddListStyle
    bool returns = (self->AddListStyle(def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddParagraphStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextParagraphStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_AddParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AddParagraphStyle[1] = {{ wxLua_wxRichTextStyleSheet_AddParagraphStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddParagraphStyle }};
//     bool AddParagraphStyle(wxRichTextParagraphStyleDefinition* def);
static int LUACALL wxLua_wxRichTextStyleSheet_AddParagraphStyle(lua_State *L)
{
    // wxRichTextParagraphStyleDefinition def
    wxRichTextParagraphStyleDefinition * def = (wxRichTextParagraphStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextParagraphStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call AddParagraphStyle
    bool returns = (self->AddParagraphStyle(def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddStyle1[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxList, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_AddStyle1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AddStyle1[1] = {{ wxLua_wxRichTextStyleSheet_AddStyle1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddStyle1 }};
//     bool AddStyle(wxList& list, wxRichTextStyleDefinition* def);
static int LUACALL wxLua_wxRichTextStyleSheet_AddStyle1(lua_State *L)
{
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleDefinition);
    // wxList list
    wxList * list = (wxList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxList);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call AddStyle
    bool returns = (self->AddStyle(*list, def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_AddStyle(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AddStyle[1] = {{ wxLua_wxRichTextStyleSheet_AddStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddStyle }};
//     bool AddStyle(wxRichTextStyleDefinition* def);
static int LUACALL wxLua_wxRichTextStyleSheet_AddStyle(lua_State *L)
{
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call AddStyle
    bool returns = (self->AddStyle(def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AppendSheet[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_AppendSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AppendSheet[1] = {{ wxLua_wxRichTextStyleSheet_AppendSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AppendSheet }};
//     bool AppendSheet(wxRichTextStyleSheet* after);
static int LUACALL wxLua_wxRichTextStyleSheet_AppendSheet(lua_State *L)
{
    // wxRichTextStyleSheet after
    wxRichTextStyleSheet * after = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call AppendSheet
    bool returns = (self->AppendSheet(after));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_Copy[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_Copy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_Copy[1] = {{ wxLua_wxRichTextStyleSheet_Copy, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_Copy }};
//     void Copy(const wxRichTextStyleSheet& sheet);
static int LUACALL wxLua_wxRichTextStyleSheet_Copy(lua_State *L)
{
    // const wxRichTextStyleSheet sheet
    const wxRichTextStyleSheet * sheet = (const wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call Copy
    self->Copy(*sheet);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_DeleteStyles[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_DeleteStyles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_DeleteStyles[1] = {{ wxLua_wxRichTextStyleSheet_DeleteStyles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_DeleteStyles }};
//     void DeleteStyles();
static int LUACALL wxLua_wxRichTextStyleSheet_DeleteStyles(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call DeleteStyles
    self->DeleteStyles();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindBoxStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_FindBoxStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_FindBoxStyle[1] = {{ wxLua_wxRichTextStyleSheet_FindBoxStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindBoxStyle }};
//     wxRichTextBoxStyleDefinition* FindBoxStyle(const wxString& name, bool recurse = true) const;
static int LUACALL wxLua_wxRichTextStyleSheet_FindBoxStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recurse = true
    bool recurse = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call FindBoxStyle
    wxRichTextBoxStyleDefinition* returns = (wxRichTextBoxStyleDefinition*)self->FindBoxStyle(name, recurse);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBoxStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindCharacterStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_FindCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_FindCharacterStyle[1] = {{ wxLua_wxRichTextStyleSheet_FindCharacterStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindCharacterStyle }};
//     wxRichTextCharacterStyleDefinition* FindCharacterStyle(const wxString& name, bool recurse = true) const;
static int LUACALL wxLua_wxRichTextStyleSheet_FindCharacterStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recurse = true
    bool recurse = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call FindCharacterStyle
    wxRichTextCharacterStyleDefinition* returns = (wxRichTextCharacterStyleDefinition*)self->FindCharacterStyle(name, recurse);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCharacterStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindListStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_FindListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_FindListStyle[1] = {{ wxLua_wxRichTextStyleSheet_FindListStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindListStyle }};
//     wxRichTextListStyleDefinition* FindListStyle(const wxString& name, bool recurse = true) const;
static int LUACALL wxLua_wxRichTextStyleSheet_FindListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recurse = true
    bool recurse = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call FindListStyle
    wxRichTextListStyleDefinition* returns = (wxRichTextListStyleDefinition*)self->FindListStyle(name, recurse);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextListStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindParagraphStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_FindParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_FindParagraphStyle[1] = {{ wxLua_wxRichTextStyleSheet_FindParagraphStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindParagraphStyle }};
//     wxRichTextParagraphStyleDefinition* FindParagraphStyle(const wxString& name, bool recurse = true) const;
static int LUACALL wxLua_wxRichTextStyleSheet_FindParagraphStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recurse = true
    bool recurse = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call FindParagraphStyle
    wxRichTextParagraphStyleDefinition* returns = (wxRichTextParagraphStyleDefinition*)self->FindParagraphStyle(name, recurse);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphStyleDefinition);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindStyle1[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxList, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_FindStyle1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_FindStyle1[1] = {{ wxLua_wxRichTextStyleSheet_FindStyle1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindStyle1 }};
//     wxRichTextStyleDefinition* FindStyle(const wxList& list, const wxString& name, bool recurse = true) const;
static int LUACALL wxLua_wxRichTextStyleSheet_FindStyle1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recurse = true
    bool recurse = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 3);
    // const wxList list
    const wxList * list = (const wxList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxList);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call FindStyle
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->FindStyle(*list, name, recurse);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_FindStyle(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_FindStyle[1] = {{ wxLua_wxRichTextStyleSheet_FindStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindStyle }};
//     wxRichTextStyleDefinition* FindStyle(const wxString& name, bool recurse = true) const;
static int LUACALL wxLua_wxRichTextStyleSheet_FindStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool recurse = true
    bool recurse = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call FindStyle
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->FindStyle(name, recurse);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetBoxStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetBoxStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetBoxStyle[1] = {{ wxLua_wxRichTextStyleSheet_GetBoxStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetBoxStyle }};
//     wxRichTextBoxStyleDefinition* GetBoxStyle(size_t n) const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetBoxStyle(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetBoxStyle
    wxRichTextBoxStyleDefinition* returns = (wxRichTextBoxStyleDefinition*)self->GetBoxStyle(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextBoxStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetBoxStyleCount[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetBoxStyleCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetBoxStyleCount[1] = {{ wxLua_wxRichTextStyleSheet_GetBoxStyleCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetBoxStyleCount }};
//     size_t GetBoxStyleCount() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetBoxStyleCount(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetBoxStyleCount
    size_t returns = (self->GetBoxStyleCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetCharacterStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetCharacterStyle[1] = {{ wxLua_wxRichTextStyleSheet_GetCharacterStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetCharacterStyle }};
//     wxRichTextCharacterStyleDefinition* GetCharacterStyle(size_t n) const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetCharacterStyle(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetCharacterStyle
    wxRichTextCharacterStyleDefinition* returns = (wxRichTextCharacterStyleDefinition*)self->GetCharacterStyle(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCharacterStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetCharacterStyleCount[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetCharacterStyleCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetCharacterStyleCount[1] = {{ wxLua_wxRichTextStyleSheet_GetCharacterStyleCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetCharacterStyleCount }};
//     size_t GetCharacterStyleCount() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetCharacterStyleCount(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetCharacterStyleCount
    size_t returns = (self->GetCharacterStyleCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetDescription[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetDescription[1] = {{ wxLua_wxRichTextStyleSheet_GetDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetDescription }};
//     const wxString& GetDescription() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetDescription(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetDescription
    wxString returns = (self->GetDescription());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetListStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetListStyle[1] = {{ wxLua_wxRichTextStyleSheet_GetListStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetListStyle }};
//     wxRichTextListStyleDefinition* GetListStyle(size_t n) const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetListStyle(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetListStyle
    wxRichTextListStyleDefinition* returns = (wxRichTextListStyleDefinition*)self->GetListStyle(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextListStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetListStyleCount[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetListStyleCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetListStyleCount[1] = {{ wxLua_wxRichTextStyleSheet_GetListStyleCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetListStyleCount }};
//     size_t GetListStyleCount() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetListStyleCount(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetListStyleCount
    size_t returns = (self->GetListStyleCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetName[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetName[1] = {{ wxLua_wxRichTextStyleSheet_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetName }};
//     const wxString& GetName() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetName(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetNextSheet[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetNextSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetNextSheet[1] = {{ wxLua_wxRichTextStyleSheet_GetNextSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetNextSheet }};
//     wxRichTextStyleSheet* GetNextSheet() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetNextSheet(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetNextSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetNextSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetParagraphStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetParagraphStyle[1] = {{ wxLua_wxRichTextStyleSheet_GetParagraphStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetParagraphStyle }};
//     wxRichTextParagraphStyleDefinition* GetParagraphStyle(size_t n) const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetParagraphStyle(lua_State *L)
{
    // size_t n
    size_t n = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetParagraphStyle
    wxRichTextParagraphStyleDefinition* returns = (wxRichTextParagraphStyleDefinition*)self->GetParagraphStyle(n);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextParagraphStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetParagraphStyleCount[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetParagraphStyleCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetParagraphStyleCount[1] = {{ wxLua_wxRichTextStyleSheet_GetParagraphStyleCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetParagraphStyleCount }};
//     size_t GetParagraphStyleCount() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetParagraphStyleCount(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetParagraphStyleCount
    size_t returns = (self->GetParagraphStyleCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetPreviousSheet[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetPreviousSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetPreviousSheet[1] = {{ wxLua_wxRichTextStyleSheet_GetPreviousSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetPreviousSheet }};
//     wxRichTextStyleSheet* GetPreviousSheet() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetPreviousSheet(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetPreviousSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetPreviousSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetProperties1[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetProperties1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetProperties1[1] = {{ wxLua_wxRichTextStyleSheet_GetProperties1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetProperties1 }};
//     const wxRichTextProperties& GetProperties() const;
static int LUACALL wxLua_wxRichTextStyleSheet_GetProperties1(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetProperties
    const wxRichTextProperties* returns = (const wxRichTextProperties*)&self->GetProperties();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetProperties[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_GetProperties(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetProperties[1] = {{ wxLua_wxRichTextStyleSheet_GetProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetProperties }};
//     wxRichTextProperties& GetProperties();
static int LUACALL wxLua_wxRichTextStyleSheet_GetProperties(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call GetProperties
    wxRichTextProperties* returns = (wxRichTextProperties*)&self->GetProperties();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextProperties);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_Init[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_Init[1] = {{ wxLua_wxRichTextStyleSheet_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextStyleSheet_Init(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_InsertSheet[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_InsertSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_InsertSheet[1] = {{ wxLua_wxRichTextStyleSheet_InsertSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_InsertSheet }};
//     bool InsertSheet(wxRichTextStyleSheet* before);
static int LUACALL wxLua_wxRichTextStyleSheet_InsertSheet(lua_State *L)
{
    // wxRichTextStyleSheet before
    wxRichTextStyleSheet * before = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call InsertSheet
    bool returns = (self->InsertSheet(before));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveBoxStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleDefinition, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveBoxStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveBoxStyle[1] = {{ wxLua_wxRichTextStyleSheet_RemoveBoxStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveBoxStyle }};
//     bool RemoveBoxStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false);
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveBoxStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteStyle = false
    bool deleteStyle = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call RemoveBoxStyle
    bool returns = (self->RemoveBoxStyle(def, deleteStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveCharacterStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleDefinition, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveCharacterStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveCharacterStyle[1] = {{ wxLua_wxRichTextStyleSheet_RemoveCharacterStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveCharacterStyle }};
//     bool RemoveCharacterStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false);
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveCharacterStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteStyle = false
    bool deleteStyle = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call RemoveCharacterStyle
    bool returns = (self->RemoveCharacterStyle(def, deleteStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveListStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleDefinition, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveListStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveListStyle[1] = {{ wxLua_wxRichTextStyleSheet_RemoveListStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveListStyle }};
//     bool RemoveListStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false);
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveListStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteStyle = false
    bool deleteStyle = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call RemoveListStyle
    bool returns = (self->RemoveListStyle(def, deleteStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveParagraphStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleDefinition, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveParagraphStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveParagraphStyle[1] = {{ wxLua_wxRichTextStyleSheet_RemoveParagraphStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveParagraphStyle }};
//     bool RemoveParagraphStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false);
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveParagraphStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteStyle = false
    bool deleteStyle = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call RemoveParagraphStyle
    bool returns = (self->RemoveParagraphStyle(def, deleteStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveStyle1[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxList, &wxluatype_wxRichTextStyleDefinition, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveStyle1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveStyle1[1] = {{ wxLua_wxRichTextStyleSheet_RemoveStyle1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveStyle1 }};
//     bool RemoveStyle(wxList& list, wxRichTextStyleDefinition* def, bool deleteStyle);
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveStyle1(lua_State *L)
{
    // bool deleteStyle
    bool deleteStyle = wxlua_getbooleantype(L, 4);
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleDefinition);
    // wxList list
    wxList * list = (wxList *)wxluaT_getuserdatatype(L, 2, wxluatype_wxList);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(*list, def, deleteStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveStyle[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleDefinition, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveStyle(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveStyle[1] = {{ wxLua_wxRichTextStyleSheet_RemoveStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveStyle }};
//     bool RemoveStyle(wxRichTextStyleDefinition* def, bool deleteStyle = false);
static int LUACALL wxLua_wxRichTextStyleSheet_RemoveStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool deleteStyle = false
    bool deleteStyle = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call RemoveStyle
    bool returns = (self->RemoveStyle(def, deleteStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetDescription[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_SetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_SetDescription[1] = {{ wxLua_wxRichTextStyleSheet_SetDescription, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetDescription }};
//     void SetDescription(const wxString& descr);
static int LUACALL wxLua_wxRichTextStyleSheet_SetDescription(lua_State *L)
{
    // const wxString descr
    const wxString descr = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call SetDescription
    self->SetDescription(descr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetName[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_SetName[1] = {{ wxLua_wxRichTextStyleSheet_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetName }};
//     void SetName(const wxString& name);
static int LUACALL wxLua_wxRichTextStyleSheet_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call SetName
    self->SetName(name);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetNextSheet[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_SetNextSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_SetNextSheet[1] = {{ wxLua_wxRichTextStyleSheet_SetNextSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetNextSheet }};
//     void SetNextSheet(wxRichTextStyleSheet* sheet);
static int LUACALL wxLua_wxRichTextStyleSheet_SetNextSheet(lua_State *L)
{
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call SetNextSheet
    self->SetNextSheet(sheet);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetPreviousSheet[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_SetPreviousSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_SetPreviousSheet[1] = {{ wxLua_wxRichTextStyleSheet_SetPreviousSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetPreviousSheet }};
//     void SetPreviousSheet(wxRichTextStyleSheet* sheet);
static int LUACALL wxLua_wxRichTextStyleSheet_SetPreviousSheet(lua_State *L)
{
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call SetPreviousSheet
    self->SetPreviousSheet(sheet);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetProperties[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_SetProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_SetProperties[1] = {{ wxLua_wxRichTextStyleSheet_SetProperties, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_SetProperties }};
//     void SetProperties(const wxRichTextProperties& props);
static int LUACALL wxLua_wxRichTextStyleSheet_SetProperties(lua_State *L)
{
    // const wxRichTextProperties props
    const wxRichTextProperties * props = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call SetProperties
    self->SetProperties(*props);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_Unlink[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_Unlink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_Unlink[1] = {{ wxLua_wxRichTextStyleSheet_Unlink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_Unlink }};
//     void Unlink();
static int LUACALL wxLua_wxRichTextStyleSheet_Unlink(lua_State *L)
{
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call Unlink
    self->Unlink();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_delete[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_op_eq[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_op_eq[1] = {{ wxLua_wxRichTextStyleSheet_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_op_eq }};
//     bool operator==(const wxRichTextStyleSheet& sheet) const;
static int LUACALL wxLua_wxRichTextStyleSheet_op_eq(lua_State *L)
{
    // const wxRichTextStyleSheet sheet
    const wxRichTextStyleSheet * sheet = (const wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call op_eq
    bool returns = ((*self)==(*sheet));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_op_set[] = { &wxluatype_wxRichTextStyleSheet, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_op_set[1] = {{ wxLua_wxRichTextStyleSheet_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_op_set }};
//     void operator=(const wxRichTextStyleSheet& sheet);
static int LUACALL wxLua_wxRichTextStyleSheet_op_set(lua_State *L)
{
    // const wxRichTextStyleSheet sheet
    const wxRichTextStyleSheet * sheet = (const wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleSheet * self = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call op_set
    (*self)=(*sheet);

    return 0;
}

static int LUACALL wxLua_wxRichTextStyleSheet_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_constructor1[1] = {{ wxLua_wxRichTextStyleSheet_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextStyleSheet();
static int LUACALL wxLua_wxRichTextStyleSheet_constructor1(lua_State *L)
{
    // call constructor
    wxRichTextStyleSheet* returns = new wxRichTextStyleSheet();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleSheet);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleSheet_constructor[] = { &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleSheet_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_constructor[1] = {{ wxLua_wxRichTextStyleSheet_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_constructor }};
//     wxRichTextStyleSheet(const wxRichTextStyleSheet& sheet);
static int LUACALL wxLua_wxRichTextStyleSheet_constructor(lua_State *L)
{
    // const wxRichTextStyleSheet sheet
    const wxRichTextStyleSheet * sheet = (const wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleSheet);
    // call constructor
    wxRichTextStyleSheet* returns = new wxRichTextStyleSheet(*sheet);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleSheet);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}




#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_AddStyle_overload[] =
{

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleSheet_AddStyle1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddStyle1 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleSheet_AddStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_AddStyle },
};
static int s_wxluafunc_wxLua_wxRichTextStyleSheet_AddStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleSheet_AddStyle_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_FindStyle_overload[] =
{

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleSheet_FindStyle1, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindStyle1 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleSheet_FindStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_FindStyle },
};
static int s_wxluafunc_wxLua_wxRichTextStyleSheet_FindStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleSheet_FindStyle_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_GetProperties_overload[] =
{
    { wxLua_wxRichTextStyleSheet_GetProperties1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetProperties1 },
    { wxLua_wxRichTextStyleSheet_GetProperties, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_GetProperties },
};
static int s_wxluafunc_wxLua_wxRichTextStyleSheet_GetProperties_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleSheet_GetProperties_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveStyle_overload[] =
{

#if (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleSheet_RemoveStyle1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveStyle1 },
#endif // (wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextStyleSheet_RemoveStyle, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_RemoveStyle },
};
static int s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveStyle_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveStyle_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleSheet_constructor_overload[] =
{
    { wxLua_wxRichTextStyleSheet_constructor1, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
    { wxLua_wxRichTextStyleSheet_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleSheet_constructor },
};
static int s_wxluafunc_wxLua_wxRichTextStyleSheet_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleSheet_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxRichTextStyleSheet_delete_function(void** p)
{
    wxRichTextStyleSheet* o = (wxRichTextStyleSheet*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextStyleSheet_methods[] = {
    { "AddBoxStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_AddBoxStyle, 1, NULL },
    { "AddCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_AddCharacterStyle, 1, NULL },
    { "AddListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_AddListStyle, 1, NULL },
    { "AddParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_AddParagraphStyle, 1, NULL },

#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "AddStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_AddStyle_overload, s_wxluafunc_wxLua_wxRichTextStyleSheet_AddStyle_overload_count, 0 },
#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "AppendSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_AppendSheet, 1, NULL },
    { "Copy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_Copy, 1, NULL },
    { "DeleteStyles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_DeleteStyles, 1, NULL },
    { "FindBoxStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_FindBoxStyle, 1, NULL },
    { "FindCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_FindCharacterStyle, 1, NULL },
    { "FindListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_FindListStyle, 1, NULL },
    { "FindParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_FindParagraphStyle, 1, NULL },

#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "FindStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_FindStyle_overload, s_wxluafunc_wxLua_wxRichTextStyleSheet_FindStyle_overload_count, 0 },
#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetBoxStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetBoxStyle, 1, NULL },
    { "GetBoxStyleCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetBoxStyleCount, 1, NULL },
    { "GetCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetCharacterStyle, 1, NULL },
    { "GetCharacterStyleCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetCharacterStyleCount, 1, NULL },
    { "GetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetDescription, 1, NULL },
    { "GetListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetListStyle, 1, NULL },
    { "GetListStyleCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetListStyleCount, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetName, 1, NULL },
    { "GetNextSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetNextSheet, 1, NULL },
    { "GetParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetParagraphStyle, 1, NULL },
    { "GetParagraphStyleCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetParagraphStyleCount, 1, NULL },
    { "GetPreviousSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetPreviousSheet, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetProperties_overload, s_wxluafunc_wxLua_wxRichTextStyleSheet_GetProperties_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_Init, 1, NULL },
    { "InsertSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_InsertSheet, 1, NULL },
    { "RemoveBoxStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveBoxStyle, 1, NULL },
    { "RemoveCharacterStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveCharacterStyle, 1, NULL },
    { "RemoveListStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveListStyle, 1, NULL },
    { "RemoveParagraphStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveParagraphStyle, 1, NULL },

#if ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "RemoveStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveStyle_overload, s_wxluafunc_wxLua_wxRichTextStyleSheet_RemoveStyle_overload_count, 0 },
#endif // ((wxLUA_USE_wxList && !wxUSE_STL) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_SetDescription, 1, NULL },
    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_SetName, 1, NULL },
    { "SetNextSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_SetNextSheet, 1, NULL },
    { "SetPreviousSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_SetPreviousSheet, 1, NULL },
    { "SetProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_SetProperties, 1, NULL },
    { "Unlink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_Unlink, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextStyleSheet_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_op_eq, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleSheet_op_set, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxRichTextStyleSheet", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextStyleSheet_constructor_overload, s_wxluafunc_wxLua_wxRichTextStyleSheet_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxRichTextStyleSheet_methodCount = sizeof(wxRichTextStyleSheet_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)
// ---------------------------------------------------------------------------
// Bind class wxRichTextStyleListBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextStyleListBox'
int wxluatype_wxRichTextStyleListBox = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_ApplyStyle[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_ApplyStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_ApplyStyle[1] = {{ wxLua_wxRichTextStyleListBox_ApplyStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_ApplyStyle }};
//     void ApplyStyle(int i);
static int LUACALL wxLua_wxRichTextStyleListBox_ApplyStyle(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call ApplyStyle
    self->ApplyStyle(i);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_CanAutoSetSelection[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_CanAutoSetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_CanAutoSetSelection[1] = {{ wxLua_wxRichTextStyleListBox_CanAutoSetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_CanAutoSetSelection }};
//     virtual bool CanAutoSetSelection();
static int LUACALL wxLua_wxRichTextStyleListBox_CanAutoSetSelection(lua_State *L)
{
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call CanAutoSetSelection
    bool returns = (self->CanAutoSetSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_ConvertTenthsMMToPixels[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_ConvertTenthsMMToPixels(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_ConvertTenthsMMToPixels[1] = {{ wxLua_wxRichTextStyleListBox_ConvertTenthsMMToPixels, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_ConvertTenthsMMToPixels }};
//     int ConvertTenthsMMToPixels(wxDC& dc, int units) const;
static int LUACALL wxLua_wxRichTextStyleListBox_ConvertTenthsMMToPixels(lua_State *L)
{
    // int units
    int units = (int)wxlua_getnumbertype(L, 3);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call ConvertTenthsMMToPixels
    int returns = (self->ConvertTenthsMMToPixels(*dc, units));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_Create[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_Create[1] = {{ wxLua_wxRichTextStyleListBox_Create, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_Create }};
//         const wxSize& size = wxDefaultSize, long style = 0);
static int LUACALL wxLua_wxRichTextStyleListBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_CreateHTML[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_CreateHTML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_CreateHTML[1] = {{ wxLua_wxRichTextStyleListBox_CreateHTML, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_CreateHTML }};
//     wxString CreateHTML(wxRichTextStyleDefinition* def) const;
static int LUACALL wxLua_wxRichTextStyleListBox_CreateHTML(lua_State *L)
{
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleDefinition);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call CreateHTML
    wxString returns = (self->CreateHTML(def));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetApplyOnSelection[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_GetApplyOnSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_GetApplyOnSelection[1] = {{ wxLua_wxRichTextStyleListBox_GetApplyOnSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetApplyOnSelection }};
//     bool GetApplyOnSelection() const;
static int LUACALL wxLua_wxRichTextStyleListBox_GetApplyOnSelection(lua_State *L)
{
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call GetApplyOnSelection
    bool returns = (self->GetApplyOnSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetIndexForStyle[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_GetIndexForStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_GetIndexForStyle[1] = {{ wxLua_wxRichTextStyleListBox_GetIndexForStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetIndexForStyle }};
//     int GetIndexForStyle(const wxString& name) const ;
static int LUACALL wxLua_wxRichTextStyleListBox_GetIndexForStyle(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call GetIndexForStyle
    int returns = (self->GetIndexForStyle(name));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetRichTextCtrl[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_GetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_GetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleListBox_GetRichTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetRichTextCtrl }};
//     wxRichTextCtrl* GetRichTextCtrl() const;
static int LUACALL wxLua_wxRichTextStyleListBox_GetRichTextCtrl(lua_State *L)
{
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call GetRichTextCtrl
    wxRichTextCtrl* returns = (wxRichTextCtrl*)self->GetRichTextCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCtrl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyle[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyle[1] = {{ wxLua_wxRichTextStyleListBox_GetStyle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyle }};
//     wxRichTextStyleDefinition* GetStyle(size_t i) const ;
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyle(lua_State *L)
{
    // size_t i
    size_t i = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call GetStyle
    wxRichTextStyleDefinition* returns = (wxRichTextStyleDefinition*)self->GetStyle(i);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleDefinition);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyleSheet[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyleSheet[1] = {{ wxLua_wxRichTextStyleListBox_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyleSheet }};
//     wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyleToShowInIdleTime[] = { &wxluatype_wxRichTextCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyleToShowInIdleTime(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyleToShowInIdleTime[1] = {{ wxLua_wxRichTextStyleListBox_GetStyleToShowInIdleTime, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyleToShowInIdleTime }};
//     static wxString GetStyleToShowInIdleTime(wxRichTextCtrl* ctrl, wxRichTextStyleListBox::wxRichTextStyleType styleType);
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyleToShowInIdleTime(lua_State *L)
{
    // wxRichTextStyleListBox::wxRichTextStyleType styleType
    wxRichTextStyleListBox::wxRichTextStyleType styleType = (wxRichTextStyleListBox::wxRichTextStyleType)wxlua_getenumtype(L, 2);
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextCtrl);
    // call GetStyleToShowInIdleTime
    wxString returns = (wxRichTextStyleListBox::GetStyleToShowInIdleTime(ctrl, styleType));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyleType[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyleType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyleType[1] = {{ wxLua_wxRichTextStyleListBox_GetStyleType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_GetStyleType }};
//     wxRichTextStyleListBox::wxRichTextStyleType GetStyleType() const;
static int LUACALL wxLua_wxRichTextStyleListBox_GetStyleType(lua_State *L)
{
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call GetStyleType
    wxRichTextStyleListBox::wxRichTextStyleType returns = (self->GetStyleType());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_Init[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_Init[1] = {{ wxLua_wxRichTextStyleListBox_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextStyleListBox_Init(lua_State *L)
{
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_OnIdle[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxIdleEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_OnIdle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_OnIdle[1] = {{ wxLua_wxRichTextStyleListBox_OnIdle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_OnIdle }};
//     void OnIdle(wxIdleEvent& event);
static int LUACALL wxLua_wxRichTextStyleListBox_OnIdle(lua_State *L)
{
    // wxIdleEvent event
    wxIdleEvent * event = (wxIdleEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIdleEvent);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call OnIdle
    self->OnIdle(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_OnLeftDoubleClick[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_OnLeftDoubleClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_OnLeftDoubleClick[1] = {{ wxLua_wxRichTextStyleListBox_OnLeftDoubleClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_OnLeftDoubleClick }};
//     void OnLeftDoubleClick(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextStyleListBox_OnLeftDoubleClick(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call OnLeftDoubleClick
    self->OnLeftDoubleClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_OnLeftDown[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_OnLeftDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_OnLeftDown[1] = {{ wxLua_wxRichTextStyleListBox_OnLeftDown, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_OnLeftDown }};
//     void OnLeftDown(wxMouseEvent& event);
static int LUACALL wxLua_wxRichTextStyleListBox_OnLeftDown(lua_State *L)
{
    // wxMouseEvent event
    wxMouseEvent * event = (wxMouseEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMouseEvent);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call OnLeftDown
    self->OnLeftDown(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetApplyOnSelection[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_SetApplyOnSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_SetApplyOnSelection[1] = {{ wxLua_wxRichTextStyleListBox_SetApplyOnSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetApplyOnSelection }};
//     void SetApplyOnSelection(bool applyOnSel);
static int LUACALL wxLua_wxRichTextStyleListBox_SetApplyOnSelection(lua_State *L)
{
    // bool applyOnSel
    bool applyOnSel = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call SetApplyOnSelection
    self->SetApplyOnSelection(applyOnSel);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetAutoSetSelection[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_SetAutoSetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_SetAutoSetSelection[1] = {{ wxLua_wxRichTextStyleListBox_SetAutoSetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetAutoSetSelection }};
//     virtual void SetAutoSetSelection(bool autoSet);
static int LUACALL wxLua_wxRichTextStyleListBox_SetAutoSetSelection(lua_State *L)
{
    // bool autoSet
    bool autoSet = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call SetAutoSetSelection
    self->SetAutoSetSelection(autoSet);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetRichTextCtrl[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_SetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_SetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleListBox_SetRichTextCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetRichTextCtrl }};
//     void SetRichTextCtrl(wxRichTextCtrl* ctrl);
static int LUACALL wxLua_wxRichTextStyleListBox_SetRichTextCtrl(lua_State *L)
{
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call SetRichTextCtrl
    self->SetRichTextCtrl(ctrl);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetStyleSelection[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_SetStyleSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_SetStyleSelection[1] = {{ wxLua_wxRichTextStyleListBox_SetStyleSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetStyleSelection }};
//     int SetStyleSelection(const wxString& name);
static int LUACALL wxLua_wxRichTextStyleListBox_SetStyleSelection(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call SetStyleSelection
    int returns = (self->SetStyleSelection(name));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetStyleSheet[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_SetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_SetStyleSheet[1] = {{ wxLua_wxRichTextStyleListBox_SetStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetStyleSheet }};
//     void SetStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextStyleListBox_SetStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call SetStyleSheet
    self->SetStyleSheet(styleSheet);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetStyleType[] = { &wxluatype_wxRichTextStyleListBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_SetStyleType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_SetStyleType[1] = {{ wxLua_wxRichTextStyleListBox_SetStyleType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_SetStyleType }};
//     void SetStyleType(wxRichTextStyleListBox::wxRichTextStyleType styleType);
static int LUACALL wxLua_wxRichTextStyleListBox_SetStyleType(lua_State *L)
{
    // wxRichTextStyleListBox::wxRichTextStyleType styleType
    wxRichTextStyleListBox::wxRichTextStyleType styleType = (wxRichTextStyleListBox::wxRichTextStyleType)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call SetStyleType
    self->SetStyleType(styleType);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_UpdateStyles[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_UpdateStyles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_UpdateStyles[1] = {{ wxLua_wxRichTextStyleListBox_UpdateStyles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_UpdateStyles }};
//     void UpdateStyles();
static int LUACALL wxLua_wxRichTextStyleListBox_UpdateStyles(lua_State *L)
{
    // get this
    wxRichTextStyleListBox * self = (wxRichTextStyleListBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListBox);
    // call UpdateStyles
    self->UpdateStyles();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_delete[] = { &wxluatype_wxRichTextStyleListBox, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_delete }};


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleListBox_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_constructor1[1] = {{ wxLua_wxRichTextStyleListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_constructor1 }};
//         const wxSize& size = wxDefaultSize, long style = 0);
static int LUACALL wxLua_wxRichTextStyleListBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxRichTextStyleListBox* returns = new wxRichTextStyleListBox(parent, id, *pos, *size, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleListBox);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleListBox);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxRichTextStyleListBox_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_constructor[1] = {{ wxLua_wxRichTextStyleListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextStyleListBox();
static int LUACALL wxLua_wxRichTextStyleListBox_constructor(lua_State *L)
{
    // call constructor
    wxRichTextStyleListBox* returns = new wxRichTextStyleListBox();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleListBox);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleListBox);

    return 1;
}




#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListBox_constructor_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextStyleListBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxRichTextStyleListBox_constructor1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextStyleListBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextStyleListBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleListBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))

void wxLua_wxRichTextStyleListBox_delete_function(void** p)
{
    wxRichTextStyleListBox* o = (wxRichTextStyleListBox*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextStyleListBox_methods[] = {
    { "ApplyStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_ApplyStyle, 1, NULL },
    { "CanAutoSetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_CanAutoSetSelection, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxDC)
    { "ConvertTenthsMMToPixels", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_ConvertTenthsMMToPixels, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxDC)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_Create, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "CreateHTML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_CreateHTML, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetApplyOnSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_GetApplyOnSelection, 1, NULL },
    { "GetIndexForStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_GetIndexForStyle, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_GetRichTextCtrl, 1, NULL },
    { "GetStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyle, 1, NULL },
    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyleSheet, 1, NULL },
    { "GetStyleToShowInIdleTime", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyleToShowInIdleTime, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetStyleType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_GetStyleType, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_Init, 1, NULL },
    { "OnIdle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_OnIdle, 1, NULL },
    { "OnLeftDoubleClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_OnLeftDoubleClick, 1, NULL },
    { "OnLeftDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_OnLeftDown, 1, NULL },
    { "SetApplyOnSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_SetApplyOnSelection, 1, NULL },
    { "SetAutoSetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_SetAutoSetSelection, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_SetRichTextCtrl, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetStyleSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_SetStyleSelection, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_SetStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetStyleType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_SetStyleType, 1, NULL },
    { "UpdateStyles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListBox_UpdateStyles, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextStyleListBox_delete, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))
    { "wxRichTextStyleListBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextStyleListBox_constructor_overload, s_wxluafunc_wxLua_wxRichTextStyleListBox_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))

    { 0, 0, 0, 0 },
};

int wxRichTextStyleListBox_methodCount = sizeof(wxRichTextStyleListBox_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxRichTextStyleListBox_enums[] = {
#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)
        { "wxRICHTEXT_STYLE_ALL", wxRichTextStyleListBox::wxRICHTEXT_STYLE_ALL },
        { "wxRICHTEXT_STYLE_BOX", wxRichTextStyleListBox::wxRICHTEXT_STYLE_BOX },
        { "wxRICHTEXT_STYLE_CHARACTER", wxRichTextStyleListBox::wxRICHTEXT_STYLE_CHARACTER },
        { "wxRICHTEXT_STYLE_LIST", wxRichTextStyleListBox::wxRICHTEXT_STYLE_LIST },
        { "wxRICHTEXT_STYLE_PARAGRAPH", wxRichTextStyleListBox::wxRICHTEXT_STYLE_PARAGRAPH },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)

    { NULL, 0, },
};
int wxRichTextStyleListBox_enumCount = sizeof(wxRichTextStyleListBox_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)
// ---------------------------------------------------------------------------
// Bind class wxRichTextStyleListCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextStyleListCtrl'
int wxluatype_wxRichTextStyleListCtrl = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_Create[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_Create[1] = {{ wxLua_wxRichTextStyleListCtrl_Create, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_Create }};
//         const wxSize& size = wxDefaultSize, long style = 0);
static int LUACALL wxLua_wxRichTextStyleListCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetRichTextCtrl[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleListCtrl_GetRichTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetRichTextCtrl }};
//     wxRichTextCtrl* GetRichTextCtrl() const;
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetRichTextCtrl(lua_State *L)
{
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call GetRichTextCtrl
    wxRichTextCtrl* returns = (wxRichTextCtrl*)self->GetRichTextCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleChoice[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleChoice(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleChoice[1] = {{ wxLua_wxRichTextStyleListCtrl_GetStyleChoice, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleChoice }};
//     wxChoice* GetStyleChoice() const;
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleChoice(lua_State *L)
{
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call GetStyleChoice
    wxChoice* returns = (wxChoice*)self->GetStyleChoice();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxChoice);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleListBox[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleListBox(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleListBox[1] = {{ wxLua_wxRichTextStyleListCtrl_GetStyleListBox, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleListBox }};
//     wxRichTextStyleListBox* GetStyleListBox() const;
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleListBox(lua_State *L)
{
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call GetStyleListBox
    wxRichTextStyleListBox* returns = (wxRichTextStyleListBox*)self->GetStyleListBox();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleListBox);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleSheet[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleSheet[1] = {{ wxLua_wxRichTextStyleListCtrl_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleSheet }};
//     wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleType[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleType[1] = {{ wxLua_wxRichTextStyleListCtrl_GetStyleType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_GetStyleType }};
//     wxRichTextStyleListBox::wxRichTextStyleType GetStyleType() const;
static int LUACALL wxLua_wxRichTextStyleListCtrl_GetStyleType(lua_State *L)
{
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call GetStyleType
    wxRichTextStyleListBox::wxRichTextStyleType returns = (self->GetStyleType());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_Init[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_Init[1] = {{ wxLua_wxRichTextStyleListCtrl_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextStyleListCtrl_Init(lua_State *L)
{
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_OnChooseType[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_OnChooseType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_OnChooseType[1] = {{ wxLua_wxRichTextStyleListCtrl_OnChooseType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_OnChooseType }};
//     void OnChooseType(wxCommandEvent& event);
static int LUACALL wxLua_wxRichTextStyleListCtrl_OnChooseType(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call OnChooseType
    self->OnChooseType(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_OnSize[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_wxSizeEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_OnSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_OnSize[1] = {{ wxLua_wxRichTextStyleListCtrl_OnSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_OnSize }};
//     void OnSize(wxSizeEvent& event);
static int LUACALL wxLua_wxRichTextStyleListCtrl_OnSize(lua_State *L)
{
    // wxSizeEvent event
    wxSizeEvent * event = (wxSizeEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizeEvent);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call OnSize
    self->OnSize(*event);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_SetRichTextCtrl[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_SetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_SetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleListCtrl_SetRichTextCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_SetRichTextCtrl }};
//     void SetRichTextCtrl(wxRichTextCtrl* ctrl);
static int LUACALL wxLua_wxRichTextStyleListCtrl_SetRichTextCtrl(lua_State *L)
{
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call SetRichTextCtrl
    self->SetRichTextCtrl(ctrl);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_SetStyleSheet[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_SetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_SetStyleSheet[1] = {{ wxLua_wxRichTextStyleListCtrl_SetStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_SetStyleSheet }};
//     void SetStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextStyleListCtrl_SetStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call SetStyleSheet
    self->SetStyleSheet(styleSheet);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_SetStyleType[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_SetStyleType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_SetStyleType[1] = {{ wxLua_wxRichTextStyleListCtrl_SetStyleType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_SetStyleType }};
//     void SetStyleType(wxRichTextStyleListBox::wxRichTextStyleType styleType);
static int LUACALL wxLua_wxRichTextStyleListCtrl_SetStyleType(lua_State *L)
{
    // wxRichTextStyleListBox::wxRichTextStyleType styleType
    wxRichTextStyleListBox::wxRichTextStyleType styleType = (wxRichTextStyleListBox::wxRichTextStyleType)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call SetStyleType
    self->SetStyleType(styleType);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_StyleIndexToType[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_StyleIndexToType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_StyleIndexToType[1] = {{ wxLua_wxRichTextStyleListCtrl_StyleIndexToType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_StyleIndexToType }};
//     wxRichTextStyleListBox::wxRichTextStyleType StyleIndexToType(int i);
static int LUACALL wxLua_wxRichTextStyleListCtrl_StyleIndexToType(lua_State *L)
{
    // int i
    int i = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call StyleIndexToType
    wxRichTextStyleListBox::wxRichTextStyleType returns = (self->StyleIndexToType(i));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_StyleTypeToIndex[] = { &wxluatype_wxRichTextStyleListCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_StyleTypeToIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_StyleTypeToIndex[1] = {{ wxLua_wxRichTextStyleListCtrl_StyleTypeToIndex, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_StyleTypeToIndex }};
//     int StyleTypeToIndex(wxRichTextStyleListBox::wxRichTextStyleType styleType);
static int LUACALL wxLua_wxRichTextStyleListCtrl_StyleTypeToIndex(lua_State *L)
{
    // wxRichTextStyleListBox::wxRichTextStyleType styleType
    wxRichTextStyleListBox::wxRichTextStyleType styleType = (wxRichTextStyleListBox::wxRichTextStyleType)wxlua_getenumtype(L, 2);
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call StyleTypeToIndex
    int returns = (self->StyleTypeToIndex(styleType));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_UpdateStyles[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_UpdateStyles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_UpdateStyles[1] = {{ wxLua_wxRichTextStyleListCtrl_UpdateStyles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_UpdateStyles }};
//     void UpdateStyles();
static int LUACALL wxLua_wxRichTextStyleListCtrl_UpdateStyles(lua_State *L)
{
    // get this
    wxRichTextStyleListCtrl * self = (wxRichTextStyleListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleListCtrl);
    // call UpdateStyles
    self->UpdateStyles();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_delete[] = { &wxluatype_wxRichTextStyleListCtrl, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_delete }};


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleListCtrl_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_constructor1[1] = {{ wxLua_wxRichTextStyleListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_constructor1 }};
//         const wxSize& size = wxDefaultSize, long style = 0);
static int LUACALL wxLua_wxRichTextStyleListCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxRichTextStyleListCtrl* returns = new wxRichTextStyleListCtrl(parent, id, *pos, *size, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleListCtrl);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleListCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxRichTextStyleListCtrl_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_constructor[1] = {{ wxLua_wxRichTextStyleListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextStyleListCtrl();
static int LUACALL wxLua_wxRichTextStyleListCtrl_constructor(lua_State *L)
{
    // call constructor
    wxRichTextStyleListCtrl* returns = new wxRichTextStyleListCtrl();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleListCtrl);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleListCtrl);

    return 1;
}




#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleListCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextStyleListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxRichTextStyleListCtrl_constructor1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextStyleListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextStyleListCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleListCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))

void wxLua_wxRichTextStyleListCtrl_delete_function(void** p)
{
    wxRichTextStyleListCtrl* o = (wxRichTextStyleListCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextStyleListCtrl_methods[] = {
#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetRichTextCtrl, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)
    { "GetStyleChoice", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleChoice, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxChoice && wxUSE_CHOICE)

    { "GetStyleListBox", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleListBox, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetStyleType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_GetStyleType, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_Init, 1, NULL },
    { "OnChooseType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_OnChooseType, 1, NULL },
    { "OnSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_OnSize, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_SetRichTextCtrl, 1, NULL },
    { "SetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_SetStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetStyleType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_SetStyleType, 1, NULL },
    { "StyleIndexToType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_StyleIndexToType, 1, NULL },
    { "StyleTypeToIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_StyleTypeToIndex, 1, NULL },
    { "UpdateStyles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_UpdateStyles, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_delete, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))
    { "wxRichTextStyleListCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_constructor_overload, s_wxluafunc_wxLua_wxRichTextStyleListCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML))

    { 0, 0, 0, 0 },
};

int wxRichTextStyleListCtrl_methodCount = sizeof(wxRichTextStyleListCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)
// ---------------------------------------------------------------------------
// Bind class wxRichTextStyleComboCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextStyleComboCtrl'
int wxluatype_wxRichTextStyleComboCtrl = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_Create[] = { &wxluatype_wxRichTextStyleComboCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_Create[1] = {{ wxLua_wxRichTextStyleComboCtrl_Create, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_Create }};
//         const wxSize& size = wxDefaultSize, long style = 0);
static int LUACALL wxLua_wxRichTextStyleComboCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_GetRichTextCtrl[] = { &wxluatype_wxRichTextStyleComboCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_GetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_GetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleComboCtrl_GetRichTextCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_GetRichTextCtrl }};
//     wxRichTextCtrl* GetRichTextCtrl() const;
static int LUACALL wxLua_wxRichTextStyleComboCtrl_GetRichTextCtrl(lua_State *L)
{
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call GetRichTextCtrl
    wxRichTextCtrl* returns = (wxRichTextCtrl*)self->GetRichTextCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextCtrl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_GetStyleSheet[] = { &wxluatype_wxRichTextStyleComboCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_GetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_GetStyleSheet[1] = {{ wxLua_wxRichTextStyleComboCtrl_GetStyleSheet, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_GetStyleSheet }};
//     wxRichTextStyleSheet* GetStyleSheet() const;
static int LUACALL wxLua_wxRichTextStyleComboCtrl_GetStyleSheet(lua_State *L)
{
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call GetStyleSheet
    wxRichTextStyleSheet* returns = (wxRichTextStyleSheet*)self->GetStyleSheet();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleSheet);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_Init[] = { &wxluatype_wxRichTextStyleComboCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_Init[1] = {{ wxLua_wxRichTextStyleComboCtrl_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextStyleComboCtrl_Init(lua_State *L)
{
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_OnIdle[] = { &wxluatype_wxRichTextStyleComboCtrl, &wxluatype_wxIdleEvent, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_OnIdle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_OnIdle[1] = {{ wxLua_wxRichTextStyleComboCtrl_OnIdle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_OnIdle }};
//     void OnIdle(wxIdleEvent& event);
static int LUACALL wxLua_wxRichTextStyleComboCtrl_OnIdle(lua_State *L)
{
    // wxIdleEvent event
    wxIdleEvent * event = (wxIdleEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIdleEvent);
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call OnIdle
    self->OnIdle(*event);

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_SetRichTextCtrl[] = { &wxluatype_wxRichTextStyleComboCtrl, &wxluatype_wxRichTextCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_SetRichTextCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_SetRichTextCtrl[1] = {{ wxLua_wxRichTextStyleComboCtrl_SetRichTextCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_SetRichTextCtrl }};
//     void SetRichTextCtrl(wxRichTextCtrl* ctrl);
static int LUACALL wxLua_wxRichTextStyleComboCtrl_SetRichTextCtrl(lua_State *L)
{
    // wxRichTextCtrl ctrl
    wxRichTextCtrl * ctrl = (wxRichTextCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextCtrl);
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call SetRichTextCtrl
    self->SetRichTextCtrl(ctrl);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_SetStyleSheet[] = { &wxluatype_wxRichTextStyleComboCtrl, &wxluatype_wxRichTextStyleSheet, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_SetStyleSheet(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_SetStyleSheet[1] = {{ wxLua_wxRichTextStyleComboCtrl_SetStyleSheet, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_SetStyleSheet }};
//     void SetStyleSheet(wxRichTextStyleSheet* styleSheet);
static int LUACALL wxLua_wxRichTextStyleComboCtrl_SetStyleSheet(lua_State *L)
{
    // wxRichTextStyleSheet styleSheet
    wxRichTextStyleSheet * styleSheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call SetStyleSheet
    self->SetStyleSheet(styleSheet);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_UpdateStyles[] = { &wxluatype_wxRichTextStyleComboCtrl, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_UpdateStyles(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_UpdateStyles[1] = {{ wxLua_wxRichTextStyleComboCtrl_UpdateStyles, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_UpdateStyles }};
//     void UpdateStyles();
static int LUACALL wxLua_wxRichTextStyleComboCtrl_UpdateStyles(lua_State *L)
{
    // get this
    wxRichTextStyleComboCtrl * self = (wxRichTextStyleComboCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextStyleComboCtrl);
    // call UpdateStyles
    self->UpdateStyles();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_delete[] = { &wxluatype_wxRichTextStyleComboCtrl, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_delete }};


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextStyleComboCtrl_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_constructor1[1] = {{ wxLua_wxRichTextStyleComboCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_constructor1 }};
//         const wxSize& size = wxDefaultSize, long style = wxCB_READONLY);
static int LUACALL wxLua_wxRichTextStyleComboCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxCB_READONLY
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxCB_READONLY);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxRichTextStyleComboCtrl* returns = new wxRichTextStyleComboCtrl(parent, id, *pos, *size, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleComboCtrl);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleComboCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxRichTextStyleComboCtrl_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_constructor[1] = {{ wxLua_wxRichTextStyleComboCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextStyleComboCtrl();
static int LUACALL wxLua_wxRichTextStyleComboCtrl_constructor(lua_State *L)
{
    // call constructor
    wxRichTextStyleComboCtrl* returns = new wxRichTextStyleComboCtrl();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextStyleComboCtrl);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextStyleComboCtrl);

    return 1;
}




#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_constructor_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextStyleComboCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxRichTextStyleComboCtrl_constructor1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxRichTextStyleComboCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML))

void wxLua_wxRichTextStyleComboCtrl_delete_function(void** p)
{
    wxRichTextStyleComboCtrl* o = (wxRichTextStyleComboCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextStyleComboCtrl_methods[] = {
#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_Create, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_GetRichTextCtrl, 1, NULL },
    { "GetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_GetStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_Init, 1, NULL },
    { "OnIdle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_OnIdle, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetRichTextCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_SetRichTextCtrl, 1, NULL },
    { "SetStyleSheet", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_SetStyleSheet, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "UpdateStyles", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_UpdateStyles, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_delete, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML))
    { "wxRichTextStyleComboCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_constructor_overload, s_wxluafunc_wxLua_wxRichTextStyleComboCtrl_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)) && (wxLUA_USE_wxPointSizeRect))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML))

    { 0, 0, 0, 0 },
};

int wxRichTextStyleComboCtrl_methodCount = sizeof(wxRichTextStyleComboCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxrichtext_symboldlg.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------



#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxSymbolPickerDialog
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSymbolPickerDialog'
int wxluatype_wxSymbolPickerDialog = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Create[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Create[1] = {{ wxLua_wxSymbolPickerDialog_Create, WXLUAMETHOD_METHOD, 5, 10, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Create }};
//         wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = "Symbols", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = SYMBOL_WXSYMBOLPICKERDIALOG_STYLE );
static int LUACALL wxLua_wxSymbolPickerDialog_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = SYMBOL_WXSYMBOLPICKERDIALOG_STYLE
    long style = (argCount >= 10 ? (long)wxlua_getnumbertype(L, 10) : SYMBOL_WXSYMBOLPICKERDIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 9 ? (const wxSize *)wxluaT_getuserdatatype(L, 9, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 8 ? (const wxPoint *)wxluaT_getuserdatatype(L, 8, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString caption = "Symbols"
    const wxString caption = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("Symbols")));
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 6 ? (wxWindowID)wxlua_getnumbertype(L, 6) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 5, wxluatype_wxWindow);
    // const wxString normalTextFont
    const wxString normalTextFont = wxlua_getwxStringtype(L, 4);
    // const wxString fontName
    const wxString fontName = wxlua_getwxStringtype(L, 3);
    // const wxString symbol
    const wxString symbol = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call Create
    bool returns = (self->Create(symbol, fontName, normalTextFont, parent, id, caption, *pos, *size, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_CreateControls[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_CreateControls(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_CreateControls[1] = {{ wxLua_wxSymbolPickerDialog_CreateControls, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_CreateControls }};
//     void CreateControls();
static int LUACALL wxLua_wxSymbolPickerDialog_CreateControls(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call CreateControls
    self->CreateControls();

    return 0;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetBitmapResource[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_GetBitmapResource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_GetBitmapResource[1] = {{ wxLua_wxSymbolPickerDialog_GetBitmapResource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetBitmapResource }};
//     wxBitmap GetBitmapResource( const wxString& name );
static int LUACALL wxLua_wxSymbolPickerDialog_GetBitmapResource(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call GetBitmapResource
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmapResource(name));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetFontName[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_GetFontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_GetFontName[1] = {{ wxLua_wxSymbolPickerDialog_GetFontName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetFontName }};
//     wxString GetFontName() const;
static int LUACALL wxLua_wxSymbolPickerDialog_GetFontName(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call GetFontName
    wxString returns = (self->GetFontName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetFromUnicode[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_GetFromUnicode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_GetFromUnicode[1] = {{ wxLua_wxSymbolPickerDialog_GetFromUnicode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetFromUnicode }};
//     bool GetFromUnicode() const;
static int LUACALL wxLua_wxSymbolPickerDialog_GetFromUnicode(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call GetFromUnicode
    bool returns = (self->GetFromUnicode());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetIconResource[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_GetIconResource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_GetIconResource[1] = {{ wxLua_wxSymbolPickerDialog_GetIconResource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetIconResource }};
//     wxIcon GetIconResource( const wxString& name );
static int LUACALL wxLua_wxSymbolPickerDialog_GetIconResource(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call GetIconResource
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetIconResource(name));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetNormalTextFontName[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_GetNormalTextFontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_GetNormalTextFontName[1] = {{ wxLua_wxSymbolPickerDialog_GetNormalTextFontName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetNormalTextFontName }};
//     wxString GetNormalTextFontName() const;
static int LUACALL wxLua_wxSymbolPickerDialog_GetNormalTextFontName(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call GetNormalTextFontName
    wxString returns = (self->GetNormalTextFontName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetSymbol[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_GetSymbol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_GetSymbol[1] = {{ wxLua_wxSymbolPickerDialog_GetSymbol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetSymbol }};
//     wxString GetSymbol() const;
static int LUACALL wxLua_wxSymbolPickerDialog_GetSymbol(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call GetSymbol
    wxString returns = (self->GetSymbol());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetSymbolChar[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_GetSymbolChar(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_GetSymbolChar[1] = {{ wxLua_wxSymbolPickerDialog_GetSymbolChar, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_GetSymbolChar }};
//     int GetSymbolChar() const;
static int LUACALL wxLua_wxSymbolPickerDialog_GetSymbolChar(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call GetSymbolChar
    int returns = (self->GetSymbolChar());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl }};
//     wxTextCtrl* m_characterCodeCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_characterCodeCtrl, wxluatype_wxTextCtrl);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_dontUpdate[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_dontUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_dontUpdate[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_dontUpdate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_dontUpdate }};
//     bool m_dontUpdate;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_dontUpdate(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result flag
    lua_pushboolean(L, self->m_dontUpdate);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fontCtrl[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fontCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fontCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_fontCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fontCtrl }};
//     wxComboBox* m_fontCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fontCtrl(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_fontCtrl, wxluatype_wxComboBox);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fontName[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fontName[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_fontName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fontName }};
//     wxString m_fontName;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fontName(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result string
    wxlua_pushwxString(L, self->m_fontName);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fromUnicode[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fromUnicode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fromUnicode[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_fromUnicode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fromUnicode }};
//     bool m_fromUnicode;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fromUnicode(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result flag
    lua_pushboolean(L, self->m_fromUnicode);
    // return the number of values
    return 1;
}


#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl }};
//     wxComboBox* m_fromUnicodeCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_fromUnicodeCtrl, wxluatype_wxComboBox);
    // return the number of values
    return 1;
}

#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName }};
//     wxString m_normalTextFontName;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result string
    wxlua_pushwxString(L, self->m_normalTextFontName);
    // return the number of values
    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer }};
//     wxStdDialogButtonSizer* m_stdButtonSizer;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_stdButtonSizer, wxluatype_wxStdDialogButtonSizer);
    // return the number of values
    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl }};
//     wxComboBox* m_subsetCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_subsetCtrl, wxluatype_wxComboBox);
    // return the number of values
    return 1;
}

#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_symbol[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_symbol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbol[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_symbol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_symbol }};
//     wxString m_symbol;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_symbol(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result string
    wxlua_pushwxString(L, self->m_symbol);
    // return the number of values
    return 1;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl }};
//     wxStaticText* m_symbolStaticCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_symbolStaticCtrl, wxluatype_wxStaticText);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl }};
//     wxSymbolListCtrl* m_symbolsCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl(lua_State *L)
{
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // push the result datatype
    wxluaT_pushuserdatatype(L, self->m_symbolsCtrl, wxluatype_wxSymbolListCtrl);
    // return the number of values
    return 1;
}

static int LUACALL wxLua_wxSymbolPickerDialog_Get_sm_showToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_sm_showToolTips[1] = {{ wxLua_wxSymbolPickerDialog_Get_sm_showToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, g_wxluaargtypeArray_None }};
//     static bool             sm_showToolTips;
static int LUACALL wxLua_wxSymbolPickerDialog_Get_sm_showToolTips(lua_State *L)
{
    // push the result flag
    lua_pushboolean(L, wxSymbolPickerDialog::sm_showToolTips);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_HasSelection[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_HasSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_HasSelection[1] = {{ wxLua_wxSymbolPickerDialog_HasSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_HasSelection }};
//     bool HasSelection() const;
static int LUACALL wxLua_wxSymbolPickerDialog_HasSelection(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call HasSelection
    bool returns = (self->HasSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Init[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Init[1] = {{ wxLua_wxSymbolPickerDialog_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Init }};
//     void Init();
static int LUACALL wxLua_wxSymbolPickerDialog_Init(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnFontCtrlSelected[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnFontCtrlSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnFontCtrlSelected[1] = {{ wxLua_wxSymbolPickerDialog_OnFontCtrlSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnFontCtrlSelected }};
//     void OnFontCtrlSelected( wxCommandEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnFontCtrlSelected(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnFontCtrlSelected
    self->OnFontCtrlSelected(*event);

    return 0;
}


#if (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnFromUnicodeSelected[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnFromUnicodeSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnFromUnicodeSelected[1] = {{ wxLua_wxSymbolPickerDialog_OnFromUnicodeSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnFromUnicodeSelected }};
//     void OnFromUnicodeSelected( wxCommandEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnFromUnicodeSelected(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnFromUnicodeSelected
    self->OnFromUnicodeSelected(*event);

    return 0;
}

#endif // (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnHelpClick[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnHelpClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnHelpClick[1] = {{ wxLua_wxSymbolPickerDialog_OnHelpClick, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnHelpClick }};
//     void OnHelpClick( wxCommandEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnHelpClick(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnHelpClick
    self->OnHelpClick(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnHelpUpdate[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnHelpUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnHelpUpdate[1] = {{ wxLua_wxSymbolPickerDialog_OnHelpUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnHelpUpdate }};
//     void OnHelpUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnHelpUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnHelpUpdate
    self->OnHelpUpdate(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnOkUpdate[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnOkUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnOkUpdate[1] = {{ wxLua_wxSymbolPickerDialog_OnOkUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnOkUpdate }};
//     void OnOkUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnOkUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnOkUpdate
    self->OnOkUpdate(*event);

    return 0;
}


#if (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnSubsetSelected[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnSubsetSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnSubsetSelected[1] = {{ wxLua_wxSymbolPickerDialog_OnSubsetSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnSubsetSelected }};
//     void OnSubsetSelected( wxCommandEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnSubsetSelected(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnSubsetSelected
    self->OnSubsetSelected(*event);

    return 0;
}

#endif // (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnSymbolSelected[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxCommandEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnSymbolSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnSymbolSelected[1] = {{ wxLua_wxSymbolPickerDialog_OnSymbolSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnSymbolSelected }};
//     void OnSymbolSelected( wxCommandEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnSymbolSelected(lua_State *L)
{
    // wxCommandEvent event
    wxCommandEvent * event = (wxCommandEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxCommandEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnSymbolSelected
    self->OnSymbolSelected(*event);

    return 0;
}


#if (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnSymbolpickerdialogSubsetUpdate[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxUpdateUIEvent, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_OnSymbolpickerdialogSubsetUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_OnSymbolpickerdialogSubsetUpdate[1] = {{ wxLua_wxSymbolPickerDialog_OnSymbolpickerdialogSubsetUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_OnSymbolpickerdialogSubsetUpdate }};
//     void OnSymbolpickerdialogSubsetUpdate( wxUpdateUIEvent& event );
static int LUACALL wxLua_wxSymbolPickerDialog_OnSymbolpickerdialogSubsetUpdate(lua_State *L)
{
    // wxUpdateUIEvent event
    wxUpdateUIEvent * event = (wxUpdateUIEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxUpdateUIEvent);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call OnSymbolpickerdialogSubsetUpdate
    self->OnSymbolpickerdialogSubsetUpdate(*event);

    return 0;
}

#endif // (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetFontName[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_SetFontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_SetFontName[1] = {{ wxLua_wxSymbolPickerDialog_SetFontName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetFontName }};
//     void SetFontName(wxString value);
static int LUACALL wxLua_wxSymbolPickerDialog_SetFontName(lua_State *L)
{
    // wxString value
    wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call SetFontName
    self->SetFontName(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetFromUnicode[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_SetFromUnicode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_SetFromUnicode[1] = {{ wxLua_wxSymbolPickerDialog_SetFromUnicode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetFromUnicode }};
//     void SetFromUnicode(bool value);
static int LUACALL wxLua_wxSymbolPickerDialog_SetFromUnicode(lua_State *L)
{
    // bool value
    bool value = wxlua_getbooleantype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call SetFromUnicode
    self->SetFromUnicode(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetNormalTextFontName[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_SetNormalTextFontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_SetNormalTextFontName[1] = {{ wxLua_wxSymbolPickerDialog_SetNormalTextFontName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetNormalTextFontName }};
//     void SetNormalTextFontName(wxString value);
static int LUACALL wxLua_wxSymbolPickerDialog_SetNormalTextFontName(lua_State *L)
{
    // wxString value
    wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call SetNormalTextFontName
    self->SetNormalTextFontName(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetShowToolTips[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_SetShowToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_SetShowToolTips[1] = {{ wxLua_wxSymbolPickerDialog_SetShowToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetShowToolTips }};
//     static void SetShowToolTips(bool show);
static int LUACALL wxLua_wxSymbolPickerDialog_SetShowToolTips(lua_State *L)
{
    // bool show
    bool show = wxlua_getbooleantype(L, 1);
    // call SetShowToolTips
    wxSymbolPickerDialog::SetShowToolTips(show);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetSymbol[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_SetSymbol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_SetSymbol[1] = {{ wxLua_wxSymbolPickerDialog_SetSymbol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetSymbol }};
//     void SetSymbol(wxString value);
static int LUACALL wxLua_wxSymbolPickerDialog_SetSymbol(lua_State *L)
{
    // wxString value
    wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call SetSymbol
    self->SetSymbol(value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetUnicodeMode[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_SetUnicodeMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_SetUnicodeMode[1] = {{ wxLua_wxSymbolPickerDialog_SetUnicodeMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_SetUnicodeMode }};
//     void SetUnicodeMode(bool unicodeMode);
static int LUACALL wxLua_wxSymbolPickerDialog_SetUnicodeMode(lua_State *L)
{
    // bool unicodeMode
    bool unicodeMode = wxlua_getbooleantype(L, 2);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call SetUnicodeMode
    self->SetUnicodeMode(unicodeMode);

    return 0;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxTextCtrl, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl }};
//     wxTextCtrl* m_characterCodeCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl(lua_State *L)
{
    // get the data type value
    wxTextCtrl* val = (wxTextCtrl*)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextCtrl);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_characterCodeCtrl = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_dontUpdate[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_dontUpdate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_dontUpdate[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_dontUpdate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_dontUpdate }};
//     bool m_dontUpdate;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_dontUpdate(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_dontUpdate = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fontCtrl[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fontCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fontCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_fontCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fontCtrl }};
//     wxComboBox* m_fontCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fontCtrl(lua_State *L)
{
    // get the data type value
    wxComboBox* val = (wxComboBox*)wxluaT_getuserdatatype(L, 2, wxluatype_wxComboBox);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_fontCtrl = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fontName[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fontName[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_fontName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fontName }};
//     wxString m_fontName;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fontName(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_fontName = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fromUnicode[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fromUnicode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fromUnicode[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_fromUnicode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fromUnicode }};
//     bool m_fromUnicode;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fromUnicode(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_fromUnicode = val;
    // return the number of values
    return 0;
}


#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl }};
//     wxComboBox* m_fromUnicodeCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl(lua_State *L)
{
    // get the data type value
    wxComboBox* val = (wxComboBox*)wxluaT_getuserdatatype(L, 2, wxluatype_wxComboBox);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_fromUnicodeCtrl = val;
    // return the number of values
    return 0;
}

#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName }};
//     wxString m_normalTextFontName;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_normalTextFontName = val;
    // return the number of values
    return 0;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxStdDialogButtonSizer, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer }};
//     wxStdDialogButtonSizer* m_stdButtonSizer;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer(lua_State *L)
{
    // get the data type value
    wxStdDialogButtonSizer* val = (wxStdDialogButtonSizer*)wxluaT_getuserdatatype(L, 2, wxluatype_wxStdDialogButtonSizer);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_stdButtonSizer = val;
    // return the number of values
    return 0;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxComboBox, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl }};
//     wxComboBox* m_subsetCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl(lua_State *L)
{
    // get the data type value
    wxComboBox* val = (wxComboBox*)wxluaT_getuserdatatype(L, 2, wxluatype_wxComboBox);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_subsetCtrl = val;
    // return the number of values
    return 0;
}

#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_symbol[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_symbol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbol[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_symbol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_symbol }};
//     wxString m_symbol;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_symbol(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_symbol = val;
    // return the number of values
    return 0;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxStaticText, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl }};
//     wxStaticText* m_symbolStaticCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl(lua_State *L)
{
    // get the data type value
    wxStaticText* val = (wxStaticText*)wxluaT_getuserdatatype(L, 2, wxluatype_wxStaticText);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_symbolStaticCtrl = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_wxSymbolListCtrl, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl[1] = {{ wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl }};
//     wxSymbolListCtrl* m_symbolsCtrl;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl(lua_State *L)
{
    // get the data type value
    wxSymbolListCtrl* val = (wxSymbolListCtrl*)wxluaT_getuserdatatype(L, 2, wxluatype_wxSymbolListCtrl);
    // get this
    wxSymbolPickerDialog *self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    self->m_symbolsCtrl = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_sm_showToolTips[] = { &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_Set_sm_showToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_sm_showToolTips[1] = {{ wxLua_wxSymbolPickerDialog_Set_sm_showToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_Set_sm_showToolTips }};
//     static bool             sm_showToolTips;
static int LUACALL wxLua_wxSymbolPickerDialog_Set_sm_showToolTips(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 1);
    wxSymbolPickerDialog::sm_showToolTips = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_ShowAtSubset[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_ShowAtSubset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_ShowAtSubset[1] = {{ wxLua_wxSymbolPickerDialog_ShowAtSubset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_ShowAtSubset }};
//     void ShowAtSubset();
static int LUACALL wxLua_wxSymbolPickerDialog_ShowAtSubset(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call ShowAtSubset
    self->ShowAtSubset();

    return 0;
}

static int LUACALL wxLua_wxSymbolPickerDialog_ShowToolTips(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_ShowToolTips[1] = {{ wxLua_wxSymbolPickerDialog_ShowToolTips, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static bool ShowToolTips();
static int LUACALL wxLua_wxSymbolPickerDialog_ShowToolTips(lua_State *L)
{
    // call ShowToolTips
    bool returns = (wxSymbolPickerDialog::ShowToolTips());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_TransferDataToWindow[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_TransferDataToWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_TransferDataToWindow[1] = {{ wxLua_wxSymbolPickerDialog_TransferDataToWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_TransferDataToWindow }};
//     virtual bool TransferDataToWindow();
static int LUACALL wxLua_wxSymbolPickerDialog_TransferDataToWindow(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call TransferDataToWindow
    bool returns = (self->TransferDataToWindow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_UpdateSymbolDisplay[] = { &wxluatype_wxSymbolPickerDialog, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_UpdateSymbolDisplay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_UpdateSymbolDisplay[1] = {{ wxLua_wxSymbolPickerDialog_UpdateSymbolDisplay, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_UpdateSymbolDisplay }};
//     void UpdateSymbolDisplay(bool updateSymbolList = true, bool showAtSubset = true);
static int LUACALL wxLua_wxSymbolPickerDialog_UpdateSymbolDisplay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool showAtSubset = true
    bool showAtSubset = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // bool updateSymbolList = true
    bool updateSymbolList = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call UpdateSymbolDisplay
    self->UpdateSymbolDisplay(updateSymbolList, showAtSubset);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_UseNormalFont[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_UseNormalFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_UseNormalFont[1] = {{ wxLua_wxSymbolPickerDialog_UseNormalFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_UseNormalFont }};
//     bool UseNormalFont() const;
static int LUACALL wxLua_wxSymbolPickerDialog_UseNormalFont(lua_State *L)
{
    // get this
    wxSymbolPickerDialog * self = (wxSymbolPickerDialog *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolPickerDialog);
    // call UseNormalFont
    bool returns = (self->UseNormalFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_delete[] = { &wxluatype_wxSymbolPickerDialog, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_delete }};


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)


#if (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)


#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolPickerDialog_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSymbolPickerDialog_constructor1(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_constructor1[1] = {{ wxLua_wxSymbolPickerDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 9, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_constructor1 }};
//         wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = "Symbols", const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = SYMBOL_WXSYMBOLPICKERDIALOG_STYLE );
static int LUACALL wxLua_wxSymbolPickerDialog_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = SYMBOL_WXSYMBOLPICKERDIALOG_STYLE
    long style = (argCount >= 9 ? (long)wxlua_getnumbertype(L, 9) : SYMBOL_WXSYMBOLPICKERDIALOG_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 8 ? (const wxSize *)wxluaT_getuserdatatype(L, 8, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 7 ? (const wxPoint *)wxluaT_getuserdatatype(L, 7, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString caption = "Symbols"
    const wxString caption = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("Symbols")));
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 5 ? (wxWindowID)wxlua_getnumbertype(L, 5) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 4, wxluatype_wxWindow);
    // const wxString normalTextFont
    const wxString normalTextFont = wxlua_getwxStringtype(L, 3);
    // const wxString fontName
    const wxString fontName = wxlua_getwxStringtype(L, 2);
    // const wxString symbol
    const wxString symbol = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxSymbolPickerDialog* returns = new wxSymbolPickerDialog(symbol, fontName, normalTextFont, parent, id, caption, *pos, *size, style);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSymbolPickerDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSymbolPickerDialog);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxSymbolPickerDialog_constructor(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_constructor[1] = {{ wxLua_wxSymbolPickerDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSymbolPickerDialog( );
static int LUACALL wxLua_wxSymbolPickerDialog_constructor(lua_State *L)
{
    // call constructor
    wxSymbolPickerDialog* returns = new wxSymbolPickerDialog();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSymbolPickerDialog);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSymbolPickerDialog);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolPickerDialog_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxSymbolPickerDialog_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 9, s_wxluatypeArray_wxLua_wxSymbolPickerDialog_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxSymbolPickerDialog_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSymbolPickerDialog_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSymbolPickerDialog_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxSymbolPickerDialog_delete_function(void** p)
{
    wxSymbolPickerDialog* o = (wxSymbolPickerDialog*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSymbolPickerDialog_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "CreateControls", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_CreateControls, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetBitmapResource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_GetBitmapResource, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetFontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_GetFontName, 1, NULL },
    { "GetFromUnicode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_GetFromUnicode, 1, NULL },

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetIconResource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_GetIconResource, 1, NULL },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetNormalTextFontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_GetNormalTextFontName, 1, NULL },
    { "GetSymbol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_GetSymbol, 1, NULL },
    { "GetSymbolChar", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_GetSymbolChar, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    // %member    { "Get_m_characterCodeCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    // %member    { "Get_m_dontUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_dontUpdate, 1, NULL },

#if (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_fontCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fontCtrl, 1, NULL },
#endif // (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Get_m_fontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fontName, 1, NULL },
    // %member    { "Get_m_fromUnicode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fromUnicode, 1, NULL },

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    // %member    { "Get_m_fromUnicodeCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl, 1, NULL },
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    // %member    { "Get_m_normalTextFontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Get_m_stdButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    // %member    { "Get_m_subsetCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl, 1, NULL },
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    // %member    { "Get_m_symbol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbol, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
    // %member    { "Get_m_symbolStaticCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)

    // %member    { "Get_m_symbolsCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl, 1, NULL },
    // %member    { "Get_sm_showToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_sm_showToolTips, 1, NULL },
    { "HasSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_HasSelection, 1, NULL },
    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Init, 1, NULL },
    { "OnFontCtrlSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnFontCtrlSelected, 1, NULL },

#if (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "OnFromUnicodeSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnFromUnicodeSelected, 1, NULL },
#endif // (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "OnHelpClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnHelpClick, 1, NULL },
    { "OnHelpUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnHelpUpdate, 1, NULL },
    { "OnOkUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnOkUpdate, 1, NULL },

#if (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "OnSubsetSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnSubsetSelected, 1, NULL },
#endif // (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "OnSymbolSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnSymbolSelected, 1, NULL },

#if (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "OnSymbolpickerdialogSubsetUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_OnSymbolpickerdialogSubsetUpdate, 1, NULL },
#endif // (defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetFontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_SetFontName, 1, NULL },
    { "SetFromUnicode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_SetFromUnicode, 1, NULL },
    { "SetNormalTextFontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_SetNormalTextFontName, 1, NULL },
    { "SetShowToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSymbolPickerDialog_SetShowToolTips, 1, NULL },
    { "SetSymbol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_SetSymbol, 1, NULL },
    { "SetUnicodeMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_SetUnicodeMode, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    // %member    { "Set_m_characterCodeCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    // %member    { "Set_m_dontUpdate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_dontUpdate, 1, NULL },

#if (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_fontCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fontCtrl, 1, NULL },
#endif // (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    // %member    { "Set_m_fontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fontName, 1, NULL },
    // %member    { "Set_m_fromUnicode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fromUnicode, 1, NULL },

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    // %member    { "Set_m_fromUnicodeCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl, 1, NULL },
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    // %member    { "Set_m_normalTextFontName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    // %member    { "Set_m_stdButtonSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    // %member    { "Set_m_subsetCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl, 1, NULL },
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    // %member    { "Set_m_symbol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbol, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
    // %member    { "Set_m_symbolStaticCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)

    // %member    { "Set_m_symbolsCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl, 1, NULL },
    // %member    { "Set_sm_showToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_sm_showToolTips, 1, NULL },
    { "ShowAtSubset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_ShowAtSubset, 1, NULL },
    { "ShowToolTips", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSymbolPickerDialog_ShowToolTips, 1, NULL },
    { "TransferDataToWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_TransferDataToWindow, 1, NULL },
    { "UpdateSymbolDisplay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_UpdateSymbolDisplay, 1, NULL },
    { "UseNormalFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolPickerDialog_UseNormalFont, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSymbolPickerDialog_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
    { "m_characterCodeCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_characterCodeCtrl, 1, NULL },
    { "m_characterCodeCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_characterCodeCtrl, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

    { "m_dontUpdate", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_dontUpdate, 1, NULL },
    { "m_dontUpdate", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_dontUpdate, 1, NULL },

#if (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_fontCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fontCtrl, 1, NULL },
    { "m_fontCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fontCtrl, 1, NULL },
#endif // (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "m_fontName", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fontName, 1, NULL },
    { "m_fontName", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fontName, 1, NULL },
    { "m_fromUnicode", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fromUnicode, 1, NULL },
    { "m_fromUnicode", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fromUnicode, 1, NULL },

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    { "m_fromUnicodeCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_fromUnicodeCtrl, 1, NULL },
    { "m_fromUnicodeCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_fromUnicodeCtrl, 1, NULL },
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    { "m_normalTextFontName", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_normalTextFontName, 1, NULL },
    { "m_normalTextFontName", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_normalTextFontName, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "m_stdButtonSizer", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_stdButtonSizer, 1, NULL },
    { "m_stdButtonSizer", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_stdButtonSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer) && (wxUSE_BUTTON)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)
    { "m_subsetCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_subsetCtrl, 1, NULL },
    { "m_subsetCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_subsetCtrl, 1, NULL },
#endif // ((defined (__UNICODE__ )) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxComboBox && wxUSE_COMBOBOX)

    { "m_symbol", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbol, 1, NULL },
    { "m_symbol", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbol, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)
    { "m_symbolStaticCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbolStaticCtrl, 1, NULL },
    { "m_symbolStaticCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbolStaticCtrl, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxStaticText && wxUSE_STATTEXT)

    { "m_symbolsCtrl", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_m_symbolsCtrl, 1, NULL },
    { "m_symbolsCtrl", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_m_symbolsCtrl, 1, NULL },
    { "sm_showToolTips", WXLUAMETHOD_SETPROP|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSymbolPickerDialog_Set_sm_showToolTips, 1, NULL },
    { "sm_showToolTips", WXLUAMETHOD_GETPROP|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSymbolPickerDialog_Get_sm_showToolTips, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxSymbolPickerDialog", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSymbolPickerDialog_constructor_overload, s_wxluafunc_wxLua_wxSymbolPickerDialog_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxSymbolPickerDialog_methodCount = sizeof(wxSymbolPickerDialog_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxSymbolPickerDialog_enums[] = {
#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "ID_SYMBOLPICKERDIALOG", wxSymbolPickerDialog::ID_SYMBOLPICKERDIALOG },
        { "ID_SYMBOLPICKERDIALOG_CHARACTERCODE", wxSymbolPickerDialog::ID_SYMBOLPICKERDIALOG_CHARACTERCODE },
        { "ID_SYMBOLPICKERDIALOG_FONT", wxSymbolPickerDialog::ID_SYMBOLPICKERDIALOG_FONT },
        { "ID_SYMBOLPICKERDIALOG_FROM", wxSymbolPickerDialog::ID_SYMBOLPICKERDIALOG_FROM },
        { "ID_SYMBOLPICKERDIALOG_LISTCTRL", wxSymbolPickerDialog::ID_SYMBOLPICKERDIALOG_LISTCTRL },
        { "ID_SYMBOLPICKERDIALOG_SUBSET", wxSymbolPickerDialog::ID_SYMBOLPICKERDIALOG_SUBSET },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

    { NULL, 0, },
};
int wxSymbolPickerDialog_enumCount = sizeof(wxSymbolPickerDialog_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
// ---------------------------------------------------------------------------
// Bind class wxSymbolListCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSymbolListCtrl'
int wxluatype_wxSymbolListCtrl = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_Create[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_Create[1] = {{ wxLua_wxSymbolListCtrl_Create, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxSymbolListCtrl_Create }};
//                 const wxString& name = wxPanelNameStr);
static int LUACALL wxLua_wxSymbolListCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxPanelNameStr
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxPanelNameStr));
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_EnsureVisible[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_EnsureVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_EnsureVisible[1] = {{ wxLua_wxSymbolListCtrl_EnsureVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_EnsureVisible }};
//     void EnsureVisible(int item);
static int LUACALL wxLua_wxSymbolListCtrl_EnsureVisible(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call EnsureVisible
    self->EnsureVisible(item);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetCellSize[] = { &wxluatype_wxSymbolListCtrl, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_GetCellSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_GetCellSize[1] = {{ wxLua_wxSymbolListCtrl_GetCellSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetCellSize }};
//     const wxSize& GetCellSize() const;
static int LUACALL wxLua_wxSymbolListCtrl_GetCellSize(lua_State *L)
{
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call GetCellSize
    const wxSize* returns = (const wxSize*)&self->GetCellSize();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetClassDefaultAttributes[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_GetClassDefaultAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_GetClassDefaultAttributes[1] = {{ wxLua_wxSymbolListCtrl_GetClassDefaultAttributes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetClassDefaultAttributes }};
//     static wxVisualAttributes GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);
static int LUACALL wxLua_wxSymbolListCtrl_GetClassDefaultAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    wxWindowVariant variant = (argCount >= 1 ? (wxWindowVariant)wxlua_getenumtype(L, 1) : wxWINDOW_VARIANT_NORMAL);
    // call GetClassDefaultAttributes
    // allocate a new object using the copy constructor
    wxVisualAttributes* returns = new wxVisualAttributes(wxSymbolListCtrl::GetClassDefaultAttributes(variant));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVisualAttributes);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetDefaultAttributes[] = { &wxluatype_wxSymbolListCtrl, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_GetDefaultAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_GetDefaultAttributes[1] = {{ wxLua_wxSymbolListCtrl_GetDefaultAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetDefaultAttributes }};
//     virtual wxVisualAttributes GetDefaultAttributes() const;
static int LUACALL wxLua_wxSymbolListCtrl_GetDefaultAttributes(lua_State *L)
{
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call GetDefaultAttributes
    // allocate a new object using the copy constructor
    wxVisualAttributes* returns = new wxVisualAttributes(self->GetDefaultAttributes());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVisualAttributes);

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetMargins[] = { &wxluatype_wxSymbolListCtrl, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_GetMargins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_GetMargins[1] = {{ wxLua_wxSymbolListCtrl_GetMargins, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetMargins }};
//     wxPoint GetMargins() const;
static int LUACALL wxLua_wxSymbolListCtrl_GetMargins(lua_State *L)
{
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call GetMargins
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetMargins());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetMaxSymbolValue[] = { &wxluatype_wxSymbolListCtrl, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_GetMaxSymbolValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_GetMaxSymbolValue[1] = {{ wxLua_wxSymbolListCtrl_GetMaxSymbolValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetMaxSymbolValue }};
//     int GetMaxSymbolValue() const;
static int LUACALL wxLua_wxSymbolListCtrl_GetMaxSymbolValue(lua_State *L)
{
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call GetMaxSymbolValue
    int returns = (self->GetMaxSymbolValue());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetMinSymbolValue[] = { &wxluatype_wxSymbolListCtrl, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_GetMinSymbolValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_GetMinSymbolValue[1] = {{ wxLua_wxSymbolListCtrl_GetMinSymbolValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetMinSymbolValue }};
//     int GetMinSymbolValue() const;
static int LUACALL wxLua_wxSymbolListCtrl_GetMinSymbolValue(lua_State *L)
{
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call GetMinSymbolValue
    int returns = (self->GetMinSymbolValue());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetSelectionBackground[] = { &wxluatype_wxSymbolListCtrl, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_GetSelectionBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_GetSelectionBackground[1] = {{ wxLua_wxSymbolListCtrl_GetSelectionBackground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_GetSelectionBackground }};
//     const wxColour& GetSelectionBackground() const;
static int LUACALL wxLua_wxSymbolListCtrl_GetSelectionBackground(lua_State *L)
{
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call GetSelectionBackground
    const wxColour* returns = (const wxColour*)&self->GetSelectionBackground();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_IsCurrentItem[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_IsCurrentItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_IsCurrentItem[1] = {{ wxLua_wxSymbolListCtrl_IsCurrentItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_IsCurrentItem }};
//     bool IsCurrentItem(int item) const;
static int LUACALL wxLua_wxSymbolListCtrl_IsCurrentItem(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call IsCurrentItem
    bool returns = (self->IsCurrentItem(item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_IsSelected[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_IsSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_IsSelected[1] = {{ wxLua_wxSymbolListCtrl_IsSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_IsSelected }};
//     bool IsSelected(int item) const;
static int LUACALL wxLua_wxSymbolListCtrl_IsSelected(lua_State *L)
{
    // int item
    int item = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call IsSelected
    bool returns = (self->IsSelected(item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_OnSize[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_wxSizeEvent, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_OnSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_OnSize[1] = {{ wxLua_wxSymbolListCtrl_OnSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_OnSize }};
//     void OnSize(wxSizeEvent& event);
static int LUACALL wxLua_wxSymbolListCtrl_OnSize(lua_State *L)
{
    // wxSizeEvent event
    wxSizeEvent * event = (wxSizeEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSizeEvent);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call OnSize
    self->OnSize(*event);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetCellSize[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_SetCellSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetCellSize[1] = {{ wxLua_wxSymbolListCtrl_SetCellSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetCellSize }};
//     void SetCellSize(const wxSize& sz);
static int LUACALL wxLua_wxSymbolListCtrl_SetCellSize(lua_State *L)
{
    // const wxSize sz
    const wxSize * sz = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call SetCellSize
    self->SetCellSize(*sz);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetFont[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetFont[1] = {{ wxLua_wxSymbolListCtrl_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetFont }};
//     virtual bool SetFont(const wxFont& font);
static int LUACALL wxLua_wxSymbolListCtrl_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call SetFont
    bool returns = (self->SetFont(*font));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetMargins1[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_SetMargins1(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetMargins1[1] = {{ wxLua_wxSymbolListCtrl_SetMargins1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetMargins1 }};
//     void SetMargins(wxCoord x, wxCoord y);
static int LUACALL wxLua_wxSymbolListCtrl_SetMargins1(lua_State *L)
{
    // wxCoord y
    wxCoord y = (wxCoord)wxlua_getnumbertype(L, 3);
    // wxCoord x
    wxCoord x = (wxCoord)wxlua_getnumbertype(L, 2);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call SetMargins
    self->SetMargins(x, y);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetMargins[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_SetMargins(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetMargins[1] = {{ wxLua_wxSymbolListCtrl_SetMargins, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetMargins }};
//     void SetMargins(const wxPoint& pt);
static int LUACALL wxLua_wxSymbolListCtrl_SetMargins(lua_State *L)
{
    // const wxPoint pt
    const wxPoint * pt = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call SetMargins
    self->SetMargins(*pt);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetSelection[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetSelection[1] = {{ wxLua_wxSymbolListCtrl_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetSelection }};
//     void SetSelection(int selection);
static int LUACALL wxLua_wxSymbolListCtrl_SetSelection(lua_State *L)
{
    // int selection
    int selection = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call SetSelection
    self->SetSelection(selection);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetSelectionBackground[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_SetSelectionBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetSelectionBackground[1] = {{ wxLua_wxSymbolListCtrl_SetSelectionBackground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetSelectionBackground }};
//     void SetSelectionBackground(const wxColour& col);
static int LUACALL wxLua_wxSymbolListCtrl_SetSelectionBackground(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call SetSelectionBackground
    self->SetSelectionBackground(*col);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetUnicodeMode[] = { &wxluatype_wxSymbolListCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_SetUnicodeMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetUnicodeMode[1] = {{ wxLua_wxSymbolListCtrl_SetUnicodeMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetUnicodeMode }};
//     void SetUnicodeMode(bool unicodeMode);
static int LUACALL wxLua_wxSymbolListCtrl_SetUnicodeMode(lua_State *L)
{
    // bool unicodeMode
    bool unicodeMode = wxlua_getbooleantype(L, 2);
    // get this
    wxSymbolListCtrl * self = (wxSymbolListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSymbolListCtrl);
    // call SetUnicodeMode
    self->SetUnicodeMode(unicodeMode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_delete[] = { &wxluatype_wxSymbolListCtrl, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSymbolListCtrl_delete }};


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSymbolListCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSymbolListCtrl_constructor1(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_constructor1[1] = {{ wxLua_wxSymbolListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSymbolListCtrl_constructor1 }};
//                const wxString& name = wxPanelNameStr);
static int LUACALL wxLua_wxSymbolListCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxPanelNameStr
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxPanelNameStr));
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = wxID_ANY
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : wxID_ANY);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSymbolListCtrl* returns = new wxSymbolListCtrl(parent, id, *pos, *size, style, name);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSymbolListCtrl);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSymbolListCtrl);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static int LUACALL wxLua_wxSymbolListCtrl_constructor(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_constructor[1] = {{ wxLua_wxSymbolListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSymbolListCtrl();
static int LUACALL wxLua_wxSymbolListCtrl_constructor(lua_State *L)
{
    // call constructor
    wxSymbolListCtrl* returns = new wxSymbolListCtrl();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSymbolListCtrl);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSymbolListCtrl);

    return 1;
}




#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_SetMargins_overload[] =
{
    { wxLua_wxSymbolListCtrl_SetMargins1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetMargins1 },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxSymbolListCtrl_SetMargins, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSymbolListCtrl_SetMargins },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxSymbolListCtrl_SetMargins_overload_count = sizeof(s_wxluafunc_wxLua_wxSymbolListCtrl_SetMargins_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSymbolListCtrl_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxSymbolListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSymbolListCtrl_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxSymbolListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSymbolListCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSymbolListCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

void wxLua_wxSymbolListCtrl_delete_function(void** p)
{
    wxSymbolListCtrl* o = (wxSymbolListCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSymbolListCtrl_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "EnsureVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_EnsureVisible, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetCellSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_GetCellSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetClassDefaultAttributes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSymbolListCtrl_GetClassDefaultAttributes, 1, NULL },
    { "GetDefaultAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_GetDefaultAttributes, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_GetMargins, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "GetMaxSymbolValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_GetMaxSymbolValue, 1, NULL },
    { "GetMinSymbolValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_GetMinSymbolValue, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "GetSelectionBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_GetSelectionBackground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "IsCurrentItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_IsCurrentItem, 1, NULL },
    { "IsSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_IsSelected, 1, NULL },
    { "OnSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_OnSize, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetCellSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_SetCellSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_SetMargins_overload, s_wxluafunc_wxLua_wxSymbolListCtrl_SetMargins_overload_count, 0 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)||((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_SetSelection, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "SetSelectionBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_SetSelectionBackground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "SetUnicodeMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSymbolListCtrl_SetUnicodeMode, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSymbolListCtrl_delete, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "wxSymbolListCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSymbolListCtrl_constructor_overload, s_wxluafunc_wxLua_wxSymbolListCtrl_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { 0, 0, 0, 0 },
};

int wxSymbolListCtrl_methodCount = sizeof(wxSymbolListCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxrichtext_xml.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------



#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)
// ---------------------------------------------------------------------------
// Bind class wxRichTextXMLHelper
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextXMLHelper'
int wxluatype_wxRichTextXMLHelper = WXLUA_TUNKNOWN;

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute17[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute17(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute17[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute17, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute17 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& rootName, const wxTextAttrBorders& borders);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute17(lua_State *L)
{
    // const wxTextAttrBorders borders
    const wxTextAttrBorders * borders = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorders);
    // const wxString rootName
    const wxString rootName = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, rootName, *borders);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute16[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute16(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute16[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute16, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute16 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& rootName, const wxTextAttrBorder& border);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute16(lua_State *L)
{
    // const wxTextAttrBorder border
    const wxTextAttrBorder * border = (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorder);
    // const wxString rootName
    const wxString rootName = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, rootName, *border);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute15[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute15(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute15[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute15, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute15 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& rootName, const wxTextAttrDimensions& dims);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute15(lua_State *L)
{
    // const wxTextAttrDimensions dims
    const wxTextAttrDimensions * dims = (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimensions);
    // const wxString rootName
    const wxString rootName = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, rootName, *dims);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute14[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute14(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute14[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute14, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute14 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& name, const wxTextAttrDimension& dim);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute14(lua_State *L)
{
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimension);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, name, *dim);

    return 0;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute13[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute13(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute13[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute13, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute13 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& name, const wxColour& col);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute13(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, name, *col);

    return 0;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute12[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute12(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute12[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute12, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute12 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& name, const wxString& s);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute12(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, name, s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute11[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute11(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute11[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute11, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute11 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& name, const double& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute11(lua_State *L)
{
    // const double v
    const double * v = (const double *)wxlua_touserdata(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, name, *v);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute10[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute10(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute10[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute10, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute10 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& name, const long& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute10(lua_State *L)
{
    // const long v
    const long * v = (const long *)wxlua_touserdata(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, name, *v);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute9[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute9(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute9[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute9, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute9 }};
//     static void AddAttribute(wxXmlNode* node, const wxString& name, const int& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute9(lua_State *L)
{
    // const int v
    const int * v = (const int *)wxlua_touserdata(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(node, name, *v);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute8[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxTextAttrBorders, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute8(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute8[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute8, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute8 }};
//     static void AddAttribute(wxString& str, const wxString& rootName, const wxTextAttrBorders& borders);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute8(lua_State *L)
{
    // const wxTextAttrBorders borders
    const wxTextAttrBorders * borders = (const wxTextAttrBorders *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorders);
    // const wxString rootName
    const wxString rootName = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, rootName, *borders);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute7[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxTextAttrBorder, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute7(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute7[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute7, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute7 }};
//     static void AddAttribute(wxString& str, const wxString& rootName, const wxTextAttrBorder& border);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute7(lua_State *L)
{
    // const wxTextAttrBorder border
    const wxTextAttrBorder * border = (const wxTextAttrBorder *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrBorder);
    // const wxString rootName
    const wxString rootName = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, rootName, *border);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute6[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxTextAttrDimensions, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute6(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute6[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute6, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute6 }};
//     static void AddAttribute(wxString& str, const wxString& rootName, const wxTextAttrDimensions& dims);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute6(lua_State *L)
{
    // const wxTextAttrDimensions dims
    const wxTextAttrDimensions * dims = (const wxTextAttrDimensions *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimensions);
    // const wxString rootName
    const wxString rootName = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, rootName, *dims);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute5[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxTextAttrDimension, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute5(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute5[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute5, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute5 }};
//     static void AddAttribute(wxString& str, const wxString& name, const wxTextAttrDimension& dim);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute5(lua_State *L)
{
    // const wxTextAttrDimension dim
    const wxTextAttrDimension * dim = (const wxTextAttrDimension *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttrDimension);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, name, *dim);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute4[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute4[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute4, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute4 }};
//     static void AddAttribute(wxString& str, const wxString& name, const wxColour& col);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute4(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, name, *col);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute3[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute3[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute3 }};
//     static void AddAttribute(wxString& str, const wxString& name, const wxString& s);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute3(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, name, s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute2[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute2[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute2 }};
//     static void AddAttribute(wxString& str, const wxString& name, const double& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute2(lua_State *L)
{
    // const double v
    const double * v = (const double *)wxlua_touserdata(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, name, *v);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute1[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute1[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute1 }};
//     static void AddAttribute(wxString& str, const wxString& name, const long& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute1(lua_State *L)
{
    // const long v
    const long * v = (const long *)wxlua_touserdata(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, name, *v);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute[1] = {{ wxLua_wxRichTextXMLHelper_AddAttribute, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute }};
//     static void AddAttribute(wxString& str, const wxString& name, const int& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttribute(lua_State *L)
{
    // const int v
    const int * v = (const int *)wxlua_touserdata(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddAttribute
    wxRichTextXMLHelper::AddAttribute(str, name, *v);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttributes1[] = { &wxluatype_wxXmlNode, &wxluatype_wxRichTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttributes1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttributes1[1] = {{ wxLua_wxRichTextXMLHelper_AddAttributes1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttributes1 }};
//     static bool AddAttributes(wxXmlNode* node, wxRichTextAttr& attr, bool isPara = false);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttributes1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isPara = false
    bool isPara = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call AddAttributes
    bool returns = (wxRichTextXMLHelper::AddAttributes(node, *attr, isPara));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttributes[] = { &wxluatype_wxRichTextAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttributes(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttributes[1] = {{ wxLua_wxRichTextXMLHelper_AddAttributes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttributes }};
//     static wxString AddAttributes(const wxRichTextAttr& attr, bool isPara = false);
static int LUACALL wxLua_wxRichTextXMLHelper_AddAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isPara = false
    bool isPara = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // const wxRichTextAttr attr
    const wxRichTextAttr * attr = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call AddAttributes
    wxString returns = (wxRichTextXMLHelper::AddAttributes(*attr, isPara));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString4[] = { &wxluatype_TSTRING, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddString4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString4[1] = {{ wxLua_wxRichTextXMLHelper_AddString4, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString4 }};
//     static void AddString(wxString& str, const wxColour& col);
static int LUACALL wxLua_wxRichTextXMLHelper_AddString4(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddString
    wxRichTextXMLHelper::AddString(str, *col);

    return 0;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString3[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddString3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString3[1] = {{ wxLua_wxRichTextXMLHelper_AddString3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString3 }};
//     static void AddString(wxString& str, const wxString& s);
static int LUACALL wxLua_wxRichTextXMLHelper_AddString3(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddString
    wxRichTextXMLHelper::AddString(str, s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString2[] = { &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddString2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString2[1] = {{ wxLua_wxRichTextXMLHelper_AddString2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString2 }};
//     static void AddString(wxString& str, const double& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddString2(lua_State *L)
{
    // const double v
    const double * v = (const double *)wxlua_touserdata(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddString
    wxRichTextXMLHelper::AddString(str, *v);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString1[] = { &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddString1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString1[1] = {{ wxLua_wxRichTextXMLHelper_AddString1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString1 }};
//     static void AddString(wxString& str, const long& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddString1(lua_State *L)
{
    // const long v
    const long * v = (const long *)wxlua_touserdata(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddString
    wxRichTextXMLHelper::AddString(str, *v);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString[] = { &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AddString(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString[1] = {{ wxLua_wxRichTextXMLHelper_AddString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString }};
//     static void AddString(wxString& str, const int& v);
static int LUACALL wxLua_wxRichTextXMLHelper_AddString(lua_State *L)
{
    // const int v
    const int * v = (const int *)wxlua_touserdata(L, 2);
    // wxString str
    wxString str = wxlua_getwxStringtype(L, 1);
    // call AddString
    wxRichTextXMLHelper::AddString(str, *v);

    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AttributeToXML[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_AttributeToXML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AttributeToXML[1] = {{ wxLua_wxRichTextXMLHelper_AttributeToXML, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AttributeToXML }};
//     static wxString AttributeToXML(const wxString& str);
static int LUACALL wxLua_wxRichTextXMLHelper_AttributeToXML(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 1);
    // call AttributeToXML
    wxString returns = (wxRichTextXMLHelper::AttributeToXML(str));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Clear[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Clear[1] = {{ wxLua_wxRichTextXMLHelper_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Clear }};
//     void Clear();
static int LUACALL wxLua_wxRichTextXMLHelper_Clear(lua_State *L)
{
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ColourStringToLong[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ColourStringToLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ColourStringToLong[1] = {{ wxLua_wxRichTextXMLHelper_ColourStringToLong, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ColourStringToLong }};
//     static long ColourStringToLong(const wxString& colStr);
static int LUACALL wxLua_wxRichTextXMLHelper_ColourStringToLong(lua_State *L)
{
    // const wxString colStr
    const wxString colStr = wxlua_getwxStringtype(L, 1);
    // call ColourStringToLong
    long returns = (wxRichTextXMLHelper::ColourStringToLong(colStr));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ColourToHexString[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ColourToHexString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ColourToHexString[1] = {{ wxLua_wxRichTextXMLHelper_ColourToHexString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ColourToHexString }};
//     static wxString ColourToHexString(const wxColour& col);
static int LUACALL wxLua_wxRichTextXMLHelper_ColourToHexString(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call ColourToHexString
    wxString returns = (wxRichTextXMLHelper::ColourToHexString(*col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ExportStyleDefinition1[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxXmlNode, &wxluatype_wxRichTextStyleDefinition, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ExportStyleDefinition1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ExportStyleDefinition1[1] = {{ wxLua_wxRichTextXMLHelper_ExportStyleDefinition1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ExportStyleDefinition1 }};
//     virtual bool ExportStyleDefinition(wxXmlNode* parent, wxRichTextStyleDefinition* def);
static int LUACALL wxLua_wxRichTextXMLHelper_ExportStyleDefinition1(lua_State *L)
{
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleDefinition);
    // wxXmlNode parent
    wxXmlNode * parent = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call ExportStyleDefinition
    bool returns = (self->ExportStyleDefinition(parent, def));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ExportStyleDefinition[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxOutputStream, &wxluatype_wxRichTextStyleDefinition, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ExportStyleDefinition(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ExportStyleDefinition[1] = {{ wxLua_wxRichTextXMLHelper_ExportStyleDefinition, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ExportStyleDefinition }};
//     virtual bool ExportStyleDefinition(wxOutputStream& stream, wxRichTextStyleDefinition* def, int level);
static int LUACALL wxLua_wxRichTextXMLHelper_ExportStyleDefinition(lua_State *L)
{
    // int level
    int level = (int)wxlua_getnumbertype(L, 4);
    // wxRichTextStyleDefinition def
    wxRichTextStyleDefinition * def = (wxRichTextStyleDefinition *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextStyleDefinition);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call ExportStyleDefinition
    bool returns = (self->ExportStyleDefinition(*stream, def, level));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_FindNode[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_FindNode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_FindNode[1] = {{ wxLua_wxRichTextXMLHelper_FindNode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_FindNode }};
//     static wxXmlNode* FindNode(wxXmlNode* node, const wxString& name);
static int LUACALL wxLua_wxRichTextXMLHelper_FindNode(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call FindNode
    wxXmlNode* returns = (wxXmlNode*)wxRichTextXMLHelper::FindNode(node, name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxXmlNode);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetFileEncoding[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_GetFileEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_GetFileEncoding[1] = {{ wxLua_wxRichTextXMLHelper_GetFileEncoding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetFileEncoding }};
//     const wxString& GetFileEncoding() const;
static int LUACALL wxLua_wxRichTextXMLHelper_GetFileEncoding(lua_State *L)
{
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call GetFileEncoding
    wxString returns = (self->GetFileEncoding());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetFlags[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_GetFlags[1] = {{ wxLua_wxRichTextXMLHelper_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxRichTextXMLHelper_GetFlags(lua_State *L)
{
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetNodeContent[] = { &wxluatype_wxXmlNode, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_GetNodeContent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_GetNodeContent[1] = {{ wxLua_wxRichTextXMLHelper_GetNodeContent, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetNodeContent }};
//     static wxString GetNodeContent(wxXmlNode *node);
static int LUACALL wxLua_wxRichTextXMLHelper_GetNodeContent(lua_State *L)
{
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call GetNodeContent
    wxString returns = (wxRichTextXMLHelper::GetNodeContent(node));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetParamNode[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_GetParamNode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_GetParamNode[1] = {{ wxLua_wxRichTextXMLHelper_GetParamNode, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetParamNode }};
//     static wxXmlNode *GetParamNode(wxXmlNode* node, const wxString& param);
static int LUACALL wxLua_wxRichTextXMLHelper_GetParamNode(lua_State *L)
{
    // const wxString param
    const wxString param = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call GetParamNode
    wxXmlNode* returns = (wxXmlNode*)wxRichTextXMLHelper::GetParamNode(node, param);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxXmlNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetParamValue[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_GetParamValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_GetParamValue[1] = {{ wxLua_wxRichTextXMLHelper_GetParamValue, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetParamValue }};
//     static wxString GetParamValue(wxXmlNode *node, const wxString& param);
static int LUACALL wxLua_wxRichTextXMLHelper_GetParamValue(lua_State *L)
{
    // const wxString param
    const wxString param = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call GetParamValue
    wxString returns = (wxRichTextXMLHelper::GetParamValue(node, param));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetText[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_GetText[1] = {{ wxLua_wxRichTextXMLHelper_GetText, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_GetText }};
//     static wxString GetText(wxXmlNode *node, const wxString& param = wxEmptyString);
static int LUACALL wxLua_wxRichTextXMLHelper_GetText(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString param = wxEmptyString
    const wxString param = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxEmptyString));
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call GetText
    wxString returns = (wxRichTextXMLHelper::GetText(node, param));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile[1] = {{ wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile }};
//     bool        m_deleteConvFile;
static int LUACALL wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile(lua_State *L)
{
    // get this
    wxRichTextXMLHelper *self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // push the result flag
    lua_pushboolean(L, self->m_deleteConvFile);
    // return the number of values
    return 1;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Get_m_fileEncoding[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Get_m_fileEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_fileEncoding[1] = {{ wxLua_wxRichTextXMLHelper_Get_m_fileEncoding, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Get_m_fileEncoding }};
//     wxString    m_fileEncoding;
static int LUACALL wxLua_wxRichTextXMLHelper_Get_m_fileEncoding(lua_State *L)
{
    // get this
    wxRichTextXMLHelper *self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // push the result string
    wxlua_pushwxString(L, self->m_fileEncoding);
    // return the number of values
    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Get_m_flags[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Get_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_flags[1] = {{ wxLua_wxRichTextXMLHelper_Get_m_flags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Get_m_flags }};
//     int         m_flags;
static int LUACALL wxLua_wxRichTextXMLHelper_Get_m_flags(lua_State *L)
{
    // get this
    wxRichTextXMLHelper *self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // push the result integer? number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)(self->m_flags) == (double)(self->m_flags)) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, self->m_flags);
} else
#endif
{
    lua_pushnumber(L, self->m_flags);
}
    // return the number of values
    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_HasParam[] = { &wxluatype_wxXmlNode, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_HasParam(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_HasParam[1] = {{ wxLua_wxRichTextXMLHelper_HasParam, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_HasParam }};
//     static bool HasParam(wxXmlNode* node, const wxString& param);
static int LUACALL wxLua_wxRichTextXMLHelper_HasParam(lua_State *L)
{
    // const wxString param
    const wxString param = wxlua_getwxStringtype(L, 2);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxXmlNode);
    // call HasParam
    bool returns = (wxRichTextXMLHelper::HasParam(node, param));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_HexStringToColour[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_HexStringToColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_HexStringToColour[1] = {{ wxLua_wxRichTextXMLHelper_HexStringToColour, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_HexStringToColour }};
//     static wxColour HexStringToColour(const wxString& hex);
static int LUACALL wxLua_wxRichTextXMLHelper_HexStringToColour(lua_State *L)
{
    // const wxString hex
    const wxString hex = wxlua_getwxStringtype(L, 1);
    // call HexStringToColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(wxRichTextXMLHelper::HexStringToColour(hex));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ImportProperties[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxRichTextProperties, &wxluatype_wxXmlNode, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ImportProperties(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ImportProperties[1] = {{ wxLua_wxRichTextXMLHelper_ImportProperties, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ImportProperties }};
//     virtual bool ImportProperties(wxRichTextProperties& properties, wxXmlNode* node);
static int LUACALL wxLua_wxRichTextXMLHelper_ImportProperties(lua_State *L)
{
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextProperties properties
    wxRichTextProperties * properties = (wxRichTextProperties *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextProperties);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call ImportProperties
    bool returns = (self->ImportProperties(*properties, node));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ImportStyle[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxRichTextAttr, &wxluatype_wxXmlNode, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ImportStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ImportStyle[1] = {{ wxLua_wxRichTextXMLHelper_ImportStyle, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ImportStyle }};
//     virtual bool ImportStyle(wxRichTextAttr& attr, wxXmlNode* node, bool isPara = false);
static int LUACALL wxLua_wxRichTextXMLHelper_ImportStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isPara = false
    bool isPara = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : false);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextAttr attr
    wxRichTextAttr * attr = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call ImportStyle
    bool returns = (self->ImportStyle(*attr, node, isPara));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ImportStyleDefinition[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxRichTextStyleSheet, &wxluatype_wxXmlNode, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ImportStyleDefinition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ImportStyleDefinition[1] = {{ wxLua_wxRichTextXMLHelper_ImportStyleDefinition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ImportStyleDefinition }};
//     virtual bool ImportStyleDefinition(wxRichTextStyleSheet* sheet, wxXmlNode* node);
static int LUACALL wxLua_wxRichTextXMLHelper_ImportStyleDefinition(lua_State *L)
{
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 3, wxluatype_wxXmlNode);
    // wxRichTextStyleSheet sheet
    wxRichTextStyleSheet * sheet = (wxRichTextStyleSheet *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextStyleSheet);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call ImportStyleDefinition
    bool returns = (self->ImportStyleDefinition(sheet, node));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Init[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Init[1] = {{ wxLua_wxRichTextXMLHelper_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextXMLHelper_Init(lua_State *L)
{
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call Init
    self->Init();

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakePropertyFromString[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_MakePropertyFromString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakePropertyFromString[1] = {{ wxLua_wxRichTextXMLHelper_MakePropertyFromString, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakePropertyFromString }};
//     virtual wxVariant MakePropertyFromString(const wxString& name, const wxString& value, const wxString& type);
static int LUACALL wxLua_wxRichTextXMLHelper_MakePropertyFromString(lua_State *L)
{
    // const wxString type
    const wxString type = wxlua_getwxStringtype(L, 4);
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call MakePropertyFromString
    // allocate a new object using the copy constructor
    wxVariant* returns = new wxVariant(self->MakePropertyFromString(name, value, type));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVariant);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVariant);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString4[] = { &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString4(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString4[1] = {{ wxLua_wxRichTextXMLHelper_MakeString4, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString4 }};
//     static wxString MakeString(const wxColour& col);
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString4(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call MakeString
    wxString returns = (wxRichTextXMLHelper::MakeString(*col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString3[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString3(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString3[1] = {{ wxLua_wxRichTextXMLHelper_MakeString3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString3 }};
//     static wxString MakeString(const wxString& s);
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString3(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 1);
    // call MakeString
    wxString returns = (wxRichTextXMLHelper::MakeString(s));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString2[] = { &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString2(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString2[1] = {{ wxLua_wxRichTextXMLHelper_MakeString2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString2 }};
//     static wxString MakeString(const double& v);
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString2(lua_State *L)
{
    // const double v
    const double * v = (const double *)wxlua_touserdata(L, 1);
    // call MakeString
    wxString returns = (wxRichTextXMLHelper::MakeString(*v));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString1[] = { &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString1[1] = {{ wxLua_wxRichTextXMLHelper_MakeString1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString1 }};
//     static wxString MakeString(const long& v);
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString1(lua_State *L)
{
    // const long v
    const long * v = (const long *)wxlua_touserdata(L, 1);
    // call MakeString
    wxString returns = (wxRichTextXMLHelper::MakeString(*v));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString[] = { &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString[1] = {{ wxLua_wxRichTextXMLHelper_MakeString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString }};
//     static wxString MakeString(const int& v);
static int LUACALL wxLua_wxRichTextXMLHelper_MakeString(lua_State *L)
{
    // const int v
    const int * v = (const int *)wxlua_touserdata(L, 1);
    // call MakeString
    wxString returns = (wxRichTextXMLHelper::MakeString(*v));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeStringFromProperty[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxVariant, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_MakeStringFromProperty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeStringFromProperty[1] = {{ wxLua_wxRichTextXMLHelper_MakeStringFromProperty, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeStringFromProperty }};
//     virtual wxString MakeStringFromProperty(const wxVariant& var);
static int LUACALL wxLua_wxRichTextXMLHelper_MakeStringFromProperty(lua_State *L)
{
    // const wxVariant var
    const wxVariant * var = (const wxVariant *)wxluaT_getuserdatatype(L, 2, wxluatype_wxVariant);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call MakeStringFromProperty
    wxString returns = (self->MakeStringFromProperty(*var));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputIndentation[] = { &wxluatype_wxOutputStream, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_OutputIndentation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputIndentation[1] = {{ wxLua_wxRichTextXMLHelper_OutputIndentation, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputIndentation }};
//     static void OutputIndentation(wxOutputStream& stream, int indent);
static int LUACALL wxLua_wxRichTextXMLHelper_OutputIndentation(lua_State *L)
{
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call OutputIndentation
    wxRichTextXMLHelper::OutputIndentation(*stream, indent);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputString1[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxOutputStream, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_OutputString1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputString1[1] = {{ wxLua_wxRichTextXMLHelper_OutputString1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputString1 }};
//     void OutputString(wxOutputStream& stream, const wxString& str);
static int LUACALL wxLua_wxRichTextXMLHelper_OutputString1(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 3);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call OutputString
    self->OutputString(*stream, str);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputString[] = { &wxluatype_wxOutputStream, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_OutputString(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputString[1] = {{ wxLua_wxRichTextXMLHelper_OutputString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputString }};
// %override wxLua_wxRichTextXMLHelper_OutputString
//     static void OutputString(wxOutputStream& stream, const wxString& str); // , wxMBConv *convMem, wxMBConv *convFile);
static int LUACALL wxLua_wxRichTextXMLHelper_OutputString(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call OutputString
    wxRichTextXMLHelper::OutputString(*stream, str, &wxConvUTF8, &wxConvUTF8);  //  Explicitly designate UTF-8

    return 0;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputStringEnt1[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxOutputStream, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_OutputStringEnt1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputStringEnt1[1] = {{ wxLua_wxRichTextXMLHelper_OutputStringEnt1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputStringEnt1 }};
//     void OutputStringEnt(wxOutputStream& stream, const wxString& str);
static int LUACALL wxLua_wxRichTextXMLHelper_OutputStringEnt1(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 3);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call OutputStringEnt
    self->OutputStringEnt(*stream, str);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputStringEnt[] = { &wxluatype_wxOutputStream, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_OutputStringEnt(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputStringEnt[1] = {{ wxLua_wxRichTextXMLHelper_OutputStringEnt, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputStringEnt }};
// %override wxLua_wxRichTextXMLHelper_OutputStringEnt
//     static void OutputStringEnt(wxOutputStream& stream, const wxString& str); // , wxMBConv *convMem, wxMBConv *convFile);
static int LUACALL wxLua_wxRichTextXMLHelper_OutputStringEnt(lua_State *L)
{
    // const wxString str
    const wxString str = wxlua_getwxStringtype(L, 2);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 1, wxluatype_wxOutputStream);
    // call OutputStringEnt
    wxRichTextXMLHelper::OutputStringEnt(*stream, str, &wxConvUTF8, &wxConvUTF8);  //  Explicitly designate UTF-8

    return 0;
}


#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ParseDimension[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_ParseDimension(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ParseDimension[1] = {{ wxLua_wxRichTextXMLHelper_ParseDimension, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ParseDimension }};
//     static wxTextAttrDimension ParseDimension(const wxString& dimStr);
static int LUACALL wxLua_wxRichTextXMLHelper_ParseDimension(lua_State *L)
{
    // const wxString dimStr
    const wxString dimStr = wxlua_getwxStringtype(L, 1);
    // call ParseDimension
    // allocate a new object using the copy constructor
    wxTextAttrDimension* returns = new wxTextAttrDimension(wxRichTextXMLHelper::ParseDimension(dimStr));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTextAttrDimension);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTextAttrDimension);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_RichTextFixFaceName[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_RichTextFixFaceName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_RichTextFixFaceName[1] = {{ wxLua_wxRichTextXMLHelper_RichTextFixFaceName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_RichTextFixFaceName }};
//     static bool RichTextFixFaceName(wxString& facename);
static int LUACALL wxLua_wxRichTextXMLHelper_RichTextFixFaceName(lua_State *L)
{
    // wxString facename
    wxString facename = wxlua_getwxStringtype(L, 1);
    // call RichTextFixFaceName
    bool returns = (wxRichTextXMLHelper::RichTextFixFaceName(facename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_SetFileEncoding[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_SetFileEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_SetFileEncoding[1] = {{ wxLua_wxRichTextXMLHelper_SetFileEncoding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_SetFileEncoding }};
//     void SetFileEncoding(const wxString& encoding);
static int LUACALL wxLua_wxRichTextXMLHelper_SetFileEncoding(lua_State *L)
{
    // const wxString encoding
    const wxString encoding = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call SetFileEncoding
    self->SetFileEncoding(encoding);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_SetFlags[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_SetFlags[1] = {{ wxLua_wxRichTextXMLHelper_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxRichTextXMLHelper_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile[1] = {{ wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile }};
//     bool        m_deleteConvFile;
static int LUACALL wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile(lua_State *L)
{
    // get the boolean value
    bool val = wxlua_getbooleantype(L, 2);
    // get this
    wxRichTextXMLHelper *self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    self->m_deleteConvFile = val;
    // return the number of values
    return 0;
}

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Set_m_fileEncoding[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Set_m_fileEncoding(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_fileEncoding[1] = {{ wxLua_wxRichTextXMLHelper_Set_m_fileEncoding, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Set_m_fileEncoding }};
//     wxString    m_fileEncoding;
static int LUACALL wxLua_wxRichTextXMLHelper_Set_m_fileEncoding(lua_State *L)
{
    // get the string value
    wxString val = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextXMLHelper *self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    self->m_fileEncoding = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Set_m_flags[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_Set_m_flags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_flags[1] = {{ wxLua_wxRichTextXMLHelper_Set_m_flags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_Set_m_flags }};
//     int         m_flags;
static int LUACALL wxLua_wxRichTextXMLHelper_Set_m_flags(lua_State *L)
{
    // get the number value
    int val = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxRichTextXMLHelper *self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    self->m_flags = val;
    // return the number of values
    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_SetupForSaving[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_SetupForSaving(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_SetupForSaving[1] = {{ wxLua_wxRichTextXMLHelper_SetupForSaving, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_SetupForSaving }};
//     void SetupForSaving(const wxString& enc);
static int LUACALL wxLua_wxRichTextXMLHelper_SetupForSaving(lua_State *L)
{
    // const wxString enc
    const wxString enc = wxlua_getwxStringtype(L, 2);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call SetupForSaving
    self->SetupForSaving(enc);

    return 0;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_WriteProperties1[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxXmlNode, &wxluatype_wxRichTextProperties, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_WriteProperties1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_WriteProperties1[1] = {{ wxLua_wxRichTextXMLHelper_WriteProperties1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_WriteProperties1 }};
//     virtual bool WriteProperties(wxXmlNode* node, const wxRichTextProperties& properties);
static int LUACALL wxLua_wxRichTextXMLHelper_WriteProperties1(lua_State *L)
{
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextProperties);
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call WriteProperties
    bool returns = (self->WriteProperties(node, *properties));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_WriteProperties[] = { &wxluatype_wxRichTextXMLHelper, &wxluatype_wxOutputStream, &wxluatype_wxRichTextProperties, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_WriteProperties(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_WriteProperties[1] = {{ wxLua_wxRichTextXMLHelper_WriteProperties, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_WriteProperties }};
//     virtual bool WriteProperties(wxOutputStream& stream, const wxRichTextProperties& properties, int level);
static int LUACALL wxLua_wxRichTextXMLHelper_WriteProperties(lua_State *L)
{
    // int level
    int level = (int)wxlua_getnumbertype(L, 4);
    // const wxRichTextProperties properties
    const wxRichTextProperties * properties = (const wxRichTextProperties *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextProperties);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextXMLHelper * self = (wxRichTextXMLHelper *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHelper);
    // call WriteProperties
    bool returns = (self->WriteProperties(*stream, *properties, level));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_delete[] = { &wxluatype_wxRichTextXMLHelper, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_delete }};


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHelper_constructor1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHelper_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_constructor1[1] = {{ wxLua_wxRichTextXMLHelper_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_constructor1 }};
//     wxRichTextXMLHelper(const wxString& enc);
static int LUACALL wxLua_wxRichTextXMLHelper_constructor1(lua_State *L)
{
    // const wxString enc
    const wxString enc = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextXMLHelper* returns = new wxRichTextXMLHelper(enc);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextXMLHelper);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextXMLHelper);

    return 1;
}

static int LUACALL wxLua_wxRichTextXMLHelper_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_constructor[1] = {{ wxLua_wxRichTextXMLHelper_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxRichTextXMLHelper();
static int LUACALL wxLua_wxRichTextXMLHelper_constructor(lua_State *L)
{
    // call constructor
    wxRichTextXMLHelper* returns = new wxRichTextXMLHelper();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextXMLHelper);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextXMLHelper);

    return 1;
}




#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute17, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute17 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute16, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute16 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute15, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute15 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute14, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute14 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute13, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute13 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute12, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute12 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute11, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute11 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute10, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute10 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute9, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute9 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextXMLHelper_AddAttribute8, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute8 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextXMLHelper_AddAttribute7, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute7 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextXMLHelper_AddAttribute6, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute6 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextXMLHelper_AddAttribute5, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute5 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxRichTextXMLHelper_AddAttribute4, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute4 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute3 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute2 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute1 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttribute, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttribute },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttributes_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddAttributes1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttributes1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { wxLua_wxRichTextXMLHelper_AddAttributes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddAttributes },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttributes_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttributes_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxRichTextXMLHelper_AddString4, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString4 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddString3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString3 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddString2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString2 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddString1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString1 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_AddString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_AddString },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_ExportStyleDefinition_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_ExportStyleDefinition1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ExportStyleDefinition1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextXMLHelper_ExportStyleDefinition, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_ExportStyleDefinition },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_ExportStyleDefinition_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_ExportStyleDefinition_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxRichTextXMLHelper_MakeString4, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString4 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxRichTextXMLHelper_MakeString3, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString3 },
    { wxLua_wxRichTextXMLHelper_MakeString2, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString2 },
    { wxLua_wxRichTextXMLHelper_MakeString1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString1 },
    { wxLua_wxRichTextXMLHelper_MakeString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_MakeString },
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputString_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextXMLHelper_OutputString1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputString1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextXMLHelper_OutputString, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputString },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputString_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputString_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputStringEnt_overload[] =
{

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextXMLHelper_OutputStringEnt1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputStringEnt1 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextXMLHelper_OutputStringEnt, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_OutputStringEnt },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputStringEnt_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputStringEnt_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS))

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_WriteProperties_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHelper_WriteProperties1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_WriteProperties1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextXMLHelper_WriteProperties, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_WriteProperties },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_WriteProperties_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_WriteProperties_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHelper_constructor_overload[] =
{
    { wxLua_wxRichTextXMLHelper_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHelper_constructor1 },
    { wxLua_wxRichTextXMLHelper_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxRichTextXMLHelper_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHelper_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))

void wxLua_wxRichTextXMLHelper_delete_function(void** p)
{
    wxRichTextXMLHelper* o = (wxRichTextXMLHelper*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextXMLHelper_methods[] = {
#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))
    { "AddAttribute", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttribute_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))
    { "AddAttributes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttributes_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_AddAttributes_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||(((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT))

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))
    { "AddString", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_AddString_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML))

    { "AttributeToXML", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_AttributeToXML, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Clear, 1, NULL },
    { "ColourStringToLong", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_ColourStringToLong, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
    { "ColourToHexString", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_ColourToHexString, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
    { "ExportStyleDefinition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_ExportStyleDefinition_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_ExportStyleDefinition_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "FindNode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_FindNode, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

    { "GetFileEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_GetFileEncoding, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_GetFlags, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "GetNodeContent", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_GetNodeContent, 1, NULL },
    { "GetParamNode", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_GetParamNode, 1, NULL },
    { "GetParamValue", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_GetParamValue, 1, NULL },
    { "GetText", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_GetText, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    // %member    { "Get_m_deleteConvFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

    // %member    { "Get_m_fileEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_fileEncoding, 1, NULL },
    // %member    { "Get_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_flags, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "HasParam", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_HasParam, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)
    { "HexStringToColour", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_HexStringToColour, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "ImportProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_ImportProperties, 1, NULL },
    { "ImportStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_ImportStyle, 1, NULL },
    { "ImportStyleDefinition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_ImportStyleDefinition, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Init, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)
    { "MakePropertyFromString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_MakePropertyFromString, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))
    { "MakeString", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeString_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxColourPenBrush))||((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)
    { "MakeStringFromProperty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_MakeStringFromProperty, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxUSE_VARIANT)

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)
    { "OutputIndentation", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputIndentation, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS))
    { "OutputString", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputString_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputString_overload_count, 0 },
    { "OutputStringEnt", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputStringEnt_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_OutputStringEnt_overload_count, 0 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxUSE_STREAMS))

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "ParseDimension", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_ParseDimension, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

    { "RichTextFixFaceName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHelper_RichTextFixFaceName, 1, NULL },
    { "SetFileEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_SetFileEncoding, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_SetFlags, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    // %member    { "Set_m_deleteConvFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

    // %member    { "Set_m_fileEncoding", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_fileEncoding, 1, NULL },
    // %member    { "Set_m_flags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_flags, 1, NULL },
    { "SetupForSaving", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_SetupForSaving, 1, NULL },

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
    { "WriteProperties", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHelper_WriteProperties_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_WriteProperties_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextXMLHelper_delete, 1, NULL },

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)
    { "m_deleteConvFile", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_deleteConvFile, 1, NULL },
    { "m_deleteConvFile", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_deleteConvFile, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_XML)

    { "m_fileEncoding", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_fileEncoding, 1, NULL },
    { "m_fileEncoding", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_fileEncoding, 1, NULL },
    { "m_flags", WXLUAMETHOD_SETPROP, s_wxluafunc_wxLua_wxRichTextXMLHelper_Set_m_flags, 1, NULL },
    { "m_flags", WXLUAMETHOD_GETPROP, s_wxluafunc_wxLua_wxRichTextXMLHelper_Get_m_flags, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))
    { "wxRichTextXMLHelper", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextXMLHelper_constructor_overload, s_wxluafunc_wxLua_wxRichTextXMLHelper_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML))

    { 0, 0, 0, 0 },
};

int wxRichTextXMLHelper_methodCount = sizeof(wxRichTextXMLHelper_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)


#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)
// ---------------------------------------------------------------------------
// Bind class wxRichTextXMLHandler
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxRichTextXMLHandler'
int wxluatype_wxRichTextXMLHandler = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_CanLoad[] = { &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_CanLoad(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_CanLoad[1] = {{ wxLua_wxRichTextXMLHandler_CanLoad, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_CanLoad }};
//     virtual bool CanLoad() const;
static int LUACALL wxLua_wxRichTextXMLHandler_CanLoad(lua_State *L)
{
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call CanLoad
    bool returns = (self->CanLoad());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_CanSave[] = { &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_CanSave(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_CanSave[1] = {{ wxLua_wxRichTextXMLHandler_CanSave, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_CanSave }};
//     virtual bool CanSave() const;
static int LUACALL wxLua_wxRichTextXMLHandler_CanSave(lua_State *L)
{
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call CanSave
    bool returns = (self->CanSave());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxRichTextXMLHandler_ClearNodeToClassMap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_ClearNodeToClassMap[1] = {{ wxLua_wxRichTextXMLHandler_ClearNodeToClassMap, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void ClearNodeToClassMap();
static int LUACALL wxLua_wxRichTextXMLHandler_ClearNodeToClassMap(lua_State *L)
{
    // call ClearNodeToClassMap
    wxRichTextXMLHandler::ClearNodeToClassMap();

    return 0;
}


#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_CreateObjectForXMLName[] = { &wxluatype_wxRichTextXMLHandler, &wxluatype_wxRichTextObject, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_CreateObjectForXMLName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_CreateObjectForXMLName[1] = {{ wxLua_wxRichTextXMLHandler_CreateObjectForXMLName, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_CreateObjectForXMLName }};
//     virtual wxRichTextObject* CreateObjectForXMLName(wxRichTextObject* parent, const wxString& name) const;
static int LUACALL wxLua_wxRichTextXMLHandler_CreateObjectForXMLName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 3);
    // wxRichTextObject parent
    wxRichTextObject * parent = (wxRichTextObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextObject);
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call CreateObjectForXMLName
    wxRichTextObject* returns = (wxRichTextObject*)self->CreateObjectForXMLName(parent, name);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextObject);

    return 1;
}

#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ExportXML1[] = { &wxluatype_wxRichTextXMLHandler, &wxluatype_wxXmlNode, &wxluatype_wxRichTextObject, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_ExportXML1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_ExportXML1[1] = {{ wxLua_wxRichTextXMLHandler_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ExportXML1 }};
//     bool ExportXML(wxXmlNode* parent, wxRichTextObject& obj);
static int LUACALL wxLua_wxRichTextXMLHandler_ExportXML1(lua_State *L)
{
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxXmlNode parent
    wxXmlNode * parent = (wxXmlNode *)wxluaT_getuserdatatype(L, 2, wxluatype_wxXmlNode);
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call ExportXML
    bool returns = (self->ExportXML(parent, *obj));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ExportXML[] = { &wxluatype_wxRichTextXMLHandler, &wxluatype_wxOutputStream, &wxluatype_wxRichTextObject, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_ExportXML(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_ExportXML[1] = {{ wxLua_wxRichTextXMLHandler_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ExportXML }};
//     bool ExportXML(wxOutputStream& stream, wxRichTextObject& obj, int level);
static int LUACALL wxLua_wxRichTextXMLHandler_ExportXML(lua_State *L)
{
    // int level
    int level = (int)wxlua_getnumbertype(L, 4);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxOutputStream stream
    wxOutputStream * stream = (wxOutputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxOutputStream);
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call ExportXML
    bool returns = (self->ExportXML(*stream, *obj, level));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_GetHelper[] = { &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_GetHelper(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_GetHelper[1] = {{ wxLua_wxRichTextXMLHandler_GetHelper, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_GetHelper }};
//     wxRichTextXMLHelper& GetHelper();
static int LUACALL wxLua_wxRichTextXMLHandler_GetHelper(lua_State *L)
{
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call GetHelper
    wxRichTextXMLHelper* returns = (wxRichTextXMLHelper*)&self->GetHelper();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextXMLHelper);

    return 1;
}


#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ImportXML[] = { &wxluatype_wxRichTextXMLHandler, &wxluatype_wxRichTextBuffer, &wxluatype_wxRichTextObject, &wxluatype_wxXmlNode, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_ImportXML(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_ImportXML[1] = {{ wxLua_wxRichTextXMLHandler_ImportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ImportXML }};
//     bool ImportXML(wxRichTextBuffer* buffer, wxRichTextObject* obj, wxXmlNode* node);
static int LUACALL wxLua_wxRichTextXMLHandler_ImportXML(lua_State *L)
{
    // wxXmlNode node
    wxXmlNode * node = (wxXmlNode *)wxluaT_getuserdatatype(L, 4, wxluatype_wxXmlNode);
    // wxRichTextObject obj
    wxRichTextObject * obj = (wxRichTextObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextObject);
    // wxRichTextBuffer buffer
    wxRichTextBuffer * buffer = (wxRichTextBuffer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextBuffer);
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call ImportXML
    bool returns = (self->ImportXML(buffer, obj, node));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_Init[] = { &wxluatype_wxRichTextXMLHandler, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_Init(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_Init[1] = {{ wxLua_wxRichTextXMLHandler_Init, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_Init }};
//     void Init();
static int LUACALL wxLua_wxRichTextXMLHandler_Init(lua_State *L)
{
    // get this
    wxRichTextXMLHandler * self = (wxRichTextXMLHandler *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextXMLHandler);
    // call Init
    self->Init();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_RegisterNodeName[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_RegisterNodeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_RegisterNodeName[1] = {{ wxLua_wxRichTextXMLHandler_RegisterNodeName, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_RegisterNodeName }};
//     static void RegisterNodeName(const wxString& nodeName, const wxString& className);
static int LUACALL wxLua_wxRichTextXMLHandler_RegisterNodeName(lua_State *L)
{
    // const wxString className
    const wxString className = wxlua_getwxStringtype(L, 2);
    // const wxString nodeName
    const wxString nodeName = wxlua_getwxStringtype(L, 1);
    // call RegisterNodeName
    wxRichTextXMLHandler::RegisterNodeName(nodeName, className);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_delete[] = { &wxluatype_wxRichTextXMLHandler, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxRichTextXMLHandler_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxRichTextXMLHandler_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_constructor[1] = {{ wxLua_wxRichTextXMLHandler_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_constructor }};
//     wxRichTextXMLHandler(const wxString& name, const wxString& ext, int type = wxRICHTEXT_TYPE_XML);
static int LUACALL wxLua_wxRichTextXMLHandler_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int type = wxRICHTEXT_TYPE_XML
    int type = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxRICHTEXT_TYPE_XML);
    // const wxString ext
    const wxString ext = wxlua_getwxStringtype(L, 2);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxRichTextXMLHandler* returns = new wxRichTextXMLHandler(name, ext, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRichTextXMLHandler);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRichTextXMLHandler);

    return 1;
}




#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxRichTextXMLHandler_ExportXML_overload[] =
{

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { wxLua_wxRichTextXMLHandler_ExportXML1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ExportXML1 },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
    { wxLua_wxRichTextXMLHandler_ExportXML, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxRichTextXMLHandler_ExportXML },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS)
};
static int s_wxluafunc_wxLua_wxRichTextXMLHandler_ExportXML_overload_count = sizeof(s_wxluafunc_wxLua_wxRichTextXMLHandler_ExportXML_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

void wxLua_wxRichTextXMLHandler_delete_function(void** p)
{
    wxRichTextXMLHandler* o = (wxRichTextXMLHandler*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxRichTextXMLHandler_methods[] = {
    { "CanLoad", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHandler_CanLoad, 1, NULL },
    { "CanSave", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHandler_CanSave, 1, NULL },
    { "ClearNodeToClassMap", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHandler_ClearNodeToClassMap, 1, NULL },

#if ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    { "CreateObjectForXMLName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHandler_CreateObjectForXMLName, 1, NULL },
#endif // ((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))
    { "ExportXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHandler_ExportXML_overload, s_wxluafunc_wxLua_wxRichTextXMLHandler_ExportXML_overload_count, 0 },
#endif // ((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_XMLDOCUMENT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML))||((((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_HAVE_DIRECT_OUTPUT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxUSE_STREAMS))

    { "GetHelper", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHandler_GetHelper, 1, NULL },

#if (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)
    { "ImportXML", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHandler_ImportXML, 1, NULL },
#endif // (((wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_STREAMS) && (wxUSE_XML)) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)) && (wxLUA_USE_wxXML && wxUSE_XML)

    { "Init", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxRichTextXMLHandler_Init, 1, NULL },
    { "RegisterNodeName", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxRichTextXMLHandler_RegisterNodeName, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxRichTextXMLHandler_delete, 1, NULL },
    { "wxRichTextXMLHandler", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxRichTextXMLHandler_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxRichTextXMLHandler_methodCount = sizeof(wxRichTextXMLHandler_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxrichtext_bind.cpp was generated by genwxbind.lua 
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------
// wxLuaGetEventList_wxrichtext() is called to register events
// ---------------------------------------------------------------------------

wxLuaBindEvent* wxLuaGetEventList_wxrichtext(size_t &count)
{
    static wxLuaBindEvent eventList[] =
    {
#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
        { "wxEVT_RICHTEXT_BUFFER_RESET", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_BUFFER_RESET), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_CHARACTER", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_CHARACTER), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_CONSUMING_CHARACTER", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_CONSUMING_CHARACTER), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_CONTENT_DELETED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_CONTENT_DELETED), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_CONTENT_INSERTED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_CONTENT_INSERTED), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_DELETE", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_DELETE), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_FOCUS_OBJECT_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_FOCUS_OBJECT_CHANGED), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_LEFT_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_LEFT_CLICK), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_LEFT_DCLICK", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_LEFT_DCLICK), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_MIDDLE_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_MIDDLE_CLICK), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_PROPERTIES_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_PROPERTIES_CHANGED), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_RETURN", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_RETURN), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_RIGHT_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_RIGHT_CLICK), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_SELECTION_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_SELECTION_CHANGED), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_STYLESHEET_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_STYLESHEET_CHANGED), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_STYLESHEET_CHANGING", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_STYLESHEET_CHANGING), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_STYLESHEET_REPLACED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_STYLESHEET_REPLACED), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_STYLESHEET_REPLACING", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_STYLESHEET_REPLACING), &wxluatype_wxRichTextEvent },
        { "wxEVT_RICHTEXT_STYLE_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_RICHTEXT_STYLE_CHANGED), &wxluatype_wxRichTextEvent },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)


        { 0, 0, 0 },
    };
    count = sizeof(eventList)/sizeof(wxLuaBindEvent) - 1;
    return eventList;
}

// ---------------------------------------------------------------------------
// wxLuaGetDefineList_wxrichtext() is called to register #define and enum
// ---------------------------------------------------------------------------

wxLuaBindNumber* wxLuaGetDefineList_wxrichtext(size_t &count)
{
    static wxLuaBindNumber numberList[] =
    {
#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { "SYMBOL_WXRICHTEXTOBJECTPROPERTIESDIALOG_STYLE", wxDEFAULT_DIALOG_STYLE|wxTAB_TRAVERSAL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "SYMBOL_WXRICHTEXTSTYLEORGANISERDIALOG_STYLE", wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxSYSTEM_MENU|wxCLOSE_BOX },
        { "SYMBOL_WXSYMBOLPICKERDIALOG_STYLE", (wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxCLOSE_BOX) },
        { "wxID_RICHTEXT_PROPERTIES1", (wxID_HIGHEST+1) },
        { "wxID_RICHTEXT_PROPERTIES2", (wxID_HIGHEST+2) },
        { "wxID_RICHTEXT_PROPERTIES3", (wxID_HIGHEST+3) },
        { "wxRE_CENTER_CARET", wxRE_CENTRE_CARET },
        { "wxRE_CENTRE_CARET", 0x8000 },
        { "wxRE_MULTILINE", 0x0020 },
        { "wxRE_READONLY", 0x0010 },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)
        { "wxRICHTEXTSTYLELIST_HIDE_TYPE_SELECTOR", 0x1000 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxRICHTEXT_ALT_DOWN", 0x04 },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { "wxRICHTEXT_BULLETINDEX_ARABIC", wxRICHTEXT_BULLETINDEX_ARABIC },
        { "wxRICHTEXT_BULLETINDEX_BITMAP", wxRICHTEXT_BULLETINDEX_BITMAP },
        { "wxRICHTEXT_BULLETINDEX_LOWER_CASE", wxRICHTEXT_BULLETINDEX_LOWER_CASE },
        { "wxRICHTEXT_BULLETINDEX_LOWER_CASE_ROMAN", wxRICHTEXT_BULLETINDEX_LOWER_CASE_ROMAN },
        { "wxRICHTEXT_BULLETINDEX_NONE", wxRICHTEXT_BULLETINDEX_NONE },
        { "wxRICHTEXT_BULLETINDEX_OUTLINE", wxRICHTEXT_BULLETINDEX_OUTLINE },
        { "wxRICHTEXT_BULLETINDEX_STANDARD", wxRICHTEXT_BULLETINDEX_STANDARD },
        { "wxRICHTEXT_BULLETINDEX_SYMBOL", wxRICHTEXT_BULLETINDEX_SYMBOL },
        { "wxRICHTEXT_BULLETINDEX_UPPER_CASE", wxRICHTEXT_BULLETINDEX_UPPER_CASE },
        { "wxRICHTEXT_BULLETINDEX_UPPER_CASE_ROMAN", wxRICHTEXT_BULLETINDEX_UPPER_CASE_ROMAN },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxRICHTEXT_CACHE_SIZE", 0x04 },
        { "wxRICHTEXT_CHANGE_ATTRIBUTES", wxRICHTEXT_CHANGE_ATTRIBUTES },
        { "wxRICHTEXT_CHANGE_OBJECT", wxRICHTEXT_CHANGE_OBJECT },
        { "wxRICHTEXT_CHANGE_PROPERTIES", wxRICHTEXT_CHANGE_PROPERTIES },
        { "wxRICHTEXT_CHANGE_STYLE", wxRICHTEXT_CHANGE_STYLE },
        { "wxRICHTEXT_CTRL_DOWN", 0x02 },
        { "wxRICHTEXT_DEFAULT_CARET_WIDTH", 2 },
        { "wxRICHTEXT_DEFAULT_DELAYED_LAYOUT_THRESHOLD", 20000 },
        { "wxRICHTEXT_DEFAULT_LAYOUT_INTERVAL", 50 },
        { "wxRICHTEXT_DEFAULT_MARGIN", 3 },
        { "wxRICHTEXT_DEFAULT_SPACING", 3 },
        { "wxRICHTEXT_DELETE", wxRICHTEXT_DELETE },
        { "wxRICHTEXT_DRAW_GUIDELINES", 0x08 },
        { "wxRICHTEXT_DRAW_IGNORE_CACHE", 0x01 },
        { "wxRICHTEXT_DRAW_PRINT", 0x04 },
        { "wxRICHTEXT_DRAW_SELECTED", 0x02 },
        { "wxRICHTEXT_EX_NO_GUIDELINES", 0x00000100 },
        { "wxRICHTEXT_FIXED_HEIGHT", 0x02 },
        { "wxRICHTEXT_FIXED_WIDTH", 0x01 },
        { "wxRICHTEXT_FORMATTED", 0x01 },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { "wxRICHTEXT_FORMAT_BACKGROUND", 0x0200 },
        { "wxRICHTEXT_FORMAT_BORDERS", 0x0100 },
        { "wxRICHTEXT_FORMAT_BULLETS", 0x0008 },
        { "wxRICHTEXT_FORMAT_CHARACTER", (wxRICHTEXT_FORMAT_FONT) },
        { "wxRICHTEXT_FORMAT_FONT", 0x0002 },
        { "wxRICHTEXT_FORMAT_HELP_BUTTON", 0x1000 },
        { "wxRICHTEXT_FORMAT_INDENTS_SPACING", 0x0010 },
        { "wxRICHTEXT_FORMAT_LIST_STYLE", 0x0020 },
        { "wxRICHTEXT_FORMAT_MARGINS", 0x0040 },
        { "wxRICHTEXT_FORMAT_PARAGRAPH", (wxRICHTEXT_FORMAT_INDENTS_SPACING|wxRICHTEXT_FORMAT_BULLETS|wxRICHTEXT_FORMAT_TABS|wxRICHTEXT_FORMAT_FONT) },
        { "wxRICHTEXT_FORMAT_SIZE", 0x0080 },
        { "wxRICHTEXT_FORMAT_STYLE", (wxRICHTEXT_FORMAT_PARAGRAPH|wxRICHTEXT_FORMAT_STYLE_EDITOR) },
        { "wxRICHTEXT_FORMAT_STYLE_EDITOR", 0x0001 },
        { "wxRICHTEXT_FORMAT_TABS", 0x0004 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxRICHTEXT_HANDLER_CONVERT_FACENAMES", 0x0100 },
        { "wxRICHTEXT_HANDLER_INCLUDE_STYLESHEET", 0x0001 },
        { "wxRICHTEXT_HANDLER_NO_HEADER_FOOTER", 0x0080 },
        { "wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_BASE64", 0x0040 },
        { "wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_FILES", 0x0020 },
        { "wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_MEMORY", 0x0010 },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { "wxRICHTEXT_HANDLER_USE_CSS", 0x1000 },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxRICHTEXT_HEIGHT_ONLY", 0x08 },
        { "wxRICHTEXT_HITTEST_AFTER", wxRICHTEXT_HITTEST_AFTER },
        { "wxRICHTEXT_HITTEST_BEFORE", wxRICHTEXT_HITTEST_BEFORE },
        { "wxRICHTEXT_HITTEST_HONOUR_ATOMIC", wxRICHTEXT_HITTEST_HONOUR_ATOMIC },
        { "wxRICHTEXT_HITTEST_NONE", wxRICHTEXT_HITTEST_NONE },
        { "wxRICHTEXT_HITTEST_NO_FLOATING_OBJECTS", wxRICHTEXT_HITTEST_NO_FLOATING_OBJECTS },
        { "wxRICHTEXT_HITTEST_NO_NESTED_OBJECTS", wxRICHTEXT_HITTEST_NO_NESTED_OBJECTS },
        { "wxRICHTEXT_HITTEST_ON", wxRICHTEXT_HITTEST_ON },
        { "wxRICHTEXT_HITTEST_OUTSIDE", wxRICHTEXT_HITTEST_OUTSIDE },
        { "wxRICHTEXT_INSERT", wxRICHTEXT_INSERT },
        { "wxRICHTEXT_INSERT_INTERACTIVE", 0x02 },
        { "wxRICHTEXT_INSERT_NONE", 0x00 },
        { "wxRICHTEXT_INSERT_WITH_PREVIOUS_PARAGRAPH_STYLE", 0x01 },
        { "wxRICHTEXT_LAYOUT_SPECIFIED_RECT", 0x10 },
        { "wxRICHTEXT_ORGANISER_APPLY_STYLES", 0x0004 },
        { "wxRICHTEXT_ORGANISER_BROWSE", (wxRICHTEXT_ORGANISER_SHOW_ALL|wxRICHTEXT_ORGANISER_OK_CANCEL) },
        { "wxRICHTEXT_ORGANISER_BROWSE_NUMBERING", (wxRICHTEXT_ORGANISER_SHOW_LIST|wxRICHTEXT_ORGANISER_OK_CANCEL|wxRICHTEXT_ORGANISER_RENUMBER) },
        { "wxRICHTEXT_ORGANISER_CREATE_STYLES", 0x0002 },
        { "wxRICHTEXT_ORGANISER_DELETE_STYLES", 0x0001 },
        { "wxRICHTEXT_ORGANISER_EDIT_STYLES", 0x0008 },
        { "wxRICHTEXT_ORGANISER_OK_CANCEL", 0x0020 },
        { "wxRICHTEXT_ORGANISER_ORGANISE", (wxRICHTEXT_ORGANISER_SHOW_ALL|wxRICHTEXT_ORGANISER_DELETE_STYLES|wxRICHTEXT_ORGANISER_CREATE_STYLES|wxRICHTEXT_ORGANISER_APPLY_STYLES|wxRICHTEXT_ORGANISER_EDIT_STYLES|wxRICHTEXT_ORGANISER_RENAME_STYLES) },
        { "wxRICHTEXT_ORGANISER_RENAME_STYLES", 0x0010 },
        { "wxRICHTEXT_ORGANISER_RENUMBER", 0x0040 },
        { "wxRICHTEXT_ORGANISER_SHOW_ALL", 0x1000 },
        { "wxRICHTEXT_ORGANISER_SHOW_BOX", 0x0800 },
        { "wxRICHTEXT_ORGANISER_SHOW_CHARACTER", 0x0100 },
        { "wxRICHTEXT_ORGANISER_SHOW_LIST", 0x0400 },
        { "wxRICHTEXT_ORGANISER_SHOW_PARAGRAPH", 0x0200 },
        { "wxRICHTEXT_PAGE_ALL", wxRICHTEXT_PAGE_ALL },
        { "wxRICHTEXT_PAGE_CENTRE", wxRICHTEXT_PAGE_CENTRE },
        { "wxRICHTEXT_PAGE_EVEN", wxRICHTEXT_PAGE_EVEN },
        { "wxRICHTEXT_PAGE_LEFT", wxRICHTEXT_PAGE_LEFT },
        { "wxRICHTEXT_PAGE_ODD", wxRICHTEXT_PAGE_ODD },
        { "wxRICHTEXT_PAGE_RIGHT", wxRICHTEXT_PAGE_RIGHT },
        { "wxRICHTEXT_PRINT_MAX_PAGES", 99999 },
        { "wxRICHTEXT_SETPROPERTIES_CHARACTERS_ONLY", 0x04 },
        { "wxRICHTEXT_SETPROPERTIES_NONE", 0x00 },
        { "wxRICHTEXT_SETPROPERTIES_PARAGRAPHS_ONLY", 0x02 },
        { "wxRICHTEXT_SETPROPERTIES_REMOVE", 0x10 },
        { "wxRICHTEXT_SETPROPERTIES_RESET", 0x08 },
        { "wxRICHTEXT_SETPROPERTIES_WITH_UNDO", 0x01 },
        { "wxRICHTEXT_SETSTYLE_CHARACTERS_ONLY", 0x08 },
        { "wxRICHTEXT_SETSTYLE_NONE", 0x00 },
        { "wxRICHTEXT_SETSTYLE_OPTIMIZE", 0x02 },
        { "wxRICHTEXT_SETSTYLE_PARAGRAPHS_ONLY", 0x04 },
        { "wxRICHTEXT_SETSTYLE_REMOVE", 0x80 },
        { "wxRICHTEXT_SETSTYLE_RENUMBER", 0x10 },
        { "wxRICHTEXT_SETSTYLE_RESET", 0x40 },
        { "wxRICHTEXT_SETSTYLE_SPECIFY_LEVEL", 0x20 },
        { "wxRICHTEXT_SETSTYLE_WITH_UNDO", 0x01 },
        { "wxRICHTEXT_SHIFT_DOWN", 0x01 },
        { "wxRICHTEXT_TYPE_ANY", wxRICHTEXT_TYPE_ANY },
        { "wxRICHTEXT_TYPE_HTML", wxRICHTEXT_TYPE_HTML },
        { "wxRICHTEXT_TYPE_PDF", wxRICHTEXT_TYPE_PDF },
        { "wxRICHTEXT_TYPE_RTF", wxRICHTEXT_TYPE_RTF },
        { "wxRICHTEXT_TYPE_TEXT", wxRICHTEXT_TYPE_TEXT },
        { "wxRICHTEXT_TYPE_XML", wxRICHTEXT_TYPE_XML },
        { "wxRICHTEXT_UNFORMATTED", 0x02 },
        { "wxRICHTEXT_USE_OWN_CARET", wxRICHTEXT_USE_OWN_CARET },
        { "wxRICHTEXT_VARIABLE_HEIGHT", 0x08 },
        { "wxRICHTEXT_VARIABLE_WIDTH", 0x04 },
        { "wxRichTextCtrlSelectionState_CommonAncestor", wxRichTextCtrlSelectionState_CommonAncestor },
        { "wxRichTextCtrlSelectionState_Normal", wxRichTextCtrlSelectionState_Normal },
        { "wxSCRIPT_MUL_FACTOR", 1.5 },
        { "wxTEXT_ATTR_KEEP_FIRST_PARA_STYLE", 0x20000000 },
        { "wxTEXT_ATTR_UNITS_HUNDREDTHS_POINT", wxTEXT_ATTR_UNITS_HUNDREDTHS_POINT },
        { "wxTEXT_ATTR_UNITS_MASK", wxTEXT_ATTR_UNITS_MASK },
        { "wxTEXT_ATTR_UNITS_PERCENTAGE", wxTEXT_ATTR_UNITS_PERCENTAGE },
        { "wxTEXT_ATTR_UNITS_PIXELS", wxTEXT_ATTR_UNITS_PIXELS },
        { "wxTEXT_ATTR_UNITS_POINTS", wxTEXT_ATTR_UNITS_POINTS },
        { "wxTEXT_ATTR_UNITS_TENTHS_MM", wxTEXT_ATTR_UNITS_TENTHS_MM },
        { "wxTEXT_ATTR_VALUE_VALID", wxTEXT_ATTR_VALUE_VALID },
        { "wxTEXT_ATTR_VALUE_VALID_MASK", wxTEXT_ATTR_VALUE_VALID_MASK },
        { "wxTEXT_BOX_ATTR_BORDER_COLOUR", wxTEXT_BOX_ATTR_BORDER_COLOUR },
        { "wxTEXT_BOX_ATTR_BORDER_DASHED", wxTEXT_BOX_ATTR_BORDER_DASHED },
        { "wxTEXT_BOX_ATTR_BORDER_DOTTED", wxTEXT_BOX_ATTR_BORDER_DOTTED },
        { "wxTEXT_BOX_ATTR_BORDER_DOUBLE", wxTEXT_BOX_ATTR_BORDER_DOUBLE },
        { "wxTEXT_BOX_ATTR_BORDER_GROOVE", wxTEXT_BOX_ATTR_BORDER_GROOVE },
        { "wxTEXT_BOX_ATTR_BORDER_INSET", wxTEXT_BOX_ATTR_BORDER_INSET },
        { "wxTEXT_BOX_ATTR_BORDER_MEDIUM", wxTEXT_BOX_ATTR_BORDER_MEDIUM },
        { "wxTEXT_BOX_ATTR_BORDER_NONE", wxTEXT_BOX_ATTR_BORDER_NONE },
        { "wxTEXT_BOX_ATTR_BORDER_OUTSET", wxTEXT_BOX_ATTR_BORDER_OUTSET },
        { "wxTEXT_BOX_ATTR_BORDER_RIDGE", wxTEXT_BOX_ATTR_BORDER_RIDGE },
        { "wxTEXT_BOX_ATTR_BORDER_SOLID", wxTEXT_BOX_ATTR_BORDER_SOLID },
        { "wxTEXT_BOX_ATTR_BORDER_STYLE", wxTEXT_BOX_ATTR_BORDER_STYLE },
        { "wxTEXT_BOX_ATTR_BORDER_THICK", wxTEXT_BOX_ATTR_BORDER_THICK },
        { "wxTEXT_BOX_ATTR_BORDER_THIN", wxTEXT_BOX_ATTR_BORDER_THIN },
        { "wxTEXT_BOX_ATTR_BOX_STYLE_NAME", wxTEXT_BOX_ATTR_BOX_STYLE_NAME },
        { "wxTEXT_BOX_ATTR_CLEAR", wxTEXT_BOX_ATTR_CLEAR },
        { "wxTEXT_BOX_ATTR_CLEAR_BOTH", wxTEXT_BOX_ATTR_CLEAR_BOTH },
        { "wxTEXT_BOX_ATTR_CLEAR_LEFT", wxTEXT_BOX_ATTR_CLEAR_LEFT },
        { "wxTEXT_BOX_ATTR_CLEAR_NONE", wxTEXT_BOX_ATTR_CLEAR_NONE },
        { "wxTEXT_BOX_ATTR_CLEAR_RIGHT", wxTEXT_BOX_ATTR_CLEAR_RIGHT },
        { "wxTEXT_BOX_ATTR_COLLAPSE_BORDERS", wxTEXT_BOX_ATTR_COLLAPSE_BORDERS },
        { "wxTEXT_BOX_ATTR_COLLAPSE_FULL", wxTEXT_BOX_ATTR_COLLAPSE_FULL },
        { "wxTEXT_BOX_ATTR_COLLAPSE_NONE", wxTEXT_BOX_ATTR_COLLAPSE_NONE },
        { "wxTEXT_BOX_ATTR_FLOAT", wxTEXT_BOX_ATTR_FLOAT },
        { "wxTEXT_BOX_ATTR_FLOAT_LEFT", wxTEXT_BOX_ATTR_FLOAT_LEFT },
        { "wxTEXT_BOX_ATTR_FLOAT_NONE", wxTEXT_BOX_ATTR_FLOAT_NONE },
        { "wxTEXT_BOX_ATTR_FLOAT_RIGHT", wxTEXT_BOX_ATTR_FLOAT_RIGHT },
        { "wxTEXT_BOX_ATTR_POSITION_ABSOLUTE", wxTEXT_BOX_ATTR_POSITION_ABSOLUTE },
        { "wxTEXT_BOX_ATTR_POSITION_FIXED", wxTEXT_BOX_ATTR_POSITION_FIXED },
        { "wxTEXT_BOX_ATTR_POSITION_MASK", wxTEXT_BOX_ATTR_POSITION_MASK },
        { "wxTEXT_BOX_ATTR_POSITION_RELATIVE", wxTEXT_BOX_ATTR_POSITION_RELATIVE },
        { "wxTEXT_BOX_ATTR_POSITION_STATIC", wxTEXT_BOX_ATTR_POSITION_STATIC },
        { "wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT },
        { "wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_BOTTOM", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_BOTTOM },
        { "wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_CENTRE", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_CENTRE },
        { "wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_NONE", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_NONE },
        { "wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_TOP", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_TOP },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


        { 0, 0 },
    };
    count = sizeof(numberList)/sizeof(wxLuaBindNumber) - 1;
    return numberList;
}

// ---------------------------------------------------------------------------

// wxLuaGetStringList_wxrichtext() is called to register #define_string
// ---------------------------------------------------------------------------

wxLuaBindString* wxLuaGetStringList_wxrichtext(size_t &count)
{
    static wxLuaBindString stringList[] =
    {

        { 0, 0 },
    };
    count = sizeof(stringList)/sizeof(wxLuaBindString) - 1;
    return stringList;
}

// ---------------------------------------------------------------------------
// wxLuaGetObjectList_wxrichtext() is called to register object and pointer bindings
// ---------------------------------------------------------------------------

wxLuaBindObject* wxLuaGetObjectList_wxrichtext(size_t &count)
{
    static wxLuaBindObject objectList[] =
    {
#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxRICHTEXT_ALL", &wxluatype_wxRichTextRange, &wxRICHTEXT_ALL, NULL },
        { "wxRICHTEXT_NONE", &wxluatype_wxRichTextRange, &wxRICHTEXT_NONE, NULL },
        { "wxRICHTEXT_NO_SELECTION", &wxluatype_wxRichTextRange, &wxRICHTEXT_NO_SELECTION, NULL },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


        { 0, 0, 0, 0 },
    };
    count = sizeof(objectList)/sizeof(wxLuaBindObject) - 1;
    return objectList;
}

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxrichtext() is called to register global functions
// ---------------------------------------------------------------------------

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextApplyStyle[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxRichTextApplyStyle(wxRichTextAttr& destStyle, const wxRichTextAttr& style, wxRichTextAttr* compareWith = NULL);
static int LUACALL wxLua_function_wxRichTextApplyStyle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRichTextAttr compareWith = NULL
    wxRichTextAttr * compareWith = (argCount >= 3 ? (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr) : NULL);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // wxRichTextAttr destStyle
    wxRichTextAttr * destStyle = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call wxRichTextApplyStyle
    bool returns = (wxRichTextApplyStyle(*destStyle, *style, compareWith));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextApplyStyle[1] = {{ wxLua_function_wxRichTextApplyStyle, WXLUAMETHOD_CFUNCTION, 2, 3, s_wxluatypeArray_wxLua_function_wxRichTextApplyStyle }};

static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextBitlistsEqPartial[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxRichTextBitlistsEqPartial(int valueA, int valueB, int flags);
static int LUACALL wxLua_function_wxRichTextBitlistsEqPartial(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 3);
    // int valueB
    int valueB = (int)wxlua_getnumbertype(L, 2);
    // int valueA
    int valueA = (int)wxlua_getnumbertype(L, 1);
    // call wxRichTextBitlistsEqPartial
    bool returns = (wxRichTextBitlistsEqPartial(valueA, valueB, flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextBitlistsEqPartial[1] = {{ wxLua_function_wxRichTextBitlistsEqPartial, WXLUAMETHOD_CFUNCTION, 3, 3, s_wxluatypeArray_wxLua_function_wxRichTextBitlistsEqPartial }};

static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextCombineBitlists[] = { &wxluatype_TLIGHTUSERDATA, &wxluatype_TNUMBER, &wxluatype_TLIGHTUSERDATA, &wxluatype_TNUMBER, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxRichTextCombineBitlists(int& valueA, int valueB, int& flagsA, int flagsB);
static int LUACALL wxLua_function_wxRichTextCombineBitlists(lua_State *L)
{
    // int flagsB
    int flagsB = (int)wxlua_getnumbertype(L, 4);
    // int flagsA
    int * flagsA = (int *)wxlua_touserdata(L, 3);
    // int valueB
    int valueB = (int)wxlua_getnumbertype(L, 2);
    // int valueA
    int * valueA = (int *)wxlua_touserdata(L, 1);
    // call wxRichTextCombineBitlists
    bool returns = (wxRichTextCombineBitlists(*valueA, valueB, *flagsA, flagsB));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextCombineBitlists[1] = {{ wxLua_function_wxRichTextCombineBitlists, WXLUAMETHOD_CFUNCTION, 4, 4, s_wxluatypeArray_wxLua_function_wxRichTextCombineBitlists }};

static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextDecimalToRoman[] = { &wxluatype_TNUMBER, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ wxString wxRichTextDecimalToRoman(long n);
static int LUACALL wxLua_function_wxRichTextDecimalToRoman(lua_State *L)
{
    // long n
    long n = (long)wxlua_getnumbertype(L, 1);
    // call wxRichTextDecimalToRoman
    wxString returns = (wxRichTextDecimalToRoman(n));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextDecimalToRoman[1] = {{ wxLua_function_wxRichTextDecimalToRoman, WXLUAMETHOD_CFUNCTION, 1, 1, s_wxluatypeArray_wxLua_function_wxRichTextDecimalToRoman }};

static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextHasStyle[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
// /*inline*/ bool wxRichTextHasStyle(int flags, int style);
static int LUACALL wxLua_function_wxRichTextHasStyle(lua_State *L)
{
    // int style
    int style = (int)wxlua_getnumbertype(L, 2);
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 1);
    // call wxRichTextHasStyle
    bool returns = (wxRichTextHasStyle(flags, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextHasStyle[1] = {{ wxLua_function_wxRichTextHasStyle, WXLUAMETHOD_CFUNCTION, 2, 2, s_wxluatypeArray_wxLua_function_wxRichTextHasStyle }};

// /*WXDLLIMPEXP_RICHTEXT*/ void wxRichTextModuleInit();
static int LUACALL wxLua_function_wxRichTextModuleInit(lua_State *L)
{
    // call wxRichTextModuleInit
    wxRichTextModuleInit();

    return 0;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextModuleInit[1] = {{ wxLua_function_wxRichTextModuleInit, WXLUAMETHOD_CFUNCTION, 0, 0, g_wxluaargtypeArray_None }};

static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextRemoveStyle[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxRichTextRemoveStyle(wxRichTextAttr& destStyle, const wxRichTextAttr& style);
static int LUACALL wxLua_function_wxRichTextRemoveStyle(lua_State *L)
{
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // wxRichTextAttr destStyle
    wxRichTextAttr * destStyle = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call wxRichTextRemoveStyle
    bool returns = (wxRichTextRemoveStyle(*destStyle, *style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextRemoveStyle[1] = {{ wxLua_function_wxRichTextRemoveStyle, WXLUAMETHOD_CFUNCTION, 2, 2, s_wxluatypeArray_wxLua_function_wxRichTextRemoveStyle }};

static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextSplitParaCharStyles[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxRichTextSplitParaCharStyles(const wxRichTextAttr& style, wxRichTextAttr& parStyle, wxRichTextAttr& charStyle);
static int LUACALL wxLua_function_wxRichTextSplitParaCharStyles(lua_State *L)
{
    // wxRichTextAttr charStyle
    wxRichTextAttr * charStyle = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRichTextAttr);
    // wxRichTextAttr parStyle
    wxRichTextAttr * parStyle = (wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // const wxRichTextAttr style
    const wxRichTextAttr * style = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call wxRichTextSplitParaCharStyles
    bool returns = (wxRichTextSplitParaCharStyles(*style, *parStyle, *charStyle));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextSplitParaCharStyles[1] = {{ wxLua_function_wxRichTextSplitParaCharStyles, WXLUAMETHOD_CFUNCTION, 3, 3, s_wxluatypeArray_wxLua_function_wxRichTextSplitParaCharStyles }};

#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
static wxLuaArgType s_wxluatypeArray_wxLua_function_wxRichTextTabsEq[] = { &wxluatype_wxArrayInt, &wxluatype_wxArrayInt, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxRichTextTabsEq(const wxArrayInt& tabs1, const wxArrayInt& tabs2);
static int LUACALL wxLua_function_wxRichTextTabsEq(lua_State *L)
{
    // const wxArrayInt tabs2
    wxLuaSmartwxArrayInt tabs2 = wxlua_getwxArrayInt(L, 2);
    // const wxArrayInt tabs1
    wxLuaSmartwxArrayInt tabs1 = wxlua_getwxArrayInt(L, 1);
    // call wxRichTextTabsEq
    bool returns = (wxRichTextTabsEq(tabs1, tabs2));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxRichTextTabsEq[1] = {{ wxLua_function_wxRichTextTabsEq, WXLUAMETHOD_CFUNCTION, 2, 2, s_wxluatypeArray_wxLua_function_wxRichTextTabsEq }};

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_function_wxTextAttrCollectCommonAttributes[] = { &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, &wxluatype_wxTextAttr, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ void wxTextAttrCollectCommonAttributes(wxTextAttr& currentStyle, const wxTextAttr& attr, wxTextAttr& clashingAttr, wxTextAttr& absentAttr);
static int LUACALL wxLua_function_wxTextAttrCollectCommonAttributes(lua_State *L)
{
    // wxTextAttr absentAttr
    wxTextAttr * absentAttr = (wxTextAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxTextAttr);
    // wxTextAttr clashingAttr
    wxTextAttr * clashingAttr = (wxTextAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxTextAttr);
    // const wxTextAttr attr
    const wxTextAttr * attr = (const wxTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTextAttr);
    // wxTextAttr currentStyle
    wxTextAttr * currentStyle = (wxTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTextAttr);
    // call wxTextAttrCollectCommonAttributes
    wxTextAttrCollectCommonAttributes(*currentStyle, *attr, *clashingAttr, *absentAttr);

    return 0;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxTextAttrCollectCommonAttributes[1] = {{ wxLua_function_wxTextAttrCollectCommonAttributes, WXLUAMETHOD_CFUNCTION, 4, 4, s_wxluatypeArray_wxLua_function_wxTextAttrCollectCommonAttributes }};

#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
static wxLuaArgType s_wxluatypeArray_wxLua_function_wxTextAttrEq1[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxTextAttrEq(const wxRichTextAttr& attr1, const wxRichTextAttr& attr2);
static int LUACALL wxLua_function_wxTextAttrEq1(lua_State *L)
{
    // const wxRichTextAttr attr2
    const wxRichTextAttr * attr2 = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // const wxRichTextAttr attr1
    const wxRichTextAttr * attr1 = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call wxTextAttrEq
    bool returns = (wxTextAttrEq(*attr1, *attr2));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxTextAttrEq1[1] = {{ wxLua_function_wxTextAttrEq1, WXLUAMETHOD_CFUNCTION, 2, 2, s_wxluatypeArray_wxLua_function_wxTextAttrEq1 }};

static wxLuaArgType s_wxluatypeArray_wxLua_function_wxTextAttrEq[] = { &wxluatype_wxRichTextAttr, &wxluatype_wxRichTextAttr, NULL };
// /*WXDLLIMPEXP_RICHTEXT*/ bool wxTextAttrEq(const wxRichTextAttr& attr1, const wxRichTextAttr& attr2);
static int LUACALL wxLua_function_wxTextAttrEq(lua_State *L)
{
    // const wxRichTextAttr attr2
    const wxRichTextAttr * attr2 = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRichTextAttr);
    // const wxRichTextAttr attr1
    const wxRichTextAttr * attr1 = (const wxRichTextAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxRichTextAttr);
    // call wxTextAttrEq
    bool returns = (wxTextAttrEq(*attr1, *attr2));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxTextAttrEq[1] = {{ wxLua_function_wxTextAttrEq, WXLUAMETHOD_CFUNCTION, 2, 2, s_wxluatypeArray_wxLua_function_wxTextAttrEq }};

#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxrichtext() is called to register global functions
// ---------------------------------------------------------------------------

wxLuaBindMethod* wxLuaGetFunctionList_wxrichtext(size_t &count)
{
    static wxLuaBindMethod functionList[] =
    {
#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxRichTextApplyStyle", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextApplyStyle, 1, NULL },
        { "wxRichTextBitlistsEqPartial", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextBitlistsEqPartial, 1, NULL },
        { "wxRichTextCombineBitlists", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextCombineBitlists, 1, NULL },
        { "wxRichTextDecimalToRoman", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextDecimalToRoman, 1, NULL },
        { "wxRichTextHasStyle", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextHasStyle, 1, NULL },
        { "wxRichTextModuleInit", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextModuleInit, 1, NULL },
        { "wxRichTextRemoveStyle", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextRemoveStyle, 1, NULL },
        { "wxRichTextSplitParaCharStyles", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextSplitParaCharStyles, 1, NULL },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { "wxRichTextTabsEq", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxRichTextTabsEq, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)
        { "wxTextAttrCollectCommonAttributes", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxTextAttrCollectCommonAttributes, 1, NULL },
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxTextCtrl && wxUSE_TEXTCTRL)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { "wxTextAttrEq", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxTextAttrEq1, 1, NULL },
        { "wxTextAttrEq", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxTextAttrEq, 1, NULL },
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


        { 0, 0, 0, 0 }, 
    };
    count = sizeof(functionList)/sizeof(wxLuaBindMethod) - 1;
    return functionList;
}



// ---------------------------------------------------------------------------
// wxLuaGetClassList_wxrichtext() is called to register classes
// ---------------------------------------------------------------------------

static const char* wxluaclassname_wxComboCtrl = "wxComboCtrl";
static const char* wxluaclassname_wxCommand = "wxCommand";
static const char* wxluaclassname_wxControl = "wxControl";
static const char* wxluaclassname_wxDataObjectSimple = "wxDataObjectSimple";
static const char* wxluaclassname_wxDialog = "wxDialog";
static const char* wxluaclassname_wxDropSource = "wxDropSource";
static const char* wxluaclassname_wxDropTarget = "wxDropTarget";
static const char* wxluaclassname_wxHtmlListBox = "wxHtmlListBox";
static const char* wxluaclassname_wxList = "wxList";
static const char* wxluaclassname_wxNotifyEvent = "wxNotifyEvent";
static const char* wxluaclassname_wxObject = "wxObject";
static const char* wxluaclassname_wxPrintout = "wxPrintout";
static const char* wxluaclassname_wxRichTextAction = "wxRichTextAction";
static const char* wxluaclassname_wxRichTextAttr = "wxRichTextAttr";
static const char* wxluaclassname_wxRichTextAttrArray = "wxRichTextAttrArray";
static const char* wxluaclassname_wxRichTextBox = "wxRichTextBox";
static const char* wxluaclassname_wxRichTextBoxStyleDefinition = "wxRichTextBoxStyleDefinition";
static const char* wxluaclassname_wxRichTextBuffer = "wxRichTextBuffer";
static const char* wxluaclassname_wxRichTextBufferDataObject = "wxRichTextBufferDataObject";
static const char* wxluaclassname_wxRichTextCell = "wxRichTextCell";
static const char* wxluaclassname_wxRichTextCharacterStyleDefinition = "wxRichTextCharacterStyleDefinition";
static const char* wxluaclassname_wxRichTextCommand = "wxRichTextCommand";
static const char* wxluaclassname_wxRichTextCompositeObject = "wxRichTextCompositeObject";
static const char* wxluaclassname_wxRichTextContextMenuPropertiesInfo = "wxRichTextContextMenuPropertiesInfo";
static const char* wxluaclassname_wxRichTextCtrl = "wxRichTextCtrl";
static const char* wxluaclassname_wxRichTextDrawingContext = "wxRichTextDrawingContext";
static const char* wxluaclassname_wxRichTextDrawingHandler = "wxRichTextDrawingHandler";
static const char* wxluaclassname_wxRichTextDropSource = "wxRichTextDropSource";
static const char* wxluaclassname_wxRichTextDropTarget = "wxRichTextDropTarget";
static const char* wxluaclassname_wxRichTextEvent = "wxRichTextEvent";
static const char* wxluaclassname_wxRichTextField = "wxRichTextField";
static const char* wxluaclassname_wxRichTextFieldType = "wxRichTextFieldType";
static const char* wxluaclassname_wxRichTextFieldTypeHashMap = "wxRichTextFieldTypeHashMap";
static const char* wxluaclassname_wxRichTextFieldTypeHashMap_iterator = "wxRichTextFieldTypeHashMap_iterator";
static const char* wxluaclassname_wxRichTextFieldTypeStandard = "wxRichTextFieldTypeStandard";
static const char* wxluaclassname_wxRichTextFileHandler = "wxRichTextFileHandler";
static const char* wxluaclassname_wxRichTextFontTable = "wxRichTextFontTable";
static const char* wxluaclassname_wxRichTextFormattingDialog = "wxRichTextFormattingDialog";
static const char* wxluaclassname_wxRichTextFormattingDialogFactory = "wxRichTextFormattingDialogFactory";
static const char* wxluaclassname_wxRichTextHTMLHandler = "wxRichTextHTMLHandler";
static const char* wxluaclassname_wxRichTextHeaderFooterData = "wxRichTextHeaderFooterData";
static const char* wxluaclassname_wxRichTextImage = "wxRichTextImage";
static const char* wxluaclassname_wxRichTextImageBlock = "wxRichTextImageBlock";
static const char* wxluaclassname_wxRichTextLine = "wxRichTextLine";
static const char* wxluaclassname_wxRichTextLineList = "wxRichTextLineList";
static const char* wxluaclassname_wxRichTextListStyleDefinition = "wxRichTextListStyleDefinition";
static const char* wxluaclassname_wxRichTextObject = "wxRichTextObject";
static const char* wxluaclassname_wxRichTextObjectAddress = "wxRichTextObjectAddress";
static const char* wxluaclassname_wxRichTextObjectList = "wxRichTextObjectList";
static const char* wxluaclassname_wxRichTextObjectPropertiesDialog = "wxRichTextObjectPropertiesDialog";
static const char* wxluaclassname_wxRichTextObjectPtrArray = "wxRichTextObjectPtrArray";
static const char* wxluaclassname_wxRichTextObjectPtrArrayArray = "wxRichTextObjectPtrArrayArray";
static const char* wxluaclassname_wxRichTextParagraph = "wxRichTextParagraph";
static const char* wxluaclassname_wxRichTextParagraphLayoutBox = "wxRichTextParagraphLayoutBox";
static const char* wxluaclassname_wxRichTextParagraphStyleDefinition = "wxRichTextParagraphStyleDefinition";
static const char* wxluaclassname_wxRichTextPlainText = "wxRichTextPlainText";
static const char* wxluaclassname_wxRichTextPlainTextHandler = "wxRichTextPlainTextHandler";
static const char* wxluaclassname_wxRichTextPrinting = "wxRichTextPrinting";
static const char* wxluaclassname_wxRichTextPrintout = "wxRichTextPrintout";
static const char* wxluaclassname_wxRichTextProperties = "wxRichTextProperties";
static const char* wxluaclassname_wxRichTextRange = "wxRichTextRange";
static const char* wxluaclassname_wxRichTextRangeArray = "wxRichTextRangeArray";
static const char* wxluaclassname_wxRichTextRectArray = "wxRichTextRectArray";
static const char* wxluaclassname_wxRichTextRenderer = "wxRichTextRenderer";
static const char* wxluaclassname_wxRichTextSelection = "wxRichTextSelection";
static const char* wxluaclassname_wxRichTextStdRenderer = "wxRichTextStdRenderer";
static const char* wxluaclassname_wxRichTextStyleComboCtrl = "wxRichTextStyleComboCtrl";
static const char* wxluaclassname_wxRichTextStyleDefinition = "wxRichTextStyleDefinition";
static const char* wxluaclassname_wxRichTextStyleListBox = "wxRichTextStyleListBox";
static const char* wxluaclassname_wxRichTextStyleListCtrl = "wxRichTextStyleListCtrl";
static const char* wxluaclassname_wxRichTextStyleOrganiserDialog = "wxRichTextStyleOrganiserDialog";
static const char* wxluaclassname_wxRichTextStyleSheet = "wxRichTextStyleSheet";
static const char* wxluaclassname_wxRichTextTable = "wxRichTextTable";
static const char* wxluaclassname_wxRichTextTableBlock = "wxRichTextTableBlock";
static const char* wxluaclassname_wxRichTextVariantArray = "wxRichTextVariantArray";
static const char* wxluaclassname_wxRichTextXMLHandler = "wxRichTextXMLHandler";
static const char* wxluaclassname_wxRichTextXMLHelper = "wxRichTextXMLHelper";
static const char* wxluaclassname_wxScrollHelper = "wxScrollHelper";
static const char* wxluaclassname_wxSymbolListCtrl = "wxSymbolListCtrl";
static const char* wxluaclassname_wxSymbolPickerDialog = "wxSymbolPickerDialog";
static const char* wxluaclassname_wxTextAttr = "wxTextAttr";
static const char* wxluaclassname_wxTextAttrBorder = "wxTextAttrBorder";
static const char* wxluaclassname_wxTextAttrBorders = "wxTextAttrBorders";
static const char* wxluaclassname_wxTextAttrDimension = "wxTextAttrDimension";
static const char* wxluaclassname_wxTextAttrDimensionConverter = "wxTextAttrDimensionConverter";
static const char* wxluaclassname_wxTextAttrDimensions = "wxTextAttrDimensions";
static const char* wxluaclassname_wxTextAttrSize = "wxTextAttrSize";
static const char* wxluaclassname_wxTextBoxAttr = "wxTextBoxAttr";
static const char* wxluaclassname_wxTextCtrlIface = "wxTextCtrlIface";
static const char* wxluaclassname_wxVScrolledWindow = "wxVScrolledWindow";

static const char* wxluabaseclassnames_wxRichTextAction[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextAction[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextAttr[] = { wxluaclassname_wxTextAttr, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextAttr[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextBox[] = { wxluaclassname_wxRichTextParagraphLayoutBox, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextBox[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextBoxStyleDefinition[] = { wxluaclassname_wxRichTextStyleDefinition, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextBoxStyleDefinition[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextBuffer[] = { wxluaclassname_wxRichTextParagraphLayoutBox, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextBuffer[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextBufferDataObject[] = { wxluaclassname_wxDataObjectSimple, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextBufferDataObject[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextCell[] = { wxluaclassname_wxRichTextBox, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextCell[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextCharacterStyleDefinition[] = { wxluaclassname_wxRichTextStyleDefinition, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextCharacterStyleDefinition[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextCommand[] = { wxluaclassname_wxCommand, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextCommand[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextCompositeObject[] = { wxluaclassname_wxRichTextObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextCompositeObject[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextCtrl[] = { wxluaclassname_wxControl, wxluaclassname_wxTextCtrlIface, wxluaclassname_wxScrollHelper, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextCtrl[] = { NULL, NULL, NULL };
static const char* wxluabaseclassnames_wxRichTextDrawingContext[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextDrawingContext[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextDrawingHandler[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextDrawingHandler[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextDropSource[] = { wxluaclassname_wxDropSource, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextDropSource[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextDropTarget[] = { wxluaclassname_wxDropTarget, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextDropTarget[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextEvent[] = { wxluaclassname_wxNotifyEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextEvent[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextField[] = { wxluaclassname_wxRichTextParagraphLayoutBox, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextField[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextFieldType[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextFieldType[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextFieldTypeStandard[] = { wxluaclassname_wxRichTextFieldType, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextFieldTypeStandard[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextFileHandler[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextFileHandler[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextFontTable[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextFontTable[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextFormattingDialogFactory[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextFormattingDialogFactory[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextHTMLHandler[] = { wxluaclassname_wxRichTextFileHandler, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextHTMLHandler[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextHeaderFooterData[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextHeaderFooterData[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextImage[] = { wxluaclassname_wxRichTextObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextImage[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextImageBlock[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextImageBlock[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextLineList[] = { wxluaclassname_wxList, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextLineList[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextListStyleDefinition[] = { wxluaclassname_wxRichTextParagraphStyleDefinition, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextListStyleDefinition[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextObject[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextObject[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextObjectList[] = { wxluaclassname_wxList, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextObjectList[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextObjectPropertiesDialog[] = { wxluaclassname_wxRichTextFormattingDialog, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextObjectPropertiesDialog[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextParagraph[] = { wxluaclassname_wxRichTextCompositeObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextParagraph[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextParagraphLayoutBox[] = { wxluaclassname_wxRichTextCompositeObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextParagraphLayoutBox[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextParagraphStyleDefinition[] = { wxluaclassname_wxRichTextStyleDefinition, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextParagraphStyleDefinition[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextPlainText[] = { wxluaclassname_wxRichTextObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextPlainText[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextPlainTextHandler[] = { wxluaclassname_wxRichTextFileHandler, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextPlainTextHandler[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextPrinting[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextPrinting[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextPrintout[] = { wxluaclassname_wxPrintout, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextPrintout[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextProperties[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextProperties[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextRenderer[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextStdRenderer[] = { wxluaclassname_wxRichTextRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextStdRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextStyleComboCtrl[] = { wxluaclassname_wxComboCtrl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextStyleComboCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextStyleDefinition[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextStyleDefinition[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextStyleListBox[] = { wxluaclassname_wxHtmlListBox, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextStyleListBox[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextStyleListCtrl[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextStyleListCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextStyleOrganiserDialog[] = { wxluaclassname_wxDialog, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextStyleOrganiserDialog[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextStyleSheet[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextStyleSheet[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextTable[] = { wxluaclassname_wxRichTextBox, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextTable[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextXMLHandler[] = { wxluaclassname_wxRichTextFileHandler, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextXMLHandler[] = { NULL };
static const char* wxluabaseclassnames_wxRichTextXMLHelper[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxRichTextXMLHelper[] = { NULL };
static const char* wxluabaseclassnames_wxSymbolListCtrl[] = { wxluaclassname_wxVScrolledWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSymbolListCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxSymbolPickerDialog[] = { wxluaclassname_wxDialog, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSymbolPickerDialog[] = { NULL };
// ---------------------------------------------------------------------------
// Lua Tag Method Values and Tables for each Class
// ---------------------------------------------------------------------------

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
    extern wxLuaBindMethod wxRichTextFormattingDialog_methods[];
    extern int wxRichTextFormattingDialog_methodCount;
    extern wxLuaBindNumber wxRichTextFormattingDialog_enums[];
    extern int wxRichTextFormattingDialog_enumCount;
    extern void wxLua_wxRichTextFormattingDialog_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextFormattingDialogFactory_methods[];
    extern int wxRichTextFormattingDialogFactory_methodCount;
    extern void wxLua_wxRichTextFormattingDialogFactory_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextHTMLHandler_methods[];
    extern int wxRichTextHTMLHandler_methodCount;
    extern void wxLua_wxRichTextHTMLHandler_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextObjectPropertiesDialog_methods[];
    extern int wxRichTextObjectPropertiesDialog_methodCount;
    extern wxLuaBindNumber wxRichTextObjectPropertiesDialog_enums[];
    extern int wxRichTextObjectPropertiesDialog_enumCount;
    extern void wxLua_wxRichTextObjectPropertiesDialog_delete_function(void** p);
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)
    extern wxLuaBindMethod wxRichTextLineList_methods[];
    extern int wxRichTextLineList_methodCount;
    extern void wxLua_wxRichTextLineList_delete_function(void** p);
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)
    extern wxLuaBindMethod wxRichTextStyleComboCtrl_methods[];
    extern int wxRichTextStyleComboCtrl_methodCount;
    static wxLuaArgType wxluabaseclass_wxluatypes_wxRichTextStyleComboCtrl[] = { &wxluatype_wxTextEntry, NULL };
    static wxIntPtr wxluabaseclass_vtable_offsets_wxRichTextStyleComboCtrl[] = { wxIntPtr(((wxIntPtr)(wxTextEntry*)(wxRichTextStyleComboCtrl*)&wxluatype_TNONE) - ((wxIntPtr)(wxRichTextStyleComboCtrl*)&wxluatype_TNONE)) };
    extern void wxLua_wxRichTextStyleComboCtrl_delete_function(void** p);
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)
    extern wxLuaBindMethod wxRichTextBufferDataObject_methods[];
    extern int wxRichTextBufferDataObject_methodCount;
    extern void wxLua_wxRichTextBufferDataObject_delete_function(void** p);
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
    extern wxLuaBindMethod wxRichTextDropSource_methods[];
    extern int wxRichTextDropSource_methodCount;
    extern void wxLua_wxRichTextDropSource_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextDropTarget_methods[];
    extern int wxRichTextDropTarget_methodCount;
    extern void wxLua_wxRichTextDropTarget_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextEvent_methods[];
    extern int wxRichTextEvent_methodCount;
    extern void wxLua_wxRichTextEvent_delete_function(void** p);
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)
    extern wxLuaBindMethod wxRichTextStyleListBox_methods[];
    extern int wxRichTextStyleListBox_methodCount;
    extern wxLuaBindNumber wxRichTextStyleListBox_enums[];
    extern int wxRichTextStyleListBox_enumCount;
    extern void wxLua_wxRichTextStyleListBox_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextStyleListCtrl_methods[];
    extern int wxRichTextStyleListCtrl_methodCount;
    extern void wxLua_wxRichTextStyleListCtrl_delete_function(void** p);
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)
    extern wxLuaBindMethod wxRichTextXMLHandler_methods[];
    extern int wxRichTextXMLHandler_methodCount;
    extern void wxLua_wxRichTextXMLHandler_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextXMLHelper_methods[];
    extern int wxRichTextXMLHelper_methodCount;
    extern void wxLua_wxRichTextXMLHelper_delete_function(void** p);
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
    extern wxLuaBindMethod wxRichTextAction_methods[];
    extern int wxRichTextAction_methodCount;
    extern void wxLua_wxRichTextAction_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextAttr_methods[];
    extern int wxRichTextAttr_methodCount;
    extern void wxLua_wxRichTextAttr_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextAttrArray_methods[];
    extern int wxRichTextAttrArray_methodCount;
    extern void wxLua_wxRichTextAttrArray_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextBox_methods[];
    extern int wxRichTextBox_methodCount;
    extern void wxLua_wxRichTextBox_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextBoxStyleDefinition_methods[];
    extern int wxRichTextBoxStyleDefinition_methodCount;
    extern void wxLua_wxRichTextBoxStyleDefinition_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextBuffer_methods[];
    extern int wxRichTextBuffer_methodCount;
    extern void wxLua_wxRichTextBuffer_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextCell_methods[];
    extern int wxRichTextCell_methodCount;
    extern void wxLua_wxRichTextCell_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextCharacterStyleDefinition_methods[];
    extern int wxRichTextCharacterStyleDefinition_methodCount;
    extern void wxLua_wxRichTextCharacterStyleDefinition_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextCommand_methods[];
    extern int wxRichTextCommand_methodCount;
    extern void wxLua_wxRichTextCommand_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextCompositeObject_methods[];
    extern int wxRichTextCompositeObject_methodCount;
    extern void wxLua_wxRichTextCompositeObject_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextContextMenuPropertiesInfo_methods[];
    extern int wxRichTextContextMenuPropertiesInfo_methodCount;
    extern void wxLua_wxRichTextContextMenuPropertiesInfo_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextCtrl_methods[];
    extern int wxRichTextCtrl_methodCount;
    static wxLuaArgType wxluabaseclass_wxluatypes_wxRichTextCtrl[] = { &wxluatype_wxTextCtrlIface, &wxluatype_wxTextAreaBase, &wxluatype_wxTextEntry, &wxluatype_wxScrollHelper, NULL };
    static wxIntPtr wxluabaseclass_vtable_offsets_wxRichTextCtrl[] = { wxIntPtr(((wxIntPtr)(wxTextCtrlIface*)(wxRichTextCtrl*)&wxluatype_TNONE) - ((wxIntPtr)(wxRichTextCtrl*)&wxluatype_TNONE)), wxIntPtr(((wxIntPtr)(wxTextAreaBase*)(wxRichTextCtrl*)&wxluatype_TNONE) - ((wxIntPtr)(wxRichTextCtrl*)&wxluatype_TNONE)), wxIntPtr(((wxIntPtr)(wxTextEntry*)(wxRichTextCtrl*)&wxluatype_TNONE) - ((wxIntPtr)(wxRichTextCtrl*)&wxluatype_TNONE)), wxIntPtr(((wxIntPtr)(wxScrollHelper*)(wxRichTextCtrl*)&wxluatype_TNONE) - ((wxIntPtr)(wxRichTextCtrl*)&wxluatype_TNONE)) };
    extern void wxLua_wxRichTextCtrl_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextDrawingContext_methods[];
    extern int wxRichTextDrawingContext_methodCount;
    extern void wxLua_wxRichTextDrawingContext_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextDrawingHandler_methods[];
    extern int wxRichTextDrawingHandler_methodCount;
    extern void wxLua_wxRichTextDrawingHandler_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextField_methods[];
    extern int wxRichTextField_methodCount;
    extern void wxLua_wxRichTextField_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextFieldType_methods[];
    extern int wxRichTextFieldType_methodCount;
    extern void wxLua_wxRichTextFieldType_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextFieldTypeHashMap_methods[];
    extern int wxRichTextFieldTypeHashMap_methodCount;
    extern void wxLua_wxRichTextFieldTypeHashMap_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextFieldTypeHashMap_iterator_methods[];
    extern int wxRichTextFieldTypeHashMap_iterator_methodCount;
    extern void wxLua_wxRichTextFieldTypeHashMap_iterator_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextFieldTypeStandard_methods[];
    extern int wxRichTextFieldTypeStandard_methodCount;
    extern wxLuaBindNumber wxRichTextFieldTypeStandard_enums[];
    extern int wxRichTextFieldTypeStandard_enumCount;
    extern void wxLua_wxRichTextFieldTypeStandard_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextFileHandler_methods[];
    extern int wxRichTextFileHandler_methodCount;
    extern void wxLua_wxRichTextFileHandler_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextFontTable_methods[];
    extern int wxRichTextFontTable_methodCount;
    extern void wxLua_wxRichTextFontTable_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextHeaderFooterData_methods[];
    extern int wxRichTextHeaderFooterData_methodCount;
    extern void wxLua_wxRichTextHeaderFooterData_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextImage_methods[];
    extern int wxRichTextImage_methodCount;
    extern void wxLua_wxRichTextImage_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextImageBlock_methods[];
    extern int wxRichTextImageBlock_methodCount;
    extern void wxLua_wxRichTextImageBlock_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextLine_methods[];
    extern int wxRichTextLine_methodCount;
    extern void wxLua_wxRichTextLine_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextListStyleDefinition_methods[];
    extern int wxRichTextListStyleDefinition_methodCount;
    extern void wxLua_wxRichTextListStyleDefinition_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextObject_methods[];
    extern int wxRichTextObject_methodCount;
    extern void wxLua_wxRichTextObject_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextObjectAddress_methods[];
    extern int wxRichTextObjectAddress_methodCount;
    extern void wxLua_wxRichTextObjectAddress_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextObjectList_methods[];
    extern int wxRichTextObjectList_methodCount;
    extern void wxLua_wxRichTextObjectList_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextObjectPtrArray_methods[];
    extern int wxRichTextObjectPtrArray_methodCount;
    extern void wxLua_wxRichTextObjectPtrArray_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextObjectPtrArrayArray_methods[];
    extern int wxRichTextObjectPtrArrayArray_methodCount;
    extern void wxLua_wxRichTextObjectPtrArrayArray_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextParagraph_methods[];
    extern int wxRichTextParagraph_methodCount;
    extern void wxLua_wxRichTextParagraph_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextParagraphLayoutBox_methods[];
    extern int wxRichTextParagraphLayoutBox_methodCount;
    extern void wxLua_wxRichTextParagraphLayoutBox_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextParagraphStyleDefinition_methods[];
    extern int wxRichTextParagraphStyleDefinition_methodCount;
    extern void wxLua_wxRichTextParagraphStyleDefinition_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextPlainText_methods[];
    extern int wxRichTextPlainText_methodCount;
    extern void wxLua_wxRichTextPlainText_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextPlainTextHandler_methods[];
    extern int wxRichTextPlainTextHandler_methodCount;
    extern void wxLua_wxRichTextPlainTextHandler_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextPrinting_methods[];
    extern int wxRichTextPrinting_methodCount;
    extern void wxLua_wxRichTextPrinting_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextPrintout_methods[];
    extern int wxRichTextPrintout_methodCount;
    extern void wxLua_wxRichTextPrintout_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextProperties_methods[];
    extern int wxRichTextProperties_methodCount;
    extern void wxLua_wxRichTextProperties_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextRange_methods[];
    extern int wxRichTextRange_methodCount;
    extern void wxLua_wxRichTextRange_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextRangeArray_methods[];
    extern int wxRichTextRangeArray_methodCount;
    extern void wxLua_wxRichTextRangeArray_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextRectArray_methods[];
    extern int wxRichTextRectArray_methodCount;
    extern void wxLua_wxRichTextRectArray_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextRenderer_methods[];
    extern int wxRichTextRenderer_methodCount;
    extern void wxLua_wxRichTextRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextSelection_methods[];
    extern int wxRichTextSelection_methodCount;
    extern void wxLua_wxRichTextSelection_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextStdRenderer_methods[];
    extern int wxRichTextStdRenderer_methodCount;
    extern void wxLua_wxRichTextStdRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextStyleDefinition_methods[];
    extern int wxRichTextStyleDefinition_methodCount;
    extern void wxLua_wxRichTextStyleDefinition_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextStyleOrganiserDialog_methods[];
    extern int wxRichTextStyleOrganiserDialog_methodCount;
    extern wxLuaBindNumber wxRichTextStyleOrganiserDialog_enums[];
    extern int wxRichTextStyleOrganiserDialog_enumCount;
    extern void wxLua_wxRichTextStyleOrganiserDialog_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextStyleSheet_methods[];
    extern int wxRichTextStyleSheet_methodCount;
    extern void wxLua_wxRichTextStyleSheet_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextTable_methods[];
    extern int wxRichTextTable_methodCount;
    extern void wxLua_wxRichTextTable_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextTableBlock_methods[];
    extern int wxRichTextTableBlock_methodCount;
    extern void wxLua_wxRichTextTableBlock_delete_function(void** p);
    extern wxLuaBindMethod wxRichTextVariantArray_methods[];
    extern int wxRichTextVariantArray_methodCount;
    extern void wxLua_wxRichTextVariantArray_delete_function(void** p);
    extern wxLuaBindMethod wxSymbolListCtrl_methods[];
    extern int wxSymbolListCtrl_methodCount;
    extern void wxLua_wxSymbolListCtrl_delete_function(void** p);
    extern wxLuaBindMethod wxSymbolPickerDialog_methods[];
    extern int wxSymbolPickerDialog_methodCount;
    extern wxLuaBindNumber wxSymbolPickerDialog_enums[];
    extern int wxSymbolPickerDialog_enumCount;
    extern void wxLua_wxSymbolPickerDialog_delete_function(void** p);
    extern wxLuaBindMethod wxTextAttrBorder_methods[];
    extern int wxTextAttrBorder_methodCount;
    extern void wxLua_wxTextAttrBorder_delete_function(void** p);
    extern wxLuaBindMethod wxTextAttrBorders_methods[];
    extern int wxTextAttrBorders_methodCount;
    extern void wxLua_wxTextAttrBorders_delete_function(void** p);
    extern wxLuaBindMethod wxTextAttrDimension_methods[];
    extern int wxTextAttrDimension_methodCount;
    extern void wxLua_wxTextAttrDimension_delete_function(void** p);
    extern wxLuaBindMethod wxTextAttrDimensionConverter_methods[];
    extern int wxTextAttrDimensionConverter_methodCount;
    extern void wxLua_wxTextAttrDimensionConverter_delete_function(void** p);
    extern wxLuaBindMethod wxTextAttrDimensions_methods[];
    extern int wxTextAttrDimensions_methodCount;
    extern void wxLua_wxTextAttrDimensions_delete_function(void** p);
    extern wxLuaBindMethod wxTextAttrSize_methods[];
    extern int wxTextAttrSize_methodCount;
    extern void wxLua_wxTextAttrSize_delete_function(void** p);
    extern wxLuaBindMethod wxTextBoxAttr_methods[];
    extern int wxTextBoxAttr_methodCount;
    extern void wxLua_wxTextBoxAttr_delete_function(void** p);
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT




wxLuaBindClass* wxLuaGetClassList_wxrichtext(size_t &count)
{
    static wxLuaBindClass classList[] =
    {
#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextAction, wxRichTextAction_methods, wxRichTextAction_methodCount, CLASSINFO(wxRichTextAction), &wxluatype_wxRichTextAction, wxluabaseclassnames_wxRichTextAction, wxluabaseclassbinds_wxRichTextAction, NULL, NULL, NULL, 0, &wxLua_wxRichTextAction_delete_function, }, 
        { wxluaclassname_wxRichTextAttr, wxRichTextAttr_methods, wxRichTextAttr_methodCount, NULL, &wxluatype_wxRichTextAttr, wxluabaseclassnames_wxRichTextAttr, wxluabaseclassbinds_wxRichTextAttr, NULL, NULL, NULL, 0, &wxLua_wxRichTextAttr_delete_function, }, 
        { wxluaclassname_wxRichTextAttrArray, wxRichTextAttrArray_methods, wxRichTextAttrArray_methodCount, NULL, &wxluatype_wxRichTextAttrArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextAttrArray_delete_function, }, 
        { wxluaclassname_wxRichTextBox, wxRichTextBox_methods, wxRichTextBox_methodCount, CLASSINFO(wxRichTextBox), &wxluatype_wxRichTextBox, wxluabaseclassnames_wxRichTextBox, wxluabaseclassbinds_wxRichTextBox, NULL, NULL, NULL, 0, &wxLua_wxRichTextBox_delete_function, }, 
        { wxluaclassname_wxRichTextBoxStyleDefinition, wxRichTextBoxStyleDefinition_methods, wxRichTextBoxStyleDefinition_methodCount, CLASSINFO(wxRichTextBoxStyleDefinition), &wxluatype_wxRichTextBoxStyleDefinition, wxluabaseclassnames_wxRichTextBoxStyleDefinition, wxluabaseclassbinds_wxRichTextBoxStyleDefinition, NULL, NULL, NULL, 0, &wxLua_wxRichTextBoxStyleDefinition_delete_function, }, 
        { wxluaclassname_wxRichTextBuffer, wxRichTextBuffer_methods, wxRichTextBuffer_methodCount, CLASSINFO(wxRichTextBuffer), &wxluatype_wxRichTextBuffer, wxluabaseclassnames_wxRichTextBuffer, wxluabaseclassbinds_wxRichTextBuffer, NULL, NULL, NULL, 0, &wxLua_wxRichTextBuffer_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)
        { wxluaclassname_wxRichTextBufferDataObject, wxRichTextBufferDataObject_methods, wxRichTextBufferDataObject_methodCount, NULL, &wxluatype_wxRichTextBufferDataObject, wxluabaseclassnames_wxRichTextBufferDataObject, wxluabaseclassbinds_wxRichTextBufferDataObject, NULL, NULL, NULL, 0, &wxLua_wxRichTextBufferDataObject_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DATAOBJ)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextCell, wxRichTextCell_methods, wxRichTextCell_methodCount, CLASSINFO(wxRichTextCell), &wxluatype_wxRichTextCell, wxluabaseclassnames_wxRichTextCell, wxluabaseclassbinds_wxRichTextCell, NULL, NULL, NULL, 0, &wxLua_wxRichTextCell_delete_function, }, 
        { wxluaclassname_wxRichTextCharacterStyleDefinition, wxRichTextCharacterStyleDefinition_methods, wxRichTextCharacterStyleDefinition_methodCount, CLASSINFO(wxRichTextCharacterStyleDefinition), &wxluatype_wxRichTextCharacterStyleDefinition, wxluabaseclassnames_wxRichTextCharacterStyleDefinition, wxluabaseclassbinds_wxRichTextCharacterStyleDefinition, NULL, NULL, NULL, 0, &wxLua_wxRichTextCharacterStyleDefinition_delete_function, }, 
        { wxluaclassname_wxRichTextCommand, wxRichTextCommand_methods, wxRichTextCommand_methodCount, CLASSINFO(wxRichTextCommand), &wxluatype_wxRichTextCommand, wxluabaseclassnames_wxRichTextCommand, wxluabaseclassbinds_wxRichTextCommand, NULL, NULL, NULL, 0, &wxLua_wxRichTextCommand_delete_function, }, 
        { wxluaclassname_wxRichTextCompositeObject, wxRichTextCompositeObject_methods, wxRichTextCompositeObject_methodCount, CLASSINFO(wxRichTextCompositeObject), &wxluatype_wxRichTextCompositeObject, wxluabaseclassnames_wxRichTextCompositeObject, wxluabaseclassbinds_wxRichTextCompositeObject, NULL, NULL, NULL, 0, &wxLua_wxRichTextCompositeObject_delete_function, }, 
        { wxluaclassname_wxRichTextContextMenuPropertiesInfo, wxRichTextContextMenuPropertiesInfo_methods, wxRichTextContextMenuPropertiesInfo_methodCount, NULL, &wxluatype_wxRichTextContextMenuPropertiesInfo, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextContextMenuPropertiesInfo_delete_function, }, 
        { wxluaclassname_wxRichTextCtrl, wxRichTextCtrl_methods, wxRichTextCtrl_methodCount, CLASSINFO(wxRichTextCtrl), &wxluatype_wxRichTextCtrl, wxluabaseclassnames_wxRichTextCtrl, wxluabaseclassbinds_wxRichTextCtrl, wxluabaseclass_wxluatypes_wxRichTextCtrl, wxluabaseclass_vtable_offsets_wxRichTextCtrl, NULL, 0, &wxLua_wxRichTextCtrl_delete_function, }, 
        { wxluaclassname_wxRichTextDrawingContext, wxRichTextDrawingContext_methods, wxRichTextDrawingContext_methodCount, CLASSINFO(wxRichTextDrawingContext), &wxluatype_wxRichTextDrawingContext, wxluabaseclassnames_wxRichTextDrawingContext, wxluabaseclassbinds_wxRichTextDrawingContext, NULL, NULL, NULL, 0, &wxLua_wxRichTextDrawingContext_delete_function, }, 
        { wxluaclassname_wxRichTextDrawingHandler, wxRichTextDrawingHandler_methods, wxRichTextDrawingHandler_methodCount, CLASSINFO(wxRichTextDrawingHandler), &wxluatype_wxRichTextDrawingHandler, wxluabaseclassnames_wxRichTextDrawingHandler, wxluabaseclassbinds_wxRichTextDrawingHandler, NULL, NULL, NULL, 0, &wxLua_wxRichTextDrawingHandler_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)
        { wxluaclassname_wxRichTextDropSource, wxRichTextDropSource_methods, wxRichTextDropSource_methodCount, NULL, &wxluatype_wxRichTextDropSource, wxluabaseclassnames_wxRichTextDropSource, wxluabaseclassbinds_wxRichTextDropSource, NULL, NULL, NULL, 0, &wxLua_wxRichTextDropSource_delete_function, }, 
        { wxluaclassname_wxRichTextDropTarget, wxRichTextDropTarget_methods, wxRichTextDropTarget_methodCount, NULL, &wxluatype_wxRichTextDropTarget, wxluabaseclassnames_wxRichTextDropTarget, wxluabaseclassbinds_wxRichTextDropTarget, NULL, NULL, NULL, 0, &wxLua_wxRichTextDropTarget_delete_function, }, 
        { wxluaclassname_wxRichTextEvent, wxRichTextEvent_methods, wxRichTextEvent_methodCount, CLASSINFO(wxRichTextEvent), &wxluatype_wxRichTextEvent, wxluabaseclassnames_wxRichTextEvent, wxluabaseclassbinds_wxRichTextEvent, NULL, NULL, NULL, 0, &wxLua_wxRichTextEvent_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_DRAG_AND_DROP)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextField, wxRichTextField_methods, wxRichTextField_methodCount, CLASSINFO(wxRichTextField), &wxluatype_wxRichTextField, wxluabaseclassnames_wxRichTextField, wxluabaseclassbinds_wxRichTextField, NULL, NULL, NULL, 0, &wxLua_wxRichTextField_delete_function, }, 
        { wxluaclassname_wxRichTextFieldType, wxRichTextFieldType_methods, wxRichTextFieldType_methodCount, CLASSINFO(wxRichTextFieldType), &wxluatype_wxRichTextFieldType, wxluabaseclassnames_wxRichTextFieldType, wxluabaseclassbinds_wxRichTextFieldType, NULL, NULL, NULL, 0, &wxLua_wxRichTextFieldType_delete_function, }, 
        { wxluaclassname_wxRichTextFieldTypeHashMap, wxRichTextFieldTypeHashMap_methods, wxRichTextFieldTypeHashMap_methodCount, NULL, &wxluatype_wxRichTextFieldTypeHashMap, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextFieldTypeHashMap_delete_function, }, 
        { wxluaclassname_wxRichTextFieldTypeHashMap_iterator, wxRichTextFieldTypeHashMap_iterator_methods, wxRichTextFieldTypeHashMap_iterator_methodCount, NULL, &wxluatype_wxRichTextFieldTypeHashMap_iterator, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextFieldTypeHashMap_iterator_delete_function, }, 
        { wxluaclassname_wxRichTextFieldTypeStandard, wxRichTextFieldTypeStandard_methods, wxRichTextFieldTypeStandard_methodCount, CLASSINFO(wxRichTextFieldTypeStandard), &wxluatype_wxRichTextFieldTypeStandard, wxluabaseclassnames_wxRichTextFieldTypeStandard, wxluabaseclassbinds_wxRichTextFieldTypeStandard, NULL, NULL, wxRichTextFieldTypeStandard_enums, wxRichTextFieldTypeStandard_enumCount, &wxLua_wxRichTextFieldTypeStandard_delete_function, }, 
        { wxluaclassname_wxRichTextFileHandler, wxRichTextFileHandler_methods, wxRichTextFileHandler_methodCount, CLASSINFO(wxRichTextFileHandler), &wxluatype_wxRichTextFileHandler, wxluabaseclassnames_wxRichTextFileHandler, wxluabaseclassbinds_wxRichTextFileHandler, NULL, NULL, NULL, 0, &wxLua_wxRichTextFileHandler_delete_function, }, 
        { wxluaclassname_wxRichTextFontTable, wxRichTextFontTable_methods, wxRichTextFontTable_methodCount, CLASSINFO(wxRichTextFontTable), &wxluatype_wxRichTextFontTable, wxluabaseclassnames_wxRichTextFontTable, wxluabaseclassbinds_wxRichTextFontTable, NULL, NULL, NULL, 0, &wxLua_wxRichTextFontTable_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { wxluaclassname_wxRichTextFormattingDialog, wxRichTextFormattingDialog_methods, wxRichTextFormattingDialog_methodCount, NULL, &wxluatype_wxRichTextFormattingDialog, NULL, NULL, NULL, NULL, wxRichTextFormattingDialog_enums, wxRichTextFormattingDialog_enumCount, &wxLua_wxRichTextFormattingDialog_delete_function, }, 
        { wxluaclassname_wxRichTextFormattingDialogFactory, wxRichTextFormattingDialogFactory_methods, wxRichTextFormattingDialogFactory_methodCount, CLASSINFO(wxRichTextFormattingDialogFactory), &wxluatype_wxRichTextFormattingDialogFactory, wxluabaseclassnames_wxRichTextFormattingDialogFactory, wxluabaseclassbinds_wxRichTextFormattingDialogFactory, NULL, NULL, NULL, 0, &wxLua_wxRichTextFormattingDialogFactory_delete_function, }, 
        { wxluaclassname_wxRichTextHTMLHandler, wxRichTextHTMLHandler_methods, wxRichTextHTMLHandler_methodCount, CLASSINFO(wxRichTextHTMLHandler), &wxluatype_wxRichTextHTMLHandler, wxluabaseclassnames_wxRichTextHTMLHandler, wxluabaseclassbinds_wxRichTextHTMLHandler, NULL, NULL, NULL, 0, &wxLua_wxRichTextHTMLHandler_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextHeaderFooterData, wxRichTextHeaderFooterData_methods, wxRichTextHeaderFooterData_methodCount, CLASSINFO(wxRichTextHeaderFooterData), &wxluatype_wxRichTextHeaderFooterData, wxluabaseclassnames_wxRichTextHeaderFooterData, wxluabaseclassbinds_wxRichTextHeaderFooterData, NULL, NULL, NULL, 0, &wxLua_wxRichTextHeaderFooterData_delete_function, }, 
        { wxluaclassname_wxRichTextImage, wxRichTextImage_methods, wxRichTextImage_methodCount, CLASSINFO(wxRichTextImage), &wxluatype_wxRichTextImage, wxluabaseclassnames_wxRichTextImage, wxluabaseclassbinds_wxRichTextImage, NULL, NULL, NULL, 0, &wxLua_wxRichTextImage_delete_function, }, 
        { wxluaclassname_wxRichTextImageBlock, wxRichTextImageBlock_methods, wxRichTextImageBlock_methodCount, CLASSINFO(wxRichTextImageBlock), &wxluatype_wxRichTextImageBlock, wxluabaseclassnames_wxRichTextImageBlock, wxluabaseclassbinds_wxRichTextImageBlock, NULL, NULL, NULL, 0, &wxLua_wxRichTextImageBlock_delete_function, }, 
        { wxluaclassname_wxRichTextLine, wxRichTextLine_methods, wxRichTextLine_methodCount, NULL, &wxluatype_wxRichTextLine, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextLine_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)
        { wxluaclassname_wxRichTextLineList, wxRichTextLineList_methods, wxRichTextLineList_methodCount, NULL, &wxluatype_wxRichTextLineList, wxluabaseclassnames_wxRichTextLineList, wxluabaseclassbinds_wxRichTextLineList, NULL, NULL, NULL, 0, &wxLua_wxRichTextLineList_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxRICHTEXT_USE_PARTIAL_TEXT_EXTENTS && wxRICHTEXT_USE_OPTIMIZED_LINE_DRAWING)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextListStyleDefinition, wxRichTextListStyleDefinition_methods, wxRichTextListStyleDefinition_methodCount, CLASSINFO(wxRichTextListStyleDefinition), &wxluatype_wxRichTextListStyleDefinition, wxluabaseclassnames_wxRichTextListStyleDefinition, wxluabaseclassbinds_wxRichTextListStyleDefinition, NULL, NULL, NULL, 0, &wxLua_wxRichTextListStyleDefinition_delete_function, }, 
        { wxluaclassname_wxRichTextObject, wxRichTextObject_methods, wxRichTextObject_methodCount, CLASSINFO(wxRichTextObject), &wxluatype_wxRichTextObject, wxluabaseclassnames_wxRichTextObject, wxluabaseclassbinds_wxRichTextObject, NULL, NULL, NULL, 0, &wxLua_wxRichTextObject_delete_function, }, 
        { wxluaclassname_wxRichTextObjectAddress, wxRichTextObjectAddress_methods, wxRichTextObjectAddress_methodCount, NULL, &wxluatype_wxRichTextObjectAddress, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextObjectAddress_delete_function, }, 
        { wxluaclassname_wxRichTextObjectList, wxRichTextObjectList_methods, wxRichTextObjectList_methodCount, NULL, &wxluatype_wxRichTextObjectList, wxluabaseclassnames_wxRichTextObjectList, wxluabaseclassbinds_wxRichTextObjectList, NULL, NULL, NULL, 0, &wxLua_wxRichTextObjectList_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)
        { wxluaclassname_wxRichTextObjectPropertiesDialog, wxRichTextObjectPropertiesDialog_methods, wxRichTextObjectPropertiesDialog_methodCount, NULL, &wxluatype_wxRichTextObjectPropertiesDialog, wxluabaseclassnames_wxRichTextObjectPropertiesDialog, wxluabaseclassbinds_wxRichTextObjectPropertiesDialog, NULL, NULL, wxRichTextObjectPropertiesDialog_enums, wxRichTextObjectPropertiesDialog_enumCount, &wxLua_wxRichTextObjectPropertiesDialog_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextObjectPtrArray, wxRichTextObjectPtrArray_methods, wxRichTextObjectPtrArray_methodCount, NULL, &wxluatype_wxRichTextObjectPtrArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextObjectPtrArray_delete_function, }, 
        { wxluaclassname_wxRichTextObjectPtrArrayArray, wxRichTextObjectPtrArrayArray_methods, wxRichTextObjectPtrArrayArray_methodCount, NULL, &wxluatype_wxRichTextObjectPtrArrayArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextObjectPtrArrayArray_delete_function, }, 
        { wxluaclassname_wxRichTextParagraph, wxRichTextParagraph_methods, wxRichTextParagraph_methodCount, CLASSINFO(wxRichTextParagraph), &wxluatype_wxRichTextParagraph, wxluabaseclassnames_wxRichTextParagraph, wxluabaseclassbinds_wxRichTextParagraph, NULL, NULL, NULL, 0, &wxLua_wxRichTextParagraph_delete_function, }, 
        { wxluaclassname_wxRichTextParagraphLayoutBox, wxRichTextParagraphLayoutBox_methods, wxRichTextParagraphLayoutBox_methodCount, CLASSINFO(wxRichTextParagraphLayoutBox), &wxluatype_wxRichTextParagraphLayoutBox, wxluabaseclassnames_wxRichTextParagraphLayoutBox, wxluabaseclassbinds_wxRichTextParagraphLayoutBox, NULL, NULL, NULL, 0, &wxLua_wxRichTextParagraphLayoutBox_delete_function, }, 
        { wxluaclassname_wxRichTextParagraphStyleDefinition, wxRichTextParagraphStyleDefinition_methods, wxRichTextParagraphStyleDefinition_methodCount, CLASSINFO(wxRichTextParagraphStyleDefinition), &wxluatype_wxRichTextParagraphStyleDefinition, wxluabaseclassnames_wxRichTextParagraphStyleDefinition, wxluabaseclassbinds_wxRichTextParagraphStyleDefinition, NULL, NULL, NULL, 0, &wxLua_wxRichTextParagraphStyleDefinition_delete_function, }, 
        { wxluaclassname_wxRichTextPlainText, wxRichTextPlainText_methods, wxRichTextPlainText_methodCount, CLASSINFO(wxRichTextPlainText), &wxluatype_wxRichTextPlainText, wxluabaseclassnames_wxRichTextPlainText, wxluabaseclassbinds_wxRichTextPlainText, NULL, NULL, NULL, 0, &wxLua_wxRichTextPlainText_delete_function, }, 
        { wxluaclassname_wxRichTextPlainTextHandler, wxRichTextPlainTextHandler_methods, wxRichTextPlainTextHandler_methodCount, CLASSINFO(wxRichTextPlainTextHandler), &wxluatype_wxRichTextPlainTextHandler, wxluabaseclassnames_wxRichTextPlainTextHandler, wxluabaseclassbinds_wxRichTextPlainTextHandler, NULL, NULL, NULL, 0, &wxLua_wxRichTextPlainTextHandler_delete_function, }, 
        { wxluaclassname_wxRichTextPrinting, wxRichTextPrinting_methods, wxRichTextPrinting_methodCount, CLASSINFO(wxRichTextPrinting), &wxluatype_wxRichTextPrinting, wxluabaseclassnames_wxRichTextPrinting, wxluabaseclassbinds_wxRichTextPrinting, NULL, NULL, NULL, 0, &wxLua_wxRichTextPrinting_delete_function, }, 
        { wxluaclassname_wxRichTextPrintout, wxRichTextPrintout_methods, wxRichTextPrintout_methodCount, CLASSINFO(wxRichTextPrintout), &wxluatype_wxRichTextPrintout, wxluabaseclassnames_wxRichTextPrintout, wxluabaseclassbinds_wxRichTextPrintout, NULL, NULL, NULL, 0, &wxLua_wxRichTextPrintout_delete_function, }, 
        { wxluaclassname_wxRichTextProperties, wxRichTextProperties_methods, wxRichTextProperties_methodCount, CLASSINFO(wxRichTextProperties), &wxluatype_wxRichTextProperties, wxluabaseclassnames_wxRichTextProperties, wxluabaseclassbinds_wxRichTextProperties, NULL, NULL, NULL, 0, &wxLua_wxRichTextProperties_delete_function, }, 
        { wxluaclassname_wxRichTextRange, wxRichTextRange_methods, wxRichTextRange_methodCount, NULL, &wxluatype_wxRichTextRange, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextRange_delete_function, }, 
        { wxluaclassname_wxRichTextRangeArray, wxRichTextRangeArray_methods, wxRichTextRangeArray_methodCount, NULL, &wxluatype_wxRichTextRangeArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextRangeArray_delete_function, }, 
        { wxluaclassname_wxRichTextRectArray, wxRichTextRectArray_methods, wxRichTextRectArray_methodCount, NULL, &wxluatype_wxRichTextRectArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextRectArray_delete_function, }, 
        { wxluaclassname_wxRichTextRenderer, wxRichTextRenderer_methods, wxRichTextRenderer_methodCount, CLASSINFO(wxRichTextRenderer), &wxluatype_wxRichTextRenderer, wxluabaseclassnames_wxRichTextRenderer, wxluabaseclassbinds_wxRichTextRenderer, NULL, NULL, NULL, 0, &wxLua_wxRichTextRenderer_delete_function, }, 
        { wxluaclassname_wxRichTextSelection, wxRichTextSelection_methods, wxRichTextSelection_methodCount, NULL, &wxluatype_wxRichTextSelection, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextSelection_delete_function, }, 
        { wxluaclassname_wxRichTextStdRenderer, wxRichTextStdRenderer_methods, wxRichTextStdRenderer_methodCount, CLASSINFO(wxRichTextStdRenderer), &wxluatype_wxRichTextStdRenderer, wxluabaseclassnames_wxRichTextStdRenderer, wxluabaseclassbinds_wxRichTextStdRenderer, NULL, NULL, NULL, 0, &wxLua_wxRichTextStdRenderer_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)
        { wxluaclassname_wxRichTextStyleComboCtrl, wxRichTextStyleComboCtrl_methods, wxRichTextStyleComboCtrl_methodCount, CLASSINFO(wxRichTextStyleComboCtrl), &wxluatype_wxRichTextStyleComboCtrl, wxluabaseclassnames_wxRichTextStyleComboCtrl, wxluabaseclassbinds_wxRichTextStyleComboCtrl, wxluabaseclass_wxluatypes_wxRichTextStyleComboCtrl, wxluabaseclass_vtable_offsets_wxRichTextStyleComboCtrl, NULL, 0, &wxLua_wxRichTextStyleComboCtrl_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_COMBOCTRL) && (wxUSE_HTML)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextStyleDefinition, wxRichTextStyleDefinition_methods, wxRichTextStyleDefinition_methodCount, CLASSINFO(wxRichTextStyleDefinition), &wxluatype_wxRichTextStyleDefinition, wxluabaseclassnames_wxRichTextStyleDefinition, wxluabaseclassbinds_wxRichTextStyleDefinition, NULL, NULL, NULL, 0, &wxLua_wxRichTextStyleDefinition_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)
        { wxluaclassname_wxRichTextStyleListBox, wxRichTextStyleListBox_methods, wxRichTextStyleListBox_methodCount, NULL, &wxluatype_wxRichTextStyleListBox, wxluabaseclassnames_wxRichTextStyleListBox, wxluabaseclassbinds_wxRichTextStyleListBox, NULL, NULL, wxRichTextStyleListBox_enums, wxRichTextStyleListBox_enumCount, &wxLua_wxRichTextStyleListBox_delete_function, }, 
        { wxluaclassname_wxRichTextStyleListCtrl, wxRichTextStyleListCtrl_methods, wxRichTextStyleListCtrl_methodCount, CLASSINFO(wxRichTextStyleListCtrl), &wxluatype_wxRichTextStyleListCtrl, wxluabaseclassnames_wxRichTextStyleListCtrl, wxluabaseclassbinds_wxRichTextStyleListCtrl, NULL, NULL, NULL, 0, &wxLua_wxRichTextStyleListCtrl_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_HTML)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxRichTextStyleOrganiserDialog, wxRichTextStyleOrganiserDialog_methods, wxRichTextStyleOrganiserDialog_methodCount, CLASSINFO(wxRichTextStyleOrganiserDialog), &wxluatype_wxRichTextStyleOrganiserDialog, wxluabaseclassnames_wxRichTextStyleOrganiserDialog, wxluabaseclassbinds_wxRichTextStyleOrganiserDialog, NULL, NULL, wxRichTextStyleOrganiserDialog_enums, wxRichTextStyleOrganiserDialog_enumCount, &wxLua_wxRichTextStyleOrganiserDialog_delete_function, }, 
        { wxluaclassname_wxRichTextStyleSheet, wxRichTextStyleSheet_methods, wxRichTextStyleSheet_methodCount, CLASSINFO(wxRichTextStyleSheet), &wxluatype_wxRichTextStyleSheet, wxluabaseclassnames_wxRichTextStyleSheet, wxluabaseclassbinds_wxRichTextStyleSheet, NULL, NULL, NULL, 0, &wxLua_wxRichTextStyleSheet_delete_function, }, 
        { wxluaclassname_wxRichTextTable, wxRichTextTable_methods, wxRichTextTable_methodCount, CLASSINFO(wxRichTextTable), &wxluatype_wxRichTextTable, wxluabaseclassnames_wxRichTextTable, wxluabaseclassbinds_wxRichTextTable, NULL, NULL, NULL, 0, &wxLua_wxRichTextTable_delete_function, }, 
        { wxluaclassname_wxRichTextTableBlock, wxRichTextTableBlock_methods, wxRichTextTableBlock_methodCount, NULL, &wxluatype_wxRichTextTableBlock, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextTableBlock_delete_function, }, 
        { wxluaclassname_wxRichTextVariantArray, wxRichTextVariantArray_methods, wxRichTextVariantArray_methodCount, NULL, &wxluatype_wxRichTextVariantArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxRichTextVariantArray_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT

#if (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)
        { wxluaclassname_wxRichTextXMLHandler, wxRichTextXMLHandler_methods, wxRichTextXMLHandler_methodCount, CLASSINFO(wxRichTextXMLHandler), &wxluatype_wxRichTextXMLHandler, wxluabaseclassnames_wxRichTextXMLHandler, wxluabaseclassbinds_wxRichTextXMLHandler, NULL, NULL, NULL, 0, &wxLua_wxRichTextXMLHandler_delete_function, }, 
        { wxluaclassname_wxRichTextXMLHelper, wxRichTextXMLHelper_methods, wxRichTextXMLHelper_methodCount, CLASSINFO(wxRichTextXMLHelper), &wxluatype_wxRichTextXMLHelper, wxluabaseclassnames_wxRichTextXMLHelper, wxluabaseclassbinds_wxRichTextXMLHelper, NULL, NULL, NULL, 0, &wxLua_wxRichTextXMLHelper_delete_function, }, 
#endif // (wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT) && (wxUSE_XML)

#if wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT
        { wxluaclassname_wxSymbolListCtrl, wxSymbolListCtrl_methods, wxSymbolListCtrl_methodCount, NULL, &wxluatype_wxSymbolListCtrl, wxluabaseclassnames_wxSymbolListCtrl, wxluabaseclassbinds_wxSymbolListCtrl, NULL, NULL, NULL, 0, &wxLua_wxSymbolListCtrl_delete_function, }, 
        { wxluaclassname_wxSymbolPickerDialog, wxSymbolPickerDialog_methods, wxSymbolPickerDialog_methodCount, CLASSINFO(wxSymbolPickerDialog), &wxluatype_wxSymbolPickerDialog, wxluabaseclassnames_wxSymbolPickerDialog, wxluabaseclassbinds_wxSymbolPickerDialog, NULL, NULL, wxSymbolPickerDialog_enums, wxSymbolPickerDialog_enumCount, &wxLua_wxSymbolPickerDialog_delete_function, }, 
        { wxluaclassname_wxTextAttrBorder, wxTextAttrBorder_methods, wxTextAttrBorder_methodCount, NULL, &wxluatype_wxTextAttrBorder, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxTextAttrBorder_delete_function, }, 
        { wxluaclassname_wxTextAttrBorders, wxTextAttrBorders_methods, wxTextAttrBorders_methodCount, NULL, &wxluatype_wxTextAttrBorders, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxTextAttrBorders_delete_function, }, 
        { wxluaclassname_wxTextAttrDimension, wxTextAttrDimension_methods, wxTextAttrDimension_methodCount, NULL, &wxluatype_wxTextAttrDimension, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxTextAttrDimension_delete_function, }, 
        { wxluaclassname_wxTextAttrDimensionConverter, wxTextAttrDimensionConverter_methods, wxTextAttrDimensionConverter_methodCount, NULL, &wxluatype_wxTextAttrDimensionConverter, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxTextAttrDimensionConverter_delete_function, }, 
        { wxluaclassname_wxTextAttrDimensions, wxTextAttrDimensions_methods, wxTextAttrDimensions_methodCount, NULL, &wxluatype_wxTextAttrDimensions, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxTextAttrDimensions_delete_function, }, 
        { wxluaclassname_wxTextAttrSize, wxTextAttrSize_methods, wxTextAttrSize_methodCount, NULL, &wxluatype_wxTextAttrSize, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxTextAttrSize_delete_function, }, 
        { wxluaclassname_wxTextBoxAttr, wxTextBoxAttr_methods, wxTextBoxAttr_methodCount, NULL, &wxluatype_wxTextBoxAttr, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxTextBoxAttr_delete_function, }, 
#endif // wxLUA_USE_wxRichText && wxCHECK_VERSION(3,0,0) && wxUSE_RICHTEXT


        { 0, 0, 0, 0, 0, 0, 0 }, 
    };
    count = sizeof(classList)/sizeof(wxLuaBindClass) - 1;

    return classList;
}

// ---------------------------------------------------------------------------
// wxLuaBinding_wxrichtext() - the binding class
// ---------------------------------------------------------------------------

IMPLEMENT_DYNAMIC_CLASS(wxLuaBinding_wxrichtext, wxLuaBinding)

wxLuaBinding_wxrichtext::wxLuaBinding_wxrichtext() : wxLuaBinding()
{
    m_bindingName   = wxT("wxrichtext");
    m_nameSpace     = wxT("wx");
    m_classArray    = wxLuaGetClassList_wxrichtext(m_classCount);
    m_numberArray   = wxLuaGetDefineList_wxrichtext(m_numberCount);
    m_stringArray   = wxLuaGetStringList_wxrichtext(m_stringCount);
    m_eventArray    = wxLuaGetEventList_wxrichtext(m_eventCount);
    m_objectArray   = wxLuaGetObjectList_wxrichtext(m_objectCount);
    m_functionArray = wxLuaGetFunctionList_wxrichtext(m_functionCount);
    InitBinding();
}



// ---------------------------------------------------------------------------

wxLuaBinding* wxLuaBinding_wxrichtext_init()
{
    static wxLuaBinding_wxrichtext m_binding;

    if (wxLuaBinding::GetBindingArray().Index(&m_binding) == wxNOT_FOUND)
        wxLuaBinding::GetBindingArray().Add(&m_binding);

    return &m_binding;
}


